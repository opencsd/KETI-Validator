#include "HistogramTable.hpp"
#include <algorithm>
#include <regex>
#include <iostream>
#include <string>
#include <sstream>
#include <cmath>
histogram p_partkey;
histogram p_name;
histogram p_mfgr;
histogram p_brand;
histogram p_type;
histogram p_size;
histogram p_container;
histogram p_retailprice;
histogram p_comment; // not make

histogram s_suppkey;
histogram s_name;
histogram s_address;
histogram s_nationkey;
histogram s_phone;
histogram s_acctbal;
histogram s_comment; // not make 

histogram ps_partkey;
histogram ps_suppkey;
histogram ps_availqty;
histogram ps_supplycost;
histogram ps_comment;

histogram c_custkey;
histogram c_name;
histogram c_address;
histogram c_nationkey;
histogram c_phone;
histogram c_acctbal;
histogram c_mktsegment;
histogram c_comment;

histogram o_orderkey;
histogram o_custkey;
histogram o_orderstatus;
histogram o_totalprice;
histogram o_orderdate;
histogram o_orderpriority;
histogram o_clerk;
histogram o_shippriority;
histogram o_comment;

histogram l_orderkey;
histogram l_partkey;
histogram l_suppkey;
histogram l_linenumber;
histogram l_quantity;
histogram l_extendedprice;
histogram l_discount;
histogram l_tax;
histogram l_returnflag;
histogram l_linestatus;
histogram l_shipdate;
histogram l_commitdate;
histogram l_receiptdate;
histogram l_shipinstruct;
histogram l_shipmode;
histogram l_comment;

histogram n_nationkey;
histogram n_name;
histogram n_regionkey;
histogram n_comment;

histogram r_regionkey;
histogram r_name;
histogram r_comment;


void InitHistogram(){
    p_name.identifier = true;
    p_name.dataType = "string";
    p_name.count = partRow;
    
    p_partkey.identifier = true;
    p_partkey.dataType = "int";
    p_partkey.minValue = 1;
    p_partkey.maxValue = partRow;
    p_partkey.count = partRow;

    p_mfgr.identifier = false;
    p_mfgr.dataType = "string";
    p_mfgr.count = partRow;
    p_mfgr.bucketNum = 5;
    std::string input = R"(
    | Manufacturer#1 | 40084 |
    | Manufacturer#2 | 39636 |
    | Manufacturer#3 | 40304 |
    | Manufacturer#4 | 39841 |
    | Manufacturer#5 | 40135 |
    )";
    p_mfgr.dataMap = makeDataMap(input);

    p_brand.identifier = false;
    p_brand.dataType = "string";
    p_brand.count = partRow;
    p_brand.bucketNum = 25;
    input = R"(
| Brand#11 |  7876 |
| Brand#12 |  8167 |
| Brand#13 |  7989 |
| Brand#14 |  8053 |
| Brand#15 |  7999 |
| Brand#21 |  7991 |
| Brand#22 |  7978 |
| Brand#23 |  7870 |
| Brand#24 |  7975 |
| Brand#25 |  7822 |
| Brand#31 |  7968 |
| Brand#32 |  7948 |
| Brand#33 |  8141 |
| Brand#34 |  8014 |
| Brand#35 |  8233 |
| Brand#41 |  8006 |
| Brand#42 |  7908 |
| Brand#43 |  7918 |
| Brand#44 |  8031 |
| Brand#45 |  7978 |
| Brand#51 |  7920 |
| Brand#52 |  8158 |
| Brand#53 |  8088 |
| Brand#54 |  7938 |
| Brand#55 |  8031 |
    )";
    p_brand.dataMap = makeDataMap(input);   

    p_type.identifier = false;
    p_type.dataType = "string";
    p_type.count = partRow;
    p_type.bucketNum = 150;
    input = R"(
| ECONOMY ANODIZED BRASS    |  1300 |
| ECONOMY ANODIZED COPPER   |  1342 |
| ECONOMY ANODIZED NICKEL   |  1378 |
| ECONOMY ANODIZED STEEL    |  1451 |
| ECONOMY ANODIZED TIN      |  1366 |
| ECONOMY BRUSHED BRASS     |  1259 |
| ECONOMY BRUSHED COPPER    |  1342 |
| ECONOMY BRUSHED NICKEL    |  1291 |
| ECONOMY BRUSHED STEEL     |  1332 |
| ECONOMY BRUSHED TIN       |  1358 |
| ECONOMY BURNISHED BRASS   |  1313 |
| ECONOMY BURNISHED COPPER  |  1387 |
| ECONOMY BURNISHED NICKEL  |  1308 |
| ECONOMY BURNISHED STEEL   |  1322 |
| ECONOMY BURNISHED TIN     |  1304 |
| ECONOMY PLATED BRASS      |  1383 |
| ECONOMY PLATED COPPER     |  1345 |
| ECONOMY PLATED NICKEL     |  1317 |
| ECONOMY PLATED STEEL      |  1343 |
| ECONOMY PLATED TIN        |  1353 |
| ECONOMY POLISHED BRASS    |  1348 |
| ECONOMY POLISHED COPPER   |  1331 |
| ECONOMY POLISHED NICKEL   |  1314 |
| ECONOMY POLISHED STEEL    |  1331 |
| ECONOMY POLISHED TIN      |  1353 |
| LARGE ANODIZED BRASS      |  1351 |
| LARGE ANODIZED COPPER     |  1366 |
| LARGE ANODIZED NICKEL     |  1311 |
| LARGE ANODIZED STEEL      |  1319 |
| LARGE ANODIZED TIN        |  1395 |
| LARGE BRUSHED BRASS       |  1311 |
| LARGE BRUSHED COPPER      |  1279 |
| LARGE BRUSHED NICKEL      |  1338 |
| LARGE BRUSHED STEEL       |  1291 |
| LARGE BRUSHED TIN         |  1328 |
| LARGE BURNISHED BRASS     |  1327 |
| LARGE BURNISHED COPPER    |  1337 |
| LARGE BURNISHED NICKEL    |  1330 |
| LARGE BURNISHED STEEL     |  1233 |
| LARGE BURNISHED TIN       |  1282 |
| LARGE PLATED BRASS        |  1415 |
| LARGE PLATED COPPER       |  1301 |
| LARGE PLATED NICKEL       |  1347 |
| LARGE PLATED STEEL        |  1434 |
| LARGE PLATED TIN          |  1290 |
| LARGE POLISHED BRASS      |  1320 |
| LARGE POLISHED COPPER     |  1397 |
| LARGE POLISHED NICKEL     |  1342 |
| LARGE POLISHED STEEL      |  1257 |
| LARGE POLISHED TIN        |  1219 |
| MEDIUM ANODIZED BRASS     |  1310 |
| MEDIUM ANODIZED COPPER    |  1279 |
| MEDIUM ANODIZED NICKEL    |  1353 |
| MEDIUM ANODIZED STEEL     |  1321 |
| MEDIUM ANODIZED TIN       |  1405 |
| MEDIUM BRUSHED BRASS      |  1368 |
| MEDIUM BRUSHED COPPER     |  1307 |
| MEDIUM BRUSHED NICKEL     |  1299 |
| MEDIUM BRUSHED STEEL      |  1263 |
| MEDIUM BRUSHED TIN        |  1257 |
| MEDIUM BURNISHED BRASS    |  1336 |
| MEDIUM BURNISHED COPPER   |  1415 |
| MEDIUM BURNISHED NICKEL   |  1296 |
| MEDIUM BURNISHED STEEL    |  1319 |
| MEDIUM BURNISHED TIN      |  1302 |
| MEDIUM PLATED BRASS       |  1356 |
| MEDIUM PLATED COPPER      |  1308 |
| MEDIUM PLATED NICKEL      |  1350 |
| MEDIUM PLATED STEEL       |  1370 |
| MEDIUM PLATED TIN         |  1305 |
| MEDIUM POLISHED BRASS     |  1356 |
| MEDIUM POLISHED COPPER    |  1348 |
| MEDIUM POLISHED NICKEL    |  1331 |
| MEDIUM POLISHED STEEL     |  1329 |
| MEDIUM POLISHED TIN       |  1346 |
| PROMO ANODIZED BRASS      |  1276 |
| PROMO ANODIZED COPPER     |  1346 |
| PROMO ANODIZED NICKEL     |  1378 |
| PROMO ANODIZED STEEL      |  1248 |
| PROMO ANODIZED TIN        |  1337 |
| PROMO BRUSHED BRASS       |  1420 |
| PROMO BRUSHED COPPER      |  1259 |
| PROMO BRUSHED NICKEL      |  1327 |
| PROMO BRUSHED STEEL       |  1317 |
| PROMO BRUSHED TIN         |  1265 |
| PROMO BURNISHED BRASS     |  1293 |
| PROMO BURNISHED COPPER    |  1326 |
| PROMO BURNISHED NICKEL    |  1340 |
| PROMO BURNISHED STEEL     |  1292 |
| PROMO BURNISHED TIN       |  1372 |
| PROMO PLATED BRASS        |  1350 |
| PROMO PLATED COPPER       |  1316 |
| PROMO PLATED NICKEL       |  1362 |
| PROMO PLATED STEEL        |  1266 |
| PROMO PLATED TIN          |  1347 |
| PROMO POLISHED BRASS      |  1366 |
| PROMO POLISHED COPPER     |  1310 |
| PROMO POLISHED NICKEL     |  1318 |
| PROMO POLISHED STEEL      |  1345 |
| PROMO POLISHED TIN        |  1398 |
| SMALL ANODIZED BRASS      |  1341 |
| SMALL ANODIZED COPPER     |  1375 |
| SMALL ANODIZED NICKEL     |  1334 |
| SMALL ANODIZED STEEL      |  1342 |
| SMALL ANODIZED TIN        |  1351 |
| SMALL BRUSHED BRASS       |  1347 |
| SMALL BRUSHED COPPER      |  1329 |
| SMALL BRUSHED NICKEL      |  1352 |
| SMALL BRUSHED STEEL       |  1290 |
| SMALL BRUSHED TIN         |  1413 |
| SMALL BURNISHED BRASS     |  1381 |
| SMALL BURNISHED COPPER    |  1314 |
| SMALL BURNISHED NICKEL    |  1326 |
| SMALL BURNISHED STEEL     |  1327 |
| SMALL BURNISHED TIN       |  1362 |
| SMALL PLATED BRASS        |  1325 |
| SMALL PLATED COPPER       |  1374 |
| SMALL PLATED NICKEL       |  1362 |
| SMALL PLATED STEEL        |  1313 |
| SMALL PLATED TIN          |  1314 |
| SMALL POLISHED BRASS      |  1302 |
| SMALL POLISHED COPPER     |  1342 |
| SMALL POLISHED NICKEL     |  1403 |
| SMALL POLISHED STEEL      |  1275 |
| SMALL POLISHED TIN        |  1378 |
| STANDARD ANODIZED BRASS   |  1320 |
| STANDARD ANODIZED COPPER  |  1382 |
| STANDARD ANODIZED NICKEL  |  1331 |
| STANDARD ANODIZED STEEL   |  1359 |
| STANDARD ANODIZED TIN     |  1399 |
| STANDARD BRUSHED BRASS    |  1312 |
| STANDARD BRUSHED COPPER   |  1300 |
| STANDARD BRUSHED NICKEL   |  1285 |
| STANDARD BRUSHED STEEL    |  1319 |
| STANDARD BRUSHED TIN      |  1387 |
| STANDARD BURNISHED BRASS  |  1342 |
| STANDARD BURNISHED COPPER |  1349 |
| STANDARD BURNISHED NICKEL |  1367 |
| STANDARD BURNISHED STEEL  |  1375 |
| STANDARD BURNISHED TIN    |  1321 |
| STANDARD PLATED BRASS     |  1362 |
| STANDARD PLATED COPPER    |  1354 |
| STANDARD PLATED NICKEL    |  1321 |
| STANDARD PLATED STEEL     |  1364 |
| STANDARD PLATED TIN       |  1366 |
| STANDARD POLISHED BRASS   |  1268 |
| STANDARD POLISHED COPPER  |  1280 |
| STANDARD POLISHED NICKEL  |  1337 |
| STANDARD POLISHED STEEL   |  1336 |
| STANDARD POLISHED TIN     |  1298 |
    )";
    p_type.dataMap = makeDataMap(input);

    p_size.identifier = false;
    p_size.dataType = "int";
    p_size.count = partRow;
    p_size.minValue = 1;
    p_size.maxValue = 50;
    p_size.bucketNum = 50;
    input = R"(
        |      1 |  4020 |
|      2 |  4060 |
|      3 |  4123 |
|      4 |  4006 |
|      5 |  4062 |
|      6 |  3964 |
|      7 |  4079 |
|      8 |  3949 |
|      9 |  4034 |
|     10 |  4177 |
|     11 |  4006 |
|     12 |  4012 |
|     13 |  3961 |
|     14 |  4153 |
|     15 |  3907 |
|     16 |  4103 |
|     17 |  3877 |
|     18 |  4025 |
|     19 |  3851 |
|     20 |  3963 |
|     21 |  4004 |
|     22 |  4102 |
|     23 |  3932 |
|     24 |  3989 |
|     25 |  3949 |
|     26 |  4001 |
|     27 |  3929 |
|     28 |  3924 |
|     29 |  4086 |
|     30 |  4127 |
|     31 |  3835 |
|     32 |  4003 |
|     33 |  4025 |
|     34 |  4006 |
|     35 |  4088 |
|     36 |  3895 |
|     37 |  4014 |
|     38 |  4041 |
|     39 |  4021 |
|     40 |  3970 |
|     41 |  4022 |
|     42 |  4031 |
|     43 |  3884 |
|     44 |  4010 |
|     45 |  3893 |
|     46 |  3971 |
|     47 |  4026 |
|     48 |  4056 |
|     49 |  3945 |
|     50 |  3889 |
    )";
    p_size.dataMap = makeDataMap(input);

    p_container.identifier = false;
    p_container.dataType = "string";
    p_container.count = partRow;
    p_container.bucketNum = 40;
    input = R"(
| JUMBO BAG   |  5024 |
| JUMBO BOX   |  4982 |
| JUMBO CAN   |  5062 |
| JUMBO CASE  |  4972 |
| JUMBO DRUM  |  4903 |
| JUMBO JAR   |  5115 |
| JUMBO PACK  |  5001 |
| JUMBO PKG   |  5013 |
| LG BAG      |  4899 |
| LG BOX      |  5096 |
| LG CAN      |  4916 |
| LG CASE     |  4947 |
| LG DRUM     |  4848 |
| LG JAR      |  5103 |
| LG PACK     |  5091 |
| LG PKG      |  4946 |
| MED BAG     |  5000 |
| MED BOX     |  5043 |
| MED CAN     |  5091 |
| MED CASE    |  5064 |
| MED DRUM    |  5077 |
| MED JAR     |  5083 |
| MED PACK    |  4977 |
| MED PKG     |  4966 |
| SM BAG      |  4990 |
| SM BOX      |  5055 |
| SM CAN      |  4934 |
| SM CASE     |  4866 |
| SM DRUM     |  5153 |
| SM JAR      |  4973 |
| SM PACK     |  4993 |
| SM PKG      |  4992 |
| WRAP BAG    |  5008 |
| WRAP BOX    |  4935 |
| WRAP CAN    |  4987 |
| WRAP CASE   |  5045 |
| WRAP DRUM   |  4956 |
| WRAP JAR    |  5049 |
| WRAP PACK   |  4911 |
| WRAP PKG    |  4934 |)";
    p_container.dataMap = makeDataMap(input);

    p_retailprice.identifier = false;
    p_retailprice.count = partRow;
    p_retailprice.dataType = "float";
    p_retailprice.minValue = 901;
    p_retailprice.maxValue = 2100;
    p_retailprice.bucketNum = 240;
    input = R"(
| 901 - 905     |          14 |
| 906 - 910     |          40 |
| 911 - 915     |          65 |
| 916 - 920     |          90 |
| 921 - 925     |         115 |
| 926 - 930     |         140 |
| 931 - 935     |         165 |
| 936 - 940     |         190 |
| 941 - 945     |         215 |
| 946 - 950     |         240 |
| 951 - 955     |         265 |
| 956 - 960     |         290 |
| 961 - 965     |         315 |
| 966 - 970     |         340 |
| 971 - 975     |         365 |
| 976 - 980     |         390 |
| 981 - 985     |         415 |
| 986 - 990     |         440 |
| 991 - 995     |         465 |
| 996 - 1000    |         490 |
| 1001 - 1005   |         515 |
| 1006 - 1010   |         540 |
| 1011 - 1015   |         565 |
| 1016 - 1020   |         590 |
| 1021 - 1025   |         615 |
| 1026 - 1030   |         640 |
| 1031 - 1035   |         665 |
| 1036 - 1040   |         690 |
| 1041 - 1045   |         715 |
| 1046 - 1050   |         740 |
| 1051 - 1055   |         765 |
| 1056 - 1060   |         790 |
| 1061 - 1065   |         815 |
| 1066 - 1070   |         840 |
| 1071 - 1075   |         865 |
| 1076 - 1080   |         890 |
| 1081 - 1085   |         915 |
| 1086 - 1090   |         940 |
| 1091 - 1095   |         965 |
| 1096 - 1100   |         990 |
| 1101 - 1105   |        1001 |
| 1106 - 1110   |        1000 |
| 1111 - 1115   |        1000 |
| 1116 - 1120   |        1000 |
| 1121 - 1125   |        1000 |
| 1126 - 1130   |        1000 |
| 1131 - 1135   |        1000 |
| 1136 - 1140   |        1000 |
| 1141 - 1145   |        1000 |
| 1146 - 1150   |        1000 |
| 1151 - 1155   |        1000 |
| 1156 - 1160   |        1000 |
| 1161 - 1165   |        1000 |
| 1166 - 1170   |        1000 |
| 1171 - 1175   |        1000 |
| 1176 - 1180   |        1000 |
| 1181 - 1185   |        1000 |
| 1186 - 1190   |        1000 |
| 1191 - 1195   |        1000 |
| 1196 - 1200   |        1000 |
| 1201 - 1205   |        1000 |
| 1206 - 1210   |        1000 |
| 1211 - 1215   |        1000 |
| 1216 - 1220   |        1000 |
| 1221 - 1225   |        1000 |
| 1226 - 1230   |        1000 |
| 1231 - 1235   |        1000 |
| 1236 - 1240   |        1000 |
| 1241 - 1245   |        1000 |
| 1246 - 1250   |        1000 |
| 1251 - 1255   |        1000 |
| 1256 - 1260   |        1000 |
| 1261 - 1265   |        1000 |
| 1266 - 1270   |        1000 |
| 1271 - 1275   |        1000 |
| 1276 - 1280   |        1000 |
| 1281 - 1285   |        1000 |
| 1286 - 1290   |        1000 |
| 1291 - 1295   |        1000 |
| 1296 - 1300   |        1000 |
| 1301 - 1305   |        1000 |
| 1306 - 1310   |        1000 |
| 1311 - 1315   |        1000 |
| 1316 - 1320   |        1000 |
| 1321 - 1325   |        1000 |
| 1326 - 1330   |        1000 |
| 1331 - 1335   |        1000 |
| 1336 - 1340   |        1000 |
| 1341 - 1345   |        1000 |
| 1346 - 1350   |        1000 |
| 1351 - 1355   |        1000 |
| 1356 - 1360   |        1000 |
| 1361 - 1365   |        1000 |
| 1366 - 1370   |        1000 |
| 1371 - 1375   |        1000 |
| 1376 - 1380   |        1000 |
| 1381 - 1385   |        1000 |
| 1386 - 1390   |        1000 |
| 1391 - 1395   |        1000 |
| 1396 - 1400   |        1000 |
| 1401 - 1405   |        1000 |
| 1406 - 1410   |        1000 |
| 1411 - 1415   |        1000 |
| 1416 - 1420   |        1000 |
| 1421 - 1425   |        1000 |
| 1426 - 1430   |        1000 |
| 1431 - 1435   |        1000 |
| 1436 - 1440   |        1000 |
| 1441 - 1445   |        1000 |
| 1446 - 1450   |        1000 |
| 1451 - 1455   |        1000 |
| 1456 - 1460   |        1000 |
| 1461 - 1465   |        1000 |
| 1466 - 1470   |        1000 |
| 1471 - 1475   |        1000 |
| 1476 - 1480   |        1000 |
| 1481 - 1485   |        1000 |
| 1486 - 1490   |        1000 |
| 1491 - 1495   |        1000 |
| 1496 - 1500   |        1000 |
| 1501 - 1505   |        1000 |
| 1506 - 1510   |        1000 |
| 1511 - 1515   |        1000 |
| 1516 - 1520   |        1000 |
| 1521 - 1525   |        1000 |
| 1526 - 1530   |        1000 |
| 1531 - 1535   |        1000 |
| 1536 - 1540   |        1000 |
| 1541 - 1545   |        1000 |
| 1546 - 1550   |        1000 |
| 1551 - 1555   |        1000 |
| 1556 - 1560   |        1000 |
| 1561 - 1565   |        1000 |
| 1566 - 1570   |        1000 |
| 1571 - 1575   |        1000 |
| 1576 - 1580   |        1000 |
| 1581 - 1585   |        1000 |
| 1586 - 1590   |        1000 |
| 1591 - 1595   |        1000 |
| 1596 - 1600   |        1000 |
| 1601 - 1605   |        1000 |
| 1606 - 1610   |        1000 |
| 1611 - 1615   |        1000 |
| 1616 - 1620   |        1000 |
| 1621 - 1625   |        1000 |
| 1626 - 1630   |        1000 |
| 1631 - 1635   |        1000 |
| 1636 - 1640   |        1000 |
| 1641 - 1645   |        1000 |
| 1646 - 1650   |        1000 |
| 1651 - 1655   |        1000 |
| 1656 - 1660   |        1000 |
| 1661 - 1665   |        1000 |
| 1666 - 1670   |        1000 |
| 1671 - 1675   |        1000 |
| 1676 - 1680   |        1000 |
| 1681 - 1685   |        1000 |
| 1686 - 1690   |        1000 |
| 1691 - 1695   |        1000 |
| 1696 - 1700   |        1000 |
| 1701 - 1705   |        1000 |
| 1706 - 1710   |        1000 |
| 1711 - 1715   |        1000 |
| 1716 - 1720   |        1000 |
| 1721 - 1725   |        1000 |
| 1726 - 1730   |        1000 |
| 1731 - 1735   |        1000 |
| 1736 - 1740   |        1000 |
| 1741 - 1745   |        1000 |
| 1746 - 1750   |        1000 |
| 1751 - 1755   |        1000 |
| 1756 - 1760   |        1000 |
| 1761 - 1765   |        1000 |
| 1766 - 1770   |        1000 |
| 1771 - 1775   |        1000 |
| 1776 - 1780   |        1000 |
| 1781 - 1785   |        1000 |
| 1786 - 1790   |        1000 |
| 1791 - 1795   |        1000 |
| 1796 - 1800   |        1000 |
| 1801 - 1805   |        1000 |
| 1806 - 1810   |        1000 |
| 1811 - 1815   |        1000 |
| 1816 - 1820   |        1000 |
| 1821 - 1825   |        1000 |
| 1826 - 1830   |        1000 |
| 1831 - 1835   |        1000 |
| 1836 - 1840   |        1000 |
| 1841 - 1845   |        1000 |
| 1846 - 1850   |        1000 |
| 1851 - 1855   |        1000 |
| 1856 - 1860   |        1000 |
| 1861 - 1865   |        1000 |
| 1866 - 1870   |        1000 |
| 1871 - 1875   |        1000 |
| 1876 - 1880   |        1000 |
| 1881 - 1885   |        1000 |
| 1886 - 1890   |        1000 |
| 1891 - 1895   |        1000 |
| 1896 - 1900   |        1000 |
| 1901 - 1905   |         985 |
| 1906 - 1910   |         960 |
| 1911 - 1915   |         935 |
| 1916 - 1920   |         910 |
| 1921 - 1925   |         885 |
| 1926 - 1930   |         860 |
| 1931 - 1935   |         835 |
| 1936 - 1940   |         810 |
| 1941 - 1945   |         785 |
| 1946 - 1950   |         760 |
| 1951 - 1955   |         735 |
| 1956 - 1960   |         710 |
| 1961 - 1965   |         685 |
| 1966 - 1970   |         660 |
| 1971 - 1975   |         635 |
| 1976 - 1980   |         610 |
| 1981 - 1985   |         585 |
| 1986 - 1990   |         560 |
| 1991 - 1995   |         535 |
| 1996 - 2000   |         510 |
| 2001 - 2005   |         485 |
| 2006 - 2010   |         460 |
| 2011 - 2015   |         435 |
| 2016 - 2020   |         410 |
| 2021 - 2025   |         385 |
| 2026 - 2030   |         360 |
| 2031 - 2035   |         335 |
| 2036 - 2040   |         310 |
| 2041 - 2045   |         285 |
| 2046 - 2050   |         260 |
| 2051 - 2055   |         235 |
| 2056 - 2060   |         210 |
| 2061 - 2065   |         185 |
| 2066 - 2070   |         160 |
| 2071 - 2075   |         135 |
| 2076 - 2080   |         110 |
| 2081 - 2085   |          85 |
| 2086 - 2090   |          60 |
| 2091 - 2095   |          35 |
| 2096 - 2100   |          10 |
)";
    p_retailprice.dataMap = makeDataMapFloat(input);

    p_comment.identifier = true;
    p_comment.dataType = "string";
    p_comment.count = partRow;
    
    s_suppkey.identifier = true;
    s_suppkey.dataType = "int";
    s_suppkey.minValue = 1;
    s_suppkey.maxValue = 10000;
    s_suppkey.count = supplierRow;

    s_name.identifier = true;
    s_name.dataType = "string";
    s_name.count = supplierRow;

    s_address.identifier = true;
    s_address.dataType = "string";
    s_address.count = supplierRow;

    s_nationkey.identifier = false;
    s_nationkey.dataType = "int";
    s_nationkey.minValue = 0;
    s_nationkey.maxValue = 24;
    s_nationkey.count = supplierRow;
    s_nationkey.bucketNum = 25;
    input = R"(
|           0 |   420 |
|           1 |   413 |
|           2 |   397 |
|           3 |   412 |
|           4 |   415 |
|           5 |   380 |
|           6 |   402 |
|           7 |   396 |
|           8 |   415 |
|           9 |   405 |
|          10 |   393 |
|          11 |   438 |
|          12 |   377 |
|          13 |   362 |
|          14 |   376 |
|          15 |   373 |
|          16 |   406 |
|          17 |   421 |
|          18 |   407 |
|          19 |   398 |
|          20 |   411 |
|          21 |   399 |
|          22 |   401 |
|          23 |   390 |
|          24 |   393 |
    )";
    s_nationkey.dataMap = makeDataMap(input);

    s_phone.identifier = true;
    s_phone.dataType = "string";
    s_phone.count = supplierRow;

    s_acctbal.identifier = false;
    s_acctbal.bucketNum = 251;
    s_acctbal.count = supplierRow;
    s_acctbal.dataType = "float";
    s_acctbal.minValue = -1000;
    s_acctbal.maxValue = 10000;
    input = R"(
| -1011 - -968  |          26 |
| -967 - -924   |          37 |
| -923 - -880   |          42 |
| -879 - -836   |          44 |
| -835 - -792   |          47 |
| -791 - -748   |          48 |
| -747 - -704   |          38 |
| -703 - -660   |          32 |
| -659 - -616   |          32 |
| -615 - -572   |          40 |
| -571 - -528   |          50 |
| -527 - -484   |          33 |
| -483 - -440   |          38 |
| -439 - -396   |          39 |
| -395 - -352   |          34 |
| -351 - -308   |          40 |
| -307 - -264   |          44 |
| -263 - -220   |          38 |
| -219 - -176   |          40 |
| -175 - -132   |          31 |
| -131 - -88    |          50 |
| -87 - -44     |          30 |
| -43 - 0       |          33 |
| 1 - 44        |          54 |
| 45 - 88       |          42 |
| 89 - 132      |          31 |
| 133 - 176     |          47 |
| 177 - 220     |          41 |
| 221 - 264     |          40 |
| 265 - 308     |          43 |
| 309 - 352     |          38 |
| 353 - 396     |          42 |
| 397 - 440     |          42 |
| 441 - 484     |          39 |
| 485 - 528     |          46 |
| 529 - 572     |          43 |
| 573 - 616     |          35 |
| 617 - 660     |          38 |
| 661 - 704     |          49 |
| 705 - 748     |          30 |
| 749 - 792     |          35 |
| 793 - 836     |          36 |
| 837 - 880     |          36 |
| 881 - 924     |          47 |
| 925 - 968     |          35 |
| 969 - 1012    |          35 |
| 1013 - 1056   |          40 |
| 1057 - 1100   |          43 |
| 1101 - 1144   |          39 |
| 1145 - 1188   |          35 |
| 1189 - 1232   |          47 |
| 1233 - 1276   |          44 |
| 1277 - 1320   |          44 |
| 1321 - 1364   |          47 |
| 1365 - 1408   |          40 |
| 1409 - 1452   |          40 |
| 1453 - 1496   |          32 |
| 1497 - 1540   |          39 |
| 1541 - 1584   |          49 |
| 1585 - 1628   |          40 |
| 1629 - 1672   |          33 |
| 1673 - 1716   |          33 |
| 1717 - 1760   |          34 |
| 1761 - 1804   |          39 |
| 1805 - 1848   |          38 |
| 1849 - 1892   |          33 |
| 1893 - 1936   |          52 |
| 1937 - 1980   |          26 |
| 1981 - 2024   |          38 |
| 2025 - 2068   |          45 |
| 2069 - 2112   |          35 |
| 2113 - 2156   |          39 |
| 2157 - 2200   |          43 |
| 2201 - 2244   |          38 |
| 2245 - 2288   |          47 |
| 2289 - 2332   |          40 |
| 2333 - 2376   |          38 |
| 2377 - 2420   |          45 |
| 2421 - 2464   |          35 |
| 2465 - 2508   |          41 |
| 2509 - 2552   |          35 |
| 2553 - 2596   |          35 |
| 2597 - 2640   |          43 |
| 2641 - 2684   |          33 |
| 2685 - 2728   |          37 |
| 2729 - 2772   |          45 |
| 2773 - 2816   |          43 |
| 2817 - 2860   |          42 |
| 2861 - 2904   |          42 |
| 2905 - 2948   |          36 |
| 2949 - 2992   |          43 |
| 2993 - 3036   |          42 |
| 3037 - 3080   |          43 |
| 3081 - 3124   |          50 |
| 3125 - 3168   |          40 |
| 3169 - 3212   |          51 |
| 3213 - 3256   |          34 |
| 3257 - 3300   |          43 |
| 3301 - 3344   |          39 |
| 3345 - 3388   |          31 |
| 3389 - 3432   |          34 |
| 3433 - 3476   |          47 |
| 3477 - 3520   |          48 |
| 3521 - 3564   |          50 |
| 3565 - 3608   |          42 |
| 3609 - 3652   |          28 |
| 3653 - 3696   |          54 |
| 3697 - 3740   |          35 |
| 3741 - 3784   |          36 |
| 3785 - 3828   |          38 |
| 3829 - 3872   |          41 |
| 3873 - 3916   |          39 |
| 3917 - 3960   |          38 |
| 3961 - 4004   |          31 |
| 4005 - 4048   |          28 |
| 4049 - 4092   |          36 |
| 4093 - 4136   |          38 |
| 4137 - 4180   |          46 |
| 4181 - 4224   |          39 |
| 4225 - 4268   |          32 |
| 4269 - 4312   |          39 |
| 4313 - 4356   |          52 |
| 4357 - 4400   |          50 |
| 4401 - 4444   |          33 |
| 4445 - 4488   |          38 |
| 4489 - 4532   |          27 |
| 4533 - 4576   |          40 |
| 4577 - 4620   |          40 |
| 4621 - 4664   |          43 |
| 4665 - 4708   |          47 |
| 4709 - 4752   |          33 |
| 4753 - 4796   |          35 |
| 4797 - 4840   |          25 |
| 4841 - 4884   |          45 |
| 4885 - 4928   |          48 |
| 4929 - 4972   |          34 |
| 4973 - 5016   |          55 |
| 5017 - 5060   |          37 |
| 5061 - 5104   |          45 |
| 5105 - 5148   |          43 |
| 5149 - 5192   |          46 |
| 5193 - 5236   |          48 |
| 5237 - 5280   |          45 |
| 5281 - 5324   |          37 |
| 5325 - 5368   |          41 |
| 5369 - 5412   |          37 |
| 5413 - 5456   |          48 |
| 5457 - 5500   |          41 |
| 5501 - 5544   |          38 |
| 5545 - 5588   |          45 |
| 5589 - 5632   |          46 |
| 5633 - 5676   |          36 |
| 5677 - 5720   |          39 |
| 5721 - 5764   |          49 |
| 5765 - 5808   |          39 |
| 5809 - 5852   |          39 |
| 5853 - 5896   |          37 |
| 5897 - 5940   |          34 |
| 5941 - 5984   |          52 |
| 5985 - 6028   |          44 |
| 6029 - 6072   |          35 |
| 6073 - 6116   |          48 |
| 6117 - 6160   |          45 |
| 6161 - 6204   |          39 |
| 6205 - 6248   |          34 |
| 6249 - 6292   |          37 |
| 6293 - 6336   |          31 |
| 6337 - 6380   |          34 |
| 6381 - 6424   |          44 |
| 6425 - 6468   |          30 |
| 6469 - 6512   |          48 |
| 6513 - 6556   |          46 |
| 6557 - 6600   |          41 |
| 6601 - 6644   |          33 |
| 6645 - 6688   |          25 |
| 6689 - 6732   |          46 |
| 6733 - 6776   |          46 |
| 6777 - 6820   |          33 |
| 6821 - 6864   |          41 |
| 6865 - 6908   |          37 |
| 6909 - 6952   |          31 |
| 6953 - 6996   |          46 |
| 6997 - 7040   |          38 |
| 7041 - 7084   |          38 |
| 7085 - 7128   |          48 |
| 7129 - 7172   |          43 |
| 7173 - 7216   |          41 |
| 7217 - 7260   |          38 |
| 7261 - 7304   |          41 |
| 7305 - 7348   |          42 |
| 7349 - 7392   |          40 |
| 7393 - 7436   |          40 |
| 7437 - 7480   |          48 |
| 7481 - 7524   |          47 |
| 7525 - 7568   |          43 |
| 7569 - 7612   |          41 |
| 7613 - 7656   |          44 |
| 7657 - 7700   |          35 |
| 7701 - 7744   |          41 |
| 7745 - 7788   |          37 |
| 7789 - 7832   |          43 |
| 7833 - 7876   |          56 |
| 7877 - 7920   |          37 |
| 7921 - 7964   |          42 |
| 7965 - 8008   |          39 |
| 8009 - 8052   |          35 |
| 8053 - 8096   |          38 |
| 8097 - 8140   |          38 |
| 8141 - 8184   |          47 |
| 8185 - 8228   |          36 |
| 8229 - 8272   |          34 |
| 8273 - 8316   |          33 |
| 8317 - 8360   |          36 |
| 8361 - 8404   |          37 |
| 8405 - 8448   |          40 |
| 8449 - 8492   |          37 |
| 8493 - 8536   |          37 |
| 8537 - 8580   |          49 |
| 8581 - 8624   |          49 |
| 8625 - 8668   |          31 |
| 8669 - 8712   |          34 |
| 8713 - 8756   |          51 |
| 8757 - 8800   |          42 |
| 8801 - 8844   |          38 |
| 8845 - 8888   |          47 |
| 8889 - 8932   |          32 |
| 8933 - 8976   |          37 |
| 8977 - 9020   |          43 |
| 9021 - 9064   |          48 |
| 9065 - 9108   |          54 |
| 9109 - 9152   |          35 |
| 9153 - 9196   |          50 |
| 9197 - 9240   |          39 |
| 9241 - 9284   |          34 |
| 9285 - 9328   |          42 |
| 9329 - 9372   |          44 |
| 9373 - 9416   |          23 |
| 9417 - 9460   |          33 |
| 9461 - 9504   |          48 |
| 9505 - 9548   |          43 |
| 9549 - 9592   |          54 |
| 9593 - 9636   |          31 |
| 9637 - 9680   |          44 |
| 9681 - 9724   |          37 |
| 9725 - 9768   |          46 |
| 9769 - 9812   |          41 |
| 9813 - 9856   |          41 |
| 9857 - 9900   |          37 |
| 9901 - 9944   |          28 |
| 9945 - 9988   |          27 |
| 9989 - 10032  |          10 |
    )";
    s_acctbal.dataMap = makeDataMap(input);

    s_comment.dataType = "string";
    s_comment.identifier = true;
    s_comment.count = supplierRow;

    ps_partkey.identifier = false;
    ps_partkey.dataType = "int";
    ps_partkey.count = partsuppRow;
    ps_partkey.bucketNum = 250;
    ps_partkey.minValue = 1;
    ps_partkey.maxValue = partRow;
    input = R"(
| 1 - 800         |        3200 |
| 801 - 1600      |        3200 |
| 1601 - 2400     |        3200 |
| 2401 - 3200     |        3200 |
| 3201 - 4000     |        3200 |
| 4001 - 4800     |        3200 |
| 4801 - 5600     |        3200 |
| 5601 - 6400     |        3200 |
| 6401 - 7200     |        3200 |
| 7201 - 8000     |        3200 |
| 8001 - 8800     |        3200 |
| 8801 - 9600     |        3200 |
| 9601 - 10400    |        3200 |
| 10401 - 11200   |        3200 |
| 11201 - 12000   |        3200 |
| 12001 - 12800   |        3200 |
| 12801 - 13600   |        3200 |
| 13601 - 14400   |        3200 |
| 14401 - 15200   |        3200 |
| 15201 - 16000   |        3200 |
| 16001 - 16800   |        3200 |
| 16801 - 17600   |        3200 |
| 17601 - 18400   |        3200 |
| 18401 - 19200   |        3200 |
| 19201 - 20000   |        3200 |
| 20001 - 20800   |        3200 |
| 20801 - 21600   |        3200 |
| 21601 - 22400   |        3200 |
| 22401 - 23200   |        3200 |
| 23201 - 24000   |        3200 |
| 24001 - 24800   |        3200 |
| 24801 - 25600   |        3200 |
| 25601 - 26400   |        3200 |
| 26401 - 27200   |        3200 |
| 27201 - 28000   |        3200 |
| 28001 - 28800   |        3200 |
| 28801 - 29600   |        3200 |
| 29601 - 30400   |        3200 |
| 30401 - 31200   |        3200 |
| 31201 - 32000   |        3200 |
| 32001 - 32800   |        3200 |
| 32801 - 33600   |        3200 |
| 33601 - 34400   |        3200 |
| 34401 - 35200   |        3200 |
| 35201 - 36000   |        3200 |
| 36001 - 36800   |        3200 |
| 36801 - 37600   |        3200 |
| 37601 - 38400   |        3200 |
| 38401 - 39200   |        3200 |
| 39201 - 40000   |        3200 |
| 40001 - 40800   |        3200 |
| 40801 - 41600   |        3200 |
| 41601 - 42400   |        3200 |
| 42401 - 43200   |        3200 |
| 43201 - 44000   |        3200 |
| 44001 - 44800   |        3200 |
| 44801 - 45600   |        3200 |
| 45601 - 46400   |        3200 |
| 46401 - 47200   |        3200 |
| 47201 - 48000   |        3200 |
| 48001 - 48800   |        3200 |
| 48801 - 49600   |        3200 |
| 49601 - 50400   |        3200 |
| 50401 - 51200   |        3200 |
| 51201 - 52000   |        3200 |
| 52001 - 52800   |        3200 |
| 52801 - 53600   |        3200 |
| 53601 - 54400   |        3200 |
| 54401 - 55200   |        3200 |
| 55201 - 56000   |        3200 |
| 56001 - 56800   |        3200 |
| 56801 - 57600   |        3200 |
| 57601 - 58400   |        3200 |
| 58401 - 59200   |        3200 |
| 59201 - 60000   |        3200 |
| 60001 - 60800   |        3200 |
| 60801 - 61600   |        3200 |
| 61601 - 62400   |        3200 |
| 62401 - 63200   |        3200 |
| 63201 - 64000   |        3200 |
| 64001 - 64800   |        3200 |
| 64801 - 65600   |        3200 |
| 65601 - 66400   |        3200 |
| 66401 - 67200   |        3200 |
| 67201 - 68000   |        3200 |
| 68001 - 68800   |        3200 |
| 68801 - 69600   |        3200 |
| 69601 - 70400   |        3200 |
| 70401 - 71200   |        3200 |
| 71201 - 72000   |        3200 |
| 72001 - 72800   |        3200 |
| 72801 - 73600   |        3200 |
| 73601 - 74400   |        3200 |
| 74401 - 75200   |        3200 |
| 75201 - 76000   |        3200 |
| 76001 - 76800   |        3200 |
| 76801 - 77600   |        3200 |
| 77601 - 78400   |        3200 |
| 78401 - 79200   |        3200 |
| 79201 - 80000   |        3200 |
| 80001 - 80800   |        3200 |
| 80801 - 81600   |        3200 |
| 81601 - 82400   |        3200 |
| 82401 - 83200   |        3200 |
| 83201 - 84000   |        3200 |
| 84001 - 84800   |        3200 |
| 84801 - 85600   |        3200 |
| 85601 - 86400   |        3200 |
| 86401 - 87200   |        3200 |
| 87201 - 88000   |        3200 |
| 88001 - 88800   |        3200 |
| 88801 - 89600   |        3200 |
| 89601 - 90400   |        3200 |
| 90401 - 91200   |        3200 |
| 91201 - 92000   |        3200 |
| 92001 - 92800   |        3200 |
| 92801 - 93600   |        3200 |
| 93601 - 94400   |        3200 |
| 94401 - 95200   |        3200 |
| 95201 - 96000   |        3200 |
| 96001 - 96800   |        3200 |
| 96801 - 97600   |        3200 |
| 97601 - 98400   |        3200 |
| 98401 - 99200   |        3200 |
| 99201 - 100000  |        3200 |
| 100001 - 100800 |        3200 |
| 100801 - 101600 |        3200 |
| 101601 - 102400 |        3200 |
| 102401 - 103200 |        3200 |
| 103201 - 104000 |        3200 |
| 104001 - 104800 |        3200 |
| 104801 - 105600 |        3200 |
| 105601 - 106400 |        3200 |
| 106401 - 107200 |        3200 |
| 107201 - 108000 |        3200 |
| 108001 - 108800 |        3200 |
| 108801 - 109600 |        3200 |
| 109601 - 110400 |        3200 |
| 110401 - 111200 |        3200 |
| 111201 - 112000 |        3200 |
| 112001 - 112800 |        3200 |
| 112801 - 113600 |        3200 |
| 113601 - 114400 |        3200 |
| 114401 - 115200 |        3200 |
| 115201 - 116000 |        3200 |
| 116001 - 116800 |        3200 |
| 116801 - 117600 |        3200 |
| 117601 - 118400 |        3200 |
| 118401 - 119200 |        3200 |
| 119201 - 120000 |        3200 |
| 120001 - 120800 |        3200 |
| 120801 - 121600 |        3200 |
| 121601 - 122400 |        3200 |
| 122401 - 123200 |        3200 |
| 123201 - 124000 |        3200 |
| 124001 - 124800 |        3200 |
| 124801 - 125600 |        3200 |
| 125601 - 126400 |        3200 |
| 126401 - 127200 |        3200 |
| 127201 - 128000 |        3200 |
| 128001 - 128800 |        3200 |
| 128801 - 129600 |        3200 |
| 129601 - 130400 |        3200 |
| 130401 - 131200 |        3200 |
| 131201 - 132000 |        3200 |
| 132001 - 132800 |        3200 |
| 132801 - 133600 |        3200 |
| 133601 - 134400 |        3200 |
| 134401 - 135200 |        3200 |
| 135201 - 136000 |        3200 |
| 136001 - 136800 |        3200 |
| 136801 - 137600 |        3200 |
| 137601 - 138400 |        3200 |
| 138401 - 139200 |        3200 |
| 139201 - 140000 |        3200 |
| 140001 - 140800 |        3200 |
| 140801 - 141600 |        3200 |
| 141601 - 142400 |        3200 |
| 142401 - 143200 |        3200 |
| 143201 - 144000 |        3200 |
| 144001 - 144800 |        3200 |
| 144801 - 145600 |        3200 |
| 145601 - 146400 |        3200 |
| 146401 - 147200 |        3200 |
| 147201 - 148000 |        3200 |
| 148001 - 148800 |        3200 |
| 148801 - 149600 |        3200 |
| 149601 - 150400 |        3200 |
| 150401 - 151200 |        3200 |
| 151201 - 152000 |        3200 |
| 152001 - 152800 |        3200 |
| 152801 - 153600 |        3200 |
| 153601 - 154400 |        3200 |
| 154401 - 155200 |        3200 |
| 155201 - 156000 |        3200 |
| 156001 - 156800 |        3200 |
| 156801 - 157600 |        3200 |
| 157601 - 158400 |        3200 |
| 158401 - 159200 |        3200 |
| 159201 - 160000 |        3200 |
| 160001 - 160800 |        3200 |
| 160801 - 161600 |        3200 |
| 161601 - 162400 |        3200 |
| 162401 - 163200 |        3200 |
| 163201 - 164000 |        3200 |
| 164001 - 164800 |        3200 |
| 164801 - 165600 |        3200 |
| 165601 - 166400 |        3200 |
| 166401 - 167200 |        3200 |
| 167201 - 168000 |        3200 |
| 168001 - 168800 |        3200 |
| 168801 - 169600 |        3200 |
| 169601 - 170400 |        3200 |
| 170401 - 171200 |        3200 |
| 171201 - 172000 |        3200 |
| 172001 - 172800 |        3200 |
| 172801 - 173600 |        3200 |
| 173601 - 174400 |        3200 |
| 174401 - 175200 |        3200 |
| 175201 - 176000 |        3200 |
| 176001 - 176800 |        3200 |
| 176801 - 177600 |        3200 |
| 177601 - 178400 |        3200 |
| 178401 - 179200 |        3200 |
| 179201 - 180000 |        3200 |
| 180001 - 180800 |        3200 |
| 180801 - 181600 |        3200 |
| 181601 - 182400 |        3200 |
| 182401 - 183200 |        3200 |
| 183201 - 184000 |        3200 |
| 184001 - 184800 |        3200 |
| 184801 - 185600 |        3200 |
| 185601 - 186400 |        3200 |
| 186401 - 187200 |        3200 |
| 187201 - 188000 |        3200 |
| 188001 - 188800 |        3200 |
| 188801 - 189600 |        3200 |
| 189601 - 190400 |        3200 |
| 190401 - 191200 |        3200 |
| 191201 - 192000 |        3200 |
| 192001 - 192800 |        3200 |
| 192801 - 193600 |        3200 |
| 193601 - 194400 |        3200 |
| 194401 - 195200 |        3200 |
| 195201 - 196000 |        3200 |
| 196001 - 196800 |        3200 |
| 196801 - 197600 |        3200 |
| 197601 - 198400 |        3200 |
| 198401 - 199200 |        3200 |
| 199201 - 200000 |        3200 |
)";
    ps_suppkey.dataMap = makeDataMapFloat(input);

    ps_availqty.count = partsuppRow;
    ps_availqty.identifier = false;
    ps_availqty.bucketNum = 250;
    ps_availqty.minValue = 1;
    ps_availqty.maxValue = 10000;
    ps_availqty.dataType = "int";
    input = R"(
| 3321 - 3360   |        3258 |
| 8041 - 8080   |        3263 |
| 3921 - 3960   |        3293 |
| 4041 - 4080   |        3240 |
| 8881 - 8920   |        3196 |
| 4961 - 5000   |        3256 |
| 8521 - 8560   |        3179 |
| 3001 - 3040   |        3168 |
| 4641 - 4680   |        3227 |
| 4081 - 4120   |        3196 |
| 3881 - 3920   |        3324 |
| 9921 - 9960   |        3226 |
| 1321 - 1360   |        3227 |
| 6361 - 6400   |        3166 |
| 2681 - 2720   |        3187 |
| 2441 - 2480   |        3215 |
| 3721 - 3760   |        3265 |
| 9641 - 9680   |        3252 |
| 6921 - 6960   |        3332 |
| 8841 - 8880   |        3101 |
| 1601 - 1640   |        3121 |
| 6441 - 6480   |        3149 |
| 7441 - 7480   |        3227 |
| 2761 - 2800   |        3248 |
| 3361 - 3400   |        3252 |
| 9441 - 9480   |        3285 |
| 6801 - 6840   |        3243 |
| 361 - 400     |        3155 |
| 9841 - 9880   |        3136 |
| 8121 - 8160   |        3147 |
| 7041 - 7080   |        3260 |
| 7521 - 7560   |        3164 |
| 9561 - 9600   |        3181 |
| 3041 - 3080   |        3208 |
| 2921 - 2960   |        3186 |
| 5681 - 5720   |        3234 |
| 841 - 880     |        3162 |
| 4521 - 4560   |        3130 |
| 4721 - 4760   |        3232 |
| 3681 - 3720   |        3198 |
| 3201 - 3240   |        3235 |
| 3601 - 3640   |        3171 |
| 7601 - 7640   |        3148 |
| 801 - 840     |        3159 |
| 5441 - 5480   |        3208 |
| 601 - 640     |        3210 |
| 7241 - 7280   |        3239 |
| 9721 - 9760   |        3156 |
| 5241 - 5280   |        3314 |
| 5321 - 5360   |        3231 |
| 3641 - 3680   |        3138 |
| 4921 - 4960   |        3129 |
| 3281 - 3320   |        3213 |
| 5281 - 5320   |        3260 |
| 9401 - 9440   |        3210 |
| 1481 - 1520   |        3203 |
| 7721 - 7760   |        3224 |
| 3121 - 3160   |        3197 |
| 1121 - 1160   |        3203 |
| 1401 - 1440   |        3218 |
| 8761 - 8800   |        3241 |
| 2721 - 2760   |        3080 |
| 5881 - 5920   |        3282 |
| 4241 - 4280   |        3150 |
| 6561 - 6600   |        3317 |
| 1681 - 1720   |        3209 |
| 7121 - 7160   |        3217 |
| 4401 - 4440   |        3271 |
| 9761 - 9800   |        3308 |
| 7801 - 7840   |        3226 |
| 5721 - 5760   |        3164 |
| 9881 - 9920   |        3221 |
| 7001 - 7040   |        3240 |
| 5161 - 5200   |        3217 |
| 2201 - 2240   |        3204 |
| 7161 - 7200   |        3185 |
| 9001 - 9040   |        3283 |
| 9041 - 9080   |        3234 |
| 7321 - 7360   |        3222 |
| 5001 - 5040   |        3179 |
| 3481 - 3520   |        3213 |
| 9681 - 9720   |        3170 |
| 2081 - 2120   |        3240 |
| 3401 - 3440   |        3165 |
| 4281 - 4320   |        3204 |
| 6641 - 6680   |        3213 |
| 281 - 320     |        3186 |
| 9961 - 9999   |        3172 |
| 8081 - 8120   |        3243 |
| 9161 - 9200   |        3206 |
| 6241 - 6280   |        3253 |
| 4761 - 4800   |        3288 |
| 521 - 560     |        3114 |
| 7921 - 7960   |        3165 |
| 1921 - 1960   |        3230 |
| 121 - 160     |        3261 |
| 441 - 480     |        3253 |
| 7961 - 8000   |        3151 |
| 4001 - 4040   |        3152 |
| 1281 - 1320   |        3182 |
| 6001 - 6040   |        3297 |
| 2481 - 2520   |        3142 |
| 561 - 600     |        3207 |
| 2001 - 2040   |        3226 |
| 161 - 200     |        3189 |
| 2601 - 2640   |        3136 |
| 8201 - 8240   |        3135 |
| 5521 - 5560   |        3163 |
| 7081 - 7120   |        3229 |
| 1441 - 1480   |        3165 |
| 1201 - 1240   |        3215 |
| 4201 - 4240   |        3196 |
| 7681 - 7720   |        3170 |
| 6601 - 6640   |        3130 |
| 5921 - 5960   |        3171 |
| 1521 - 1560   |        3273 |
| 2881 - 2920   |        3200 |
| 6761 - 6800   |        3108 |
| 9481 - 9520   |        3328 |
| 481 - 520     |        3232 |
| 3521 - 3560   |        3222 |
| 5201 - 5240   |        3167 |
| 5641 - 5680   |        3131 |
| 1841 - 1880   |        3234 |
| 4161 - 4200   |        3207 |
| 8481 - 8520   |        3241 |
| 7201 - 7240   |        3218 |
| 1361 - 1400   |        3208 |
| 6961 - 7000   |        3305 |
| 4441 - 4480   |        3249 |
| 5841 - 5880   |        3155 |
| 5041 - 5080   |        3188 |
| 5561 - 5600   |        3171 |
| 1801 - 1840   |        3054 |
| 41 - 80       |        3217 |
| 6121 - 6160   |        3147 |
| 7281 - 7320   |        3182 |
| 6521 - 6560   |        3222 |
| 8161 - 8200   |        3224 |
| 2361 - 2400   |        3194 |
| 7841 - 7880   |        3146 |
| 8441 - 8480   |        3230 |
| 8241 - 8280   |        3255 |
| 241 - 280     |        3087 |
| 9081 - 9120   |        3289 |
| 5761 - 5800   |        3235 |
| 2961 - 3000   |        3172 |
| 3761 - 3800   |        3319 |
| 4561 - 4600   |        3237 |
| 4321 - 4360   |        3216 |
| 4121 - 4160   |        3216 |
| 8361 - 8400   |        3314 |
| 81 - 120      |        3132 |
| 1761 - 1800   |        3230 |
| 9121 - 9160   |        3118 |
| 9521 - 9560   |        3290 |
| 1961 - 2000   |        3202 |
| 6321 - 6360   |        3206 |
| 2041 - 2080   |        3139 |
| 2161 - 2200   |        3127 |
| 1041 - 1080   |        3258 |
| 2561 - 2600   |        3147 |
| 7881 - 7920   |        3125 |
| 5801 - 5840   |        3271 |
| 3441 - 3480   |        3169 |
| 8281 - 8320   |        3272 |
| 5361 - 5400   |        3154 |
| 6161 - 6200   |        3128 |
| 9281 - 9320   |        3162 |
| 8321 - 8360   |        3108 |
| 9321 - 9360   |        3289 |
| 2641 - 2680   |        3198 |
| 6201 - 6240   |        3111 |
| 6281 - 6320   |        3296 |
| 5401 - 5440   |        3199 |
| 6721 - 6760   |        3229 |
| 8601 - 8640   |        3149 |
| 2241 - 2280   |        3165 |
| 7761 - 7800   |        3192 |
| 5961 - 6000   |        3127 |
| 201 - 240     |        3196 |
| 881 - 920     |        3175 |
| 1241 - 1280   |        3205 |
| 1881 - 1920   |        3241 |
| 6081 - 6120   |        3256 |
| 8561 - 8600   |        3100 |
| 921 - 960     |        3109 |
| 8001 - 8040   |        3133 |
| 3241 - 3280   |        3181 |
| 3161 - 3200   |        3282 |
| 3841 - 3880   |        3209 |
| 7361 - 7400   |        3180 |
| 7561 - 7600   |        3313 |
| 401 - 440     |        3168 |
| 4601 - 4640   |        3237 |
| 8641 - 8680   |        3200 |
| 2281 - 2320   |        3091 |
| 4881 - 4920   |        3166 |
| 7641 - 7680   |        3183 |
| 4801 - 4840   |        3063 |
| 3801 - 3840   |        3135 |
| 4681 - 4720   |        3284 |
| 4481 - 4520   |        3190 |
| 961 - 1000    |        3235 |
| 5601 - 5640   |        3118 |
| 681 - 720     |        3256 |
| 3081 - 3120   |        3197 |
| 8681 - 8720   |        3224 |
| 1001 - 1040   |        3156 |
| 3961 - 4000   |        3169 |
| 6881 - 6920   |        3164 |
| 4841 - 4880   |        3282 |
| 5121 - 5160   |        3197 |
| 8921 - 8960   |        3116 |
| 2801 - 2840   |        3189 |
| 6041 - 6080   |        3178 |
| 8961 - 9000   |        3119 |
| 9601 - 9640   |        3119 |
| 2521 - 2560   |        3097 |
| 9241 - 9280   |        3229 |
| 1641 - 1680   |        3190 |
| 9201 - 9240   |        3173 |
| 1 - 40        |        3268 |
| 1561 - 1600   |        3138 |
| 3561 - 3600   |        3245 |
| 761 - 800     |        3190 |
| 2841 - 2880   |        3145 |
| 2401 - 2440   |        3200 |
| 6841 - 6880   |        3213 |
| 9361 - 9400   |        3176 |
| 8401 - 8440   |        3185 |
| 641 - 680     |        3182 |
| 4361 - 4400   |        3237 |
| 2121 - 2160   |        3237 |
| 6481 - 6520   |        3118 |
| 6681 - 6720   |        3226 |
| 321 - 360     |        3200 |
| 7481 - 7520   |        3213 |
| 5481 - 5520   |        3246 |
| 1081 - 1120   |        3200 |
| 721 - 760     |        3152 |
| 8801 - 8840   |        3139 |
| 7401 - 7440   |        3163 |
| 5081 - 5120   |        3138 |
| 9801 - 9840   |        3169 |
| 6401 - 6440   |        3222 |
| 2321 - 2360   |        3170 |
| 1161 - 1200   |        3318 |
| 1721 - 1760   |        3248 |
| 8721 - 8760   |        3134 |
    )";
    ps_availqty.dataMap = makeDataMap(input);

    ps_supplycost.identifier = false;
    ps_supplycost.count = partsuppRow;
    ps_supplycost.bucketNum = 200;
    ps_supplycost.minValue = 1;
    ps_supplycost.maxValue = 1000;
    ps_supplycost.dataType = "float";
    input = R"(
| 771.00 - 775.99  |        4062 |
| 991.00 - 995.99  |        4016 |
| 336.00 - 340.99  |        4091 |
| 356.00 - 360.99  |        4011 |
| 376.00 - 380.99  |        3940 |
| 911.00 - 915.99  |        4031 |
| 436.00 - 440.99  |        4050 |
| 306.00 - 310.99  |        3935 |
| 916.00 - 920.99  |        3880 |
| 496.00 - 500.99  |        4064 |
| 641.00 - 645.99  |        4059 |
| 191.00 - 195.99  |        3983 |
| 111.00 - 115.99  |        4046 |
| 591.00 - 595.99  |        3992 |
| 51.00 - 55.99    |        4071 |
| 441.00 - 445.99  |        3966 |
| 251.00 - 255.99  |        3988 |
| 46.00 - 50.99    |        3864 |
| 216.00 - 220.99  |        4050 |
| 536.00 - 540.99  |        4157 |
| 126.00 - 130.99  |        3943 |
| 421.00 - 425.99  |        4046 |
| 171.00 - 175.99  |        3909 |
| 761.00 - 765.99  |        4097 |
| 146.00 - 150.99  |        3952 |
| 66.00 - 70.99    |        3946 |
| 296.00 - 300.99  |        3969 |
| 246.00 - 250.99  |        4058 |
| 956.00 - 960.99  |        4099 |
| 81.00 - 85.99    |        4039 |
| 811.00 - 815.99  |        3924 |
| 381.00 - 385.99  |        3983 |
| 291.00 - 295.99  |        3969 |
| 996.00 - 1000.00 |        3131 |
| 671.00 - 675.99  |        4028 |
| 161.00 - 165.99  |        4039 |
| 371.00 - 375.99  |        4018 |
| 706.00 - 710.99  |        4037 |
| 891.00 - 895.99  |        3965 |
| 816.00 - 820.99  |        4089 |
| 471.00 - 475.99  |        4013 |
| 656.00 - 660.99  |        4023 |
| 331.00 - 335.99  |        4023 |
| 901.00 - 905.99  |        4032 |
| 166.00 - 170.99  |        3989 |
| 861.00 - 865.99  |        4116 |
| 36.00 - 40.99    |        3945 |
| 326.00 - 330.99  |        4043 |
| 646.00 - 650.99  |        3987 |
| 886.00 - 890.99  |        3942 |
| 831.00 - 835.99  |        4079 |
| 781.00 - 785.99  |        3888 |
| 261.00 - 265.99  |        3900 |
| 456.00 - 460.99  |        4077 |
| 551.00 - 555.99  |        4030 |
| 61.00 - 65.99    |        4036 |
| 661.00 - 665.99  |        3956 |
| 566.00 - 570.99  |        3968 |
| 386.00 - 390.99  |        4033 |
| 141.00 - 145.99  |        4065 |
| 401.00 - 405.99  |        3865 |
| 631.00 - 635.99  |        4061 |
| 346.00 - 350.99  |        4036 |
| 301.00 - 305.99  |        3854 |
| 546.00 - 550.99  |        3940 |
| 941.00 - 945.99  |        4008 |
| 136.00 - 140.99  |        3926 |
| 581.00 - 585.99  |        4012 |
| 786.00 - 790.99  |        4019 |
| 596.00 - 600.99  |        3904 |
| 101.00 - 105.99  |        3941 |
| 231.00 - 235.99  |        4018 |
| 511.00 - 515.99  |        3972 |
| 926.00 - 930.99  |        4108 |
| 691.00 - 695.99  |        3939 |
| 746.00 - 750.99  |        3997 |
| 681.00 - 685.99  |        3910 |
| 821.00 - 825.99  |        4001 |
| 156.00 - 160.99  |        3980 |
| 151.00 - 155.99  |        4089 |
| 201.00 - 205.99  |        4078 |
| 741.00 - 745.99  |        3963 |
| 686.00 - 690.99  |        3972 |
| 666.00 - 670.99  |        4075 |
| 796.00 - 800.99  |        3969 |
| 981.00 - 985.99  |        3996 |
| 731.00 - 735.99  |        4026 |
| 186.00 - 190.99  |        4037 |
| 986.00 - 990.99  |        3936 |
| 616.00 - 620.99  |        3997 |
| 116.00 - 120.99  |        4032 |
| 846.00 - 850.99  |        4102 |
| 406.00 - 410.99  |        3979 |
| 106.00 - 110.99  |        4000 |
| 856.00 - 860.99  |        4116 |
| 606.00 - 610.99  |        4029 |
| 451.00 - 455.99  |        3940 |
| 411.00 - 415.99  |        4099 |
| 626.00 - 630.99  |        3929 |
| 431.00 - 435.99  |        4058 |
| 286.00 - 290.99  |        4053 |
| 11.00 - 15.99    |        3919 |
| 461.00 - 465.99  |        3927 |
| 531.00 - 535.99  |        4052 |
| 736.00 - 740.99  |        4048 |
| 776.00 - 780.99  |        3963 |
| 561.00 - 565.99  |        4075 |
| 196.00 - 200.99  |        4034 |
| 486.00 - 490.99  |        4040 |
| 391.00 - 395.99  |        4083 |
| 716.00 - 720.99  |        3948 |
| 26.00 - 30.99    |        4054 |
| 801.00 - 805.99  |        4019 |
| 491.00 - 495.99  |        4014 |
| 876.00 - 880.99  |        3993 |
| 241.00 - 245.99  |        4037 |
| 71.00 - 75.99    |        4080 |
| 611.00 - 615.99  |        4091 |
| 31.00 - 35.99    |        3928 |
| 906.00 - 910.99  |        3976 |
| 711.00 - 715.99  |        3914 |
| 726.00 - 730.99  |        3988 |
| 206.00 - 210.99  |        3951 |
| 221.00 - 225.99  |        4005 |
| 21.00 - 25.99    |        3942 |
| 256.00 - 260.99  |        3997 |
| 236.00 - 240.99  |        4023 |
| 131.00 - 135.99  |        3948 |
| 851.00 - 855.99  |        3933 |
| 121.00 - 125.99  |        4022 |
| 211.00 - 215.99  |        4087 |
| 541.00 - 545.99  |        4040 |
| 446.00 - 450.99  |        4045 |
| 76.00 - 80.99    |        3922 |
| 41.00 - 45.99    |        3984 |
| 311.00 - 315.99  |        4069 |
| 501.00 - 505.99  |        3996 |
| 91.00 - 95.99    |        4037 |
| 506.00 - 510.99  |        4061 |
| 271.00 - 275.99  |        3991 |
| 226.00 - 230.99  |        4057 |
| 396.00 - 400.99  |        3983 |
| 601.00 - 605.99  |        3979 |
| 806.00 - 810.99  |        3996 |
| 621.00 - 625.99  |        3950 |
| 1.00 - 5.99      |        3960 |
| 341.00 - 345.99  |        4088 |
| 936.00 - 940.99  |        4025 |
| 181.00 - 185.99  |        4030 |
| 841.00 - 845.99  |        3952 |
| 946.00 - 950.99  |        4027 |
| 756.00 - 760.99  |        4113 |
| 881.00 - 885.99  |        4079 |
| 871.00 - 875.99  |        3977 |
| 576.00 - 580.99  |        4030 |
| 696.00 - 700.99  |        3955 |
| 896.00 - 900.99  |        3913 |
| 466.00 - 470.99  |        4025 |
| 966.00 - 970.99  |        4004 |
| 866.00 - 870.99  |        4033 |
| 416.00 - 420.99  |        4012 |
| 526.00 - 530.99  |        3942 |
| 701.00 - 705.99  |        3939 |
| 361.00 - 365.99  |        3936 |
| 476.00 - 480.99  |        3996 |
| 971.00 - 975.99  |        3938 |
| 571.00 - 575.99  |        3938 |
| 586.00 - 590.99  |        4182 |
| 281.00 - 285.99  |        3996 |
| 556.00 - 560.99  |        4005 |
| 921.00 - 925.99  |        3950 |
| 931.00 - 935.99  |        3936 |
| 321.00 - 325.99  |        3987 |
| 976.00 - 980.99  |        3991 |
| 676.00 - 680.99  |        3987 |
| 651.00 - 655.99  |        3925 |
| 636.00 - 640.99  |        4017 |
| 351.00 - 355.99  |        3980 |
| 56.00 - 60.99    |        4095 |
| 276.00 - 280.99  |        3986 |
| 6.00 - 10.99     |        4026 |
| 521.00 - 525.99  |        4055 |
| 426.00 - 430.99  |        4014 |
| 836.00 - 840.99  |        3987 |
| 176.00 - 180.99  |        4036 |
| 266.00 - 270.99  |        4019 |
| 826.00 - 830.99  |        3968 |
| 751.00 - 755.99  |        3996 |
| 366.00 - 370.99  |        4028 |
| 951.00 - 955.99  |        4015 |
| 961.00 - 965.99  |        3994 |
| 516.00 - 520.99  |        3988 |
| 16.00 - 20.99    |        3922 |
| 316.00 - 320.99  |        4060 |
| 721.00 - 725.99  |        4058 |
| 766.00 - 770.99  |        4040 |
| 96.00 - 100.99   |        3979 |
| 86.00 - 90.99    |        4033 |
| 481.00 - 485.99  |        4038 |
| 791.00 - 795.99  |        3986 |
    )";
    ps_supplycost.dataMap = makeDataMap(input);

    ps_comment.identifier = true;
    ps_comment.dataType = "string";
    ps_comment.count = partsuppRow;

    c_custkey.identifier = true;
    c_custkey.dataType = "int";
    c_custkey.count = customerRow;
    c_custkey.minValue = 1;
    c_custkey.maxValue = 150000;
    
    c_name.identifier = true;
    c_name.dataType = "string";
    c_name.count = customerRow;
    
    c_phone.identifier = true;
    c_phone.dataType = "string";
    c_phone.count = customerRow;

    c_acctbal.identifier = false;
    c_acctbal.dataType = "float";
    c_acctbal.count = customerRow;
    c_acctbal.bucketNum = 221;
    c_acctbal.minValue = -1000;
    c_acctbal.maxValue = 10000;
    input = R"(
| 701.03 - 750.87   |         660 |
| 101.07 - 150.94   |         629 |
| 7451.01 - 7500.96 |         672 |
| 2851.08 - 2900.92 |         679 |
| 751.10 - 800.90   |         684 |
| 7601.00 - 7650.98 |         663 |
| 9551.03 - 9600.96 |         666 |
| 6801.05 - 6850.97 |         691 |
| 8301.00 - 8350.80 |         669 |
| 2751.01 - 2800.90 |         737 |
| -298.90 - -249.01 |         684 |
| 3351.00 - 3400.92 |         673 |
| 3851.03 - 3900.98 |         653 |
| 5251.15 - 5300.85 |         666 |
| 4651.07 - 4700.92 |         653 |
| 1.01 - 50.84      |         661 |
| 5451.03 - 5500.95 |         646 |
| 8901.03 - 8950.99 |         677 |
| 1401.01 - 1450.98 |         749 |
| 551.04 - 600.99   |         708 |
| 3301.13 - 3350.72 |         711 |
| 9251.03 - 9300.87 |         676 |
| 7101.26 - 7150.97 |         706 |
| 5151.03 - 5200.96 |         660 |
| 5651.04 - 5700.99 |         675 |
| 1001.01 - 1050.98 |         602 |
| 9301.06 - 9350.97 |         672 |
| 5201.09 - 5250.99 |         693 |
| 3451.12 - 3500.85 |         712 |
| -98.98 - -49.19   |         686 |
| 8551.02 - 8600.98 |         694 |
| 1201.01 - 1250.99 |         712 |
| 4951.10 - 5000.48 |         657 |
| -948.94 - -899.05 |         709 |
| 6301.03 - 6350.97 |         703 |
| 6251.00 - 6300.96 |         649 |
| 1301.14 - 1350.95 |         699 |
| 251.15 - 300.97   |         698 |
| 8701.02 - 8750.89 |         684 |
| 9901.09 - 9950.96 |         643 |
| 7301.01 - 7350.96 |         678 |
| 9951.02 - 9999.99 |         717 |
| 5701.12 - 5750.93 |         641 |
| 3751.06 - 3800.89 |         647 |
| 4551.05 - 4600.81 |         670 |
| 4251.06 - 4300.95 |         642 |
| 851.22 - 900.96   |         679 |
| 5601.01 - 5650.98 |         686 |
| 4101.01 - 4150.95 |         716 |
| 6501.15 - 6550.97 |         711 |
| 4151.01 - 4200.99 |         675 |
| 6451.04 - 6500.87 |         637 |
| 2701.01 - 2750.92 |         689 |
| 1501.05 - 1550.99 |         714 |
| -648.93 - -599.19 |         657 |
| 8751.12 - 8800.97 |         680 |
| 201.09 - 250.78   |         653 |
| 8151.07 - 8200.98 |         692 |
| 6851.03 - 6900.94 |         666 |
| 1701.01 - 1750.96 |         653 |
| 4851.19 - 4900.99 |         660 |
| -398.98 - -349.08 |         679 |
| 6651.03 - 6700.91 |         683 |
| 5101.00 - 5150.91 |         696 |
| 7351.12 - 7400.98 |         653 |
| 2001.04 - 2050.87 |         676 |
| 9451.04 - 9500.76 |         716 |
| 8001.20 - 8050.92 |         670 |
| 4601.02 - 4650.95 |         673 |
| 1151.11 - 1200.98 |         701 |
| 2151.15 - 2200.92 |         698 |
| 5301.13 - 5350.97 |         651 |
| -598.97 - -549.05 |         714 |
| 4051.07 - 4100.95 |         708 |
| 9851.10 - 9900.94 |         656 |
| 8451.24 - 8500.96 |         707 |
| 9051.01 - 9100.99 |         668 |
| 3251.00 - 3300.93 |         704 |
| 2501.09 - 2550.97 |         707 |
| 2251.01 - 2300.91 |         693 |
| -749.00 - -699.15 |         698 |
| 2951.16 - 3000.98 |         729 |
| 2901.03 - 2950.73 |         655 |
| 7501.02 - 7550.93 |         686 |
| 8401.07 - 8450.94 |         683 |
| 3901.03 - 3950.91 |         706 |
| 3551.06 - 3600.95 |         674 |
| 351.01 - 400.86   |         623 |
| 6401.13 - 6450.96 |         673 |
| 7851.03 - 7900.97 |         689 |
| 5851.08 - 5900.92 |         672 |
| 1801.07 - 1850.98 |         709 |
| -248.95 - -199.01 |         718 |
| -998.97 - -949.18 |         681 |
| 9101.01 - 9150.92 |         679 |
| 5051.03 - 5100.94 |         664 |
| 151.12 - 200.92   |         678 |
| 2301.04 - 2350.93 |         668 |
| -848.86 - -799.03 |         690 |
| 7801.04 - 7850.94 |         699 |
| 401.05 - 450.99   |         644 |
| 6701.03 - 6750.99 |         665 |
| 2201.03 - 2250.98 |         681 |
| 9701.00 - 9750.98 |         663 |
| 8051.14 - 8100.95 |         669 |
| 2101.01 - 2150.93 |         746 |
| 8951.01 - 9000.91 |         703 |
| 3801.06 - 3850.86 |         667 |
| 5901.14 - 5950.86 |         688 |
| 9751.14 - 9800.99 |         668 |
| 6151.02 - 6200.84 |         651 |
| 2051.10 - 2100.96 |         692 |
| 4351.01 - 4400.99 |         686 |
| 3701.04 - 3750.99 |         682 |
| 1451.00 - 1500.99 |         678 |
| 4451.11 - 4500.78 |         647 |
| 7651.01 - 7700.77 |         696 |
| 2351.05 - 2400.85 |         715 |
| 1101.00 - 1150.68 |         683 |
| 801.01 - 850.87   |         679 |
| 1901.08 - 1950.99 |         713 |
| 1951.01 - 2000.92 |         660 |
| -49.00 - 0.97     |         672 |
| 4801.04 - 4850.99 |         682 |
| 4401.12 - 4450.82 |         680 |
| -798.96 - -749.11 |         676 |
| 9501.08 - 9550.99 |         648 |
| 1651.00 - 1700.95 |         661 |
| 8201.06 - 8250.87 |         660 |
| 7751.03 - 7800.94 |         684 |
| 7951.01 - 8000.96 |         706 |
| 7151.38 - 7200.99 |         657 |
| -448.99 - -399.21 |         703 |
| 6201.01 - 6250.98 |         680 |
| 8851.03 - 8900.86 |         691 |
| 7201.07 - 7250.94 |         701 |
| 951.05 - 1000.99  |         673 |
| 1601.08 - 1650.99 |         679 |
| 9001.02 - 9050.95 |         678 |
| 7551.00 - 7600.94 |         675 |
| 3951.11 - 4000.95 |         636 |
| 8351.25 - 8400.91 |         686 |
| 5351.05 - 5400.97 |         658 |
| -198.76 - -149.15 |         676 |
| 6551.29 - 6600.96 |         710 |
| 601.00 - 650.97   |         645 |
| 3151.00 - 3200.95 |         674 |
| 1251.03 - 1300.93 |         676 |
| -348.94 - -299.01 |         688 |
| 6001.04 - 6050.89 |         673 |
| 9151.06 - 9200.98 |         701 |
| 7051.08 - 7100.86 |         698 |
| 1551.04 - 1600.99 |         711 |
| 8251.02 - 8300.96 |         713 |
| -698.97 - -649.13 |         638 |
| 9651.06 - 9700.84 |         650 |
| 7251.12 - 7300.97 |         668 |
| -148.97 - -99.03  |         715 |
| 9201.02 - 9250.76 |         685 |
| 301.20 - 350.99   |         688 |
| 8801.09 - 8850.99 |         678 |
| 6101.08 - 6150.87 |         657 |
| 6051.01 - 6100.87 |         649 |
| 7701.17 - 7750.90 |         693 |
| 5501.16 - 5550.99 |         656 |
| -549.00 - -499.17 |         641 |
| 3401.02 - 3450.90 |         689 |
| 6351.05 - 6400.96 |         662 |
| 51.00 - 100.92    |         720 |
| 5551.00 - 5600.98 |         686 |
| 4201.01 - 4250.99 |         703 |
| -898.97 - -849.19 |         699 |
| 2451.02 - 2500.98 |         638 |
| 7401.04 - 7450.98 |         694 |
| 4301.11 - 4350.95 |         720 |
| 5801.03 - 5850.99 |         698 |
| 501.05 - 550.98   |         670 |
| 1851.07 - 1900.99 |         725 |
| 7901.01 - 7950.91 |         684 |
| 8101.07 - 8150.74 |         653 |
| 3001.06 - 3050.99 |         719 |
| 6601.13 - 6650.89 |         768 |
| 4501.00 - 4550.99 |         683 |
| 9351.23 - 9400.78 |         683 |
| 9801.00 - 9850.89 |         686 |
| 5951.00 - 6000.96 |         656 |
| 3651.06 - 3700.96 |         717 |
| 8651.23 - 8700.96 |         696 |
| 8601.02 - 8650.94 |         671 |
| 1351.08 - 1400.94 |         689 |
| 3201.05 - 3250.95 |         695 |
| 4751.01 - 4800.96 |         698 |
| 9601.01 - 9650.97 |         720 |
| 5401.22 - 5450.96 |         689 |
| 2601.03 - 2650.99 |         708 |
| 3101.10 - 3150.93 |         669 |
| 2651.06 - 2700.93 |         650 |
| 451.07 - 500.92   |         681 |
| 2401.10 - 2450.84 |         697 |
| 4001.06 - 4050.94 |         686 |
| -498.93 - -449.14 |         673 |
| 3601.05 - 3650.95 |         696 |
| 5751.31 - 5800.91 |         682 |
| 7001.09 - 7050.86 |         716 |
| 9401.00 - 9450.98 |         658 |
| 4701.04 - 4750.99 |         662 |
| 1051.19 - 1100.96 |         674 |
| 8501.02 - 8550.98 |         685 |
| 5001.00 - 5050.96 |         715 |
| 6951.01 - 7000.90 |         670 |
| 2551.00 - 2600.84 |         698 |
| 3051.01 - 3100.97 |         662 |
| 6751.01 - 6800.94 |         705 |
| 651.02 - 700.93   |         677 |
| 3501.08 - 3550.91 |         698 |
| 1751.02 - 1800.96 |         709 |
| 901.11 - 950.66   |         676 |
| 6901.10 - 6950.94 |         689 |
| 2801.03 - 2850.93 |         658 |
| 4901.14 - 4950.89 |         687 |
| -999.99 - -999.16 |          12 |
    )";
    c_acctbal.dataMap = makeDataMap(input);

    c_mktsegment.identifier = false;
    c_mktsegment.dataType = "string";
    c_mktsegment.count = customerRow;
    c_mktsegment.bucketNum = 5;
    input = R"(
| AUTOMOBILE   | 29752 |
| BUILDING     | 30142 |
| FURNITURE    | 29968 |
| HOUSEHOLD    | 30189 |
| MACHINERY    | 29949 |)";
    c_mktsegment.dataMap = makeDataMap(input);

    c_comment.identifier = true;
    c_comment.dataType = "string";
    c_comment.count = customerRow;

    o_orderkey.identifier = true;
    o_orderkey.count = ordersRow;
    o_orderkey.dataType = "int";
    o_orderkey.minValue = 1;
    o_orderkey.maxValue = 1500000;
    
    o_custkey.identifier = false;
    o_custkey.count = ordersRow;
    o_custkey.dataType = "int";
    o_custkey.minValue = 1;
    o_custkey.maxValue = 150000;
    o_custkey.bucketNum = 250;
    input = R"(
| 36601 - 37199   |        6057 |
| 78001 - 78599   |        6003 |
| 123001 - 123599 |        5961 |
| 136201 - 136799 |        5856 |
| 44401 - 44999   |        6075 |
| 55201 - 55799   |        5960 |
| 39001 - 39599   |        5974 |
| 129601 - 130199 |        5923 |
| 66601 - 67199   |        5997 |
| 60601 - 61199   |        6028 |
| 127201 - 127799 |        6031 |
| 115201 - 115799 |        5951 |
| 85801 - 86399   |        5884 |
| 124801 - 125399 |        6025 |
| 81601 - 82199   |        5935 |
| 31801 - 32399   |        5911 |
| 16201 - 16799   |        6079 |
| 129001 - 129599 |        5970 |
| 56401 - 56999   |        5962 |
| 28201 - 28799   |        5900 |
| 84001 - 84599   |        5946 |
| 64201 - 64799   |        6034 |
| 3001 - 3599     |        5932 |
| 107401 - 107999 |        5915 |
| 21001 - 21599   |        6071 |
| 104401 - 104999 |        5930 |
| 88801 - 89399   |        5925 |
| 147001 - 147599 |        5872 |
| 27601 - 28199   |        5970 |
| 601 - 1199      |        5936 |
| 28801 - 29399   |        6128 |
| 73801 - 74399   |        6171 |
| 70801 - 71399   |        5907 |
| 92401 - 92999   |        5988 |
| 25801 - 26399   |        6065 |
| 43801 - 44399   |        6082 |
| 6001 - 6599     |        5936 |
| 60001 - 60599   |        5947 |
| 82201 - 82799   |        5951 |
| 13801 - 14399   |        5983 |
| 87601 - 88199   |        5980 |
| 27001 - 27599   |        5979 |
| 119401 - 119999 |        6103 |
| 78601 - 79199   |        5953 |
| 61201 - 61799   |        5948 |
| 135001 - 135599 |        6109 |
| 64801 - 65399   |        5931 |
| 32401 - 32999   |        5889 |
| 109801 - 110399 |        6065 |
| 52801 - 53399   |        6074 |
| 2401 - 2999     |        5968 |
| 33001 - 33599   |        5986 |
| 9601 - 10199    |        6037 |
| 111601 - 112199 |        6031 |
| 102001 - 102599 |        6044 |
| 90601 - 91199   |        6115 |
| 122401 - 122999 |        6118 |
| 41401 - 41999   |        6034 |
| 42601 - 43199   |        5919 |
| 45601 - 46199   |        6037 |
| 30001 - 30599   |        6100 |
| 115801 - 116399 |        5980 |
| 6601 - 7199     |        6114 |
| 103201 - 103799 |        6048 |
| 117601 - 118199 |        5961 |
| 141001 - 141599 |        6045 |
| 22201 - 22799   |        5983 |
| 29401 - 29999   |        5897 |
| 50401 - 50999   |        5957 |
| 18601 - 19199   |        6007 |
| 1 - 599         |        5894 |
| 133201 - 133799 |        5860 |
| 105001 - 105599 |        6073 |
| 39601 - 40199   |        5906 |
| 75601 - 76199   |        5825 |
| 144001 - 144599 |        5955 |
| 106201 - 106799 |        6012 |
| 1201 - 1799     |        6030 |
| 138001 - 138599 |        6054 |
| 69601 - 70199   |        5931 |
| 146401 - 146999 |        6091 |
| 1801 - 2399     |        5993 |
| 77401 - 77999   |        5964 |
| 112801 - 113399 |        5969 |
| 126601 - 127199 |        5919 |
| 54001 - 54599   |        5901 |
| 94801 - 95399   |        6005 |
| 90001 - 90599   |        6071 |
| 72601 - 73199   |        5934 |
| 149401 - 149999 |        5956 |
| 95401 - 95999   |        5986 |
| 46801 - 47399   |        5949 |
| 98401 - 98999   |        6031 |
| 59401 - 59999   |        5928 |
| 48601 - 49199   |        6053 |
| 12001 - 12599   |        5975 |
| 34801 - 35399   |        6108 |
| 100201 - 100799 |        6031 |
| 63001 - 63599   |        5940 |
| 74401 - 74999   |        5968 |
| 141601 - 142199 |        6059 |
| 9001 - 9599     |        5830 |
| 62401 - 62999   |        5947 |
| 93001 - 93599   |        5995 |
| 142801 - 143399 |        6010 |
| 97801 - 98399   |        6079 |
| 123601 - 124199 |        5958 |
| 23401 - 23999   |        6009 |
| 89401 - 89999   |        6003 |
| 54601 - 55199   |        5967 |
| 58801 - 59399   |        6012 |
| 68401 - 68999   |        6030 |
| 49201 - 49799   |        6017 |
| 81001 - 81599   |        5985 |
| 65401 - 65999   |        6045 |
| 132601 - 133199 |        5869 |
| 57601 - 58199   |        6058 |
| 7201 - 7799     |        5908 |
| 114001 - 114599 |        6064 |
| 108001 - 108599 |        5986 |
| 11401 - 11999   |        6210 |
| 37801 - 38399   |        6054 |
| 130201 - 130799 |        6052 |
| 48001 - 48599   |        6090 |
| 31201 - 31799   |        6002 |
| 36001 - 36599   |        6108 |
| 130801 - 131399 |        6044 |
| 63601 - 64199   |        6020 |
| 46201 - 46799   |        6166 |
| 20401 - 20999   |        6016 |
| 43201 - 43799   |        5974 |
| 102601 - 103199 |        5998 |
| 96601 - 97199   |        6067 |
| 79801 - 80399   |        5905 |
| 96001 - 96599   |        5974 |
| 131401 - 131999 |        5952 |
| 79201 - 79799   |        5796 |
| 55801 - 56399   |        5999 |
| 49801 - 50399   |        6121 |
| 126001 - 126599 |        5994 |
| 143401 - 143999 |        6105 |
| 137401 - 137999 |        5997 |
| 24601 - 25199   |        6084 |
| 134401 - 134999 |        6030 |
| 14401 - 14999   |        5912 |
| 53401 - 53999   |        5941 |
| 10801 - 11399   |        6005 |
| 8401 - 8999     |        5911 |
| 40201 - 40799   |        5873 |
| 51001 - 51599   |        6025 |
| 34201 - 34799   |        5926 |
| 25201 - 25799   |        5968 |
| 75001 - 75599   |        5940 |
| 13201 - 13799   |        5963 |
| 109201 - 109799 |        5907 |
| 108601 - 109199 |        5979 |
| 127801 - 128399 |        5933 |
| 128401 - 128999 |        6096 |
| 133801 - 134399 |        5983 |
| 139201 - 139799 |        6064 |
| 16801 - 17399   |        6097 |
| 138601 - 139199 |        5913 |
| 24001 - 24599   |        6099 |
| 57001 - 57599   |        6123 |
| 67801 - 68399   |        5870 |
| 88201 - 88799   |        6092 |
| 73201 - 73799   |        5912 |
| 19201 - 19799   |        6051 |
| 121801 - 122399 |        6114 |
| 7801 - 8399     |        5886 |
| 35401 - 35999   |        5946 |
| 37201 - 37799   |        5931 |
| 121201 - 121799 |        6169 |
| 10201 - 10799   |        6013 |
| 110401 - 110999 |        5998 |
| 147601 - 148199 |        6047 |
| 142201 - 142799 |        5928 |
| 15601 - 16199   |        5952 |
| 99001 - 99599   |        5977 |
| 30601 - 31199   |        6012 |
| 94201 - 94799   |        6031 |
| 105601 - 106199 |        5933 |
| 132001 - 132599 |        5992 |
| 76201 - 76799   |        6053 |
| 97201 - 97799   |        5971 |
| 113401 - 113999 |        6058 |
| 91801 - 92399   |        6030 |
| 4201 - 4799     |        6029 |
| 145801 - 146399 |        5933 |
| 120001 - 120599 |        6052 |
| 100801 - 101399 |        5983 |
| 61801 - 62399   |        6112 |
| 51601 - 52199   |        6128 |
| 93601 - 94199   |        5985 |
| 144601 - 145199 |        5963 |
| 52201 - 52799   |        5953 |
| 148801 - 149399 |        6063 |
| 3601 - 4199     |        6033 |
| 83401 - 83999   |        5948 |
| 72001 - 72599   |        5898 |
| 17401 - 17999   |        6013 |
| 124201 - 124799 |        6091 |
| 111001 - 111599 |        5796 |
| 70201 - 70799   |        5962 |
| 103801 - 104399 |        6171 |
| 118801 - 119399 |        5920 |
| 22801 - 23399   |        6054 |
| 139801 - 140399 |        5978 |
| 66001 - 66599   |        6123 |
| 125401 - 125999 |        6104 |
| 42001 - 42599   |        6116 |
| 5401 - 5999     |        6114 |
| 148201 - 148799 |        6059 |
| 106801 - 107399 |        6044 |
| 18001 - 18599   |        6011 |
| 140401 - 140999 |        6043 |
| 21601 - 22199   |        5942 |
| 117001 - 117599 |        6039 |
| 40801 - 41399   |        6152 |
| 67201 - 67799   |        5947 |
| 38401 - 38999   |        5981 |
| 47401 - 47999   |        5903 |
| 112201 - 112799 |        6070 |
| 26401 - 26999   |        6002 |
| 71401 - 71999   |        6030 |
| 12601 - 13199   |        6003 |
| 4801 - 5399     |        5988 |
| 101401 - 101999 |        5983 |
| 33601 - 34199   |        6027 |
| 120601 - 121199 |        5901 |
| 69001 - 69599   |        6112 |
| 85201 - 85799   |        5978 |
| 91201 - 91799   |        6029 |
| 136801 - 137399 |        6091 |
| 76801 - 77399   |        6110 |
| 15001 - 15599   |        6028 |
| 116401 - 116999 |        6047 |
| 45001 - 45599   |        5808 |
| 19801 - 20399   |        6062 |
| 87001 - 87599   |        5973 |
| 135601 - 136199 |        5941 |
| 86401 - 86999   |        6063 |
| 80401 - 80999   |        6008 |
| 114601 - 115199 |        6004 |
| 145201 - 145799 |        6020 |
| 118201 - 118799 |        5882 |
| 82801 - 83399   |        5838 |
| 99601 - 100199  |        6006 |
| 58201 - 58799   |        6000 |
| 84601 - 85199   |        6245 |
    )";
    o_custkey.dataMap = makeDataMap(input);

    o_orderstatus.identifier = false;
    o_orderstatus.dataType = "string";
    o_orderstatus.count = ordersRow;
    o_orderstatus.bucketNum = 3;
    input = R"(
| F             |  732044 |
| O             |  729413 |
| P             |   38543 |
    )";
    o_orderstatus.dataMap = makeDataMap(input);

    o_totalprice.identifier = false;
    o_totalprice.dataType = "float";
    o_totalprice.bucketNum = 210;
    o_totalprice.minValue = 857;
    o_totalprice.maxValue = 555286;
    o_totalprice.count = ordersRow;
    input = R"(
| 172501.25 - 175000.65 |       13353 |
| 45001.57 - 47500.79   |       13854 |
| 192501.32 - 195000.68 |       12822 |
| 30001.00 - 32500.84   |       11399 |
| 142501.01 - 145000.99 |       13914 |
| 57501.06 - 60000.96   |       14759 |
| 250001.59 - 252500.01 |        9084 |
| 207501.41 - 210000.83 |       12138 |
| 162501.07 - 165000.67 |       13763 |
| 252501.12 - 255000.74 |        9174 |
| 67501.01 - 70000.81   |       14671 |
| 205001.69 - 207500.94 |       12356 |
| 80001.10 - 82500.99   |       14437 |
| 340001.19 - 342500.22 |        2249 |
| 37501.66 - 40000.99   |       12674 |
| 110001.12 - 112500.64 |       14050 |
| 102501.11 - 105000.85 |       13762 |
| 167501.29 - 170000.99 |       13639 |
| 330002.16 - 332500.70 |        2706 |
| 197501.02 - 200000.95 |       12766 |
| 112501.19 - 115000.76 |       14017 |
| 275001.16 - 277500.23 |        7066 |
| 187501.15 - 190000.80 |       13065 |
| 122501.19 - 125000.91 |       14101 |
| 125001.06 - 127500.84 |       14243 |
| 65001.54 - 67500.75   |       14935 |
| 260001.70 - 262500.59 |        8335 |
| 130001.03 - 132500.87 |       14169 |
| 200001.35 - 202500.81 |       12482 |
| 212501.02 - 215000.61 |       11891 |
| 32501.43 - 35000.92   |       11772 |
| 2501.18 - 5000.95     |        7759 |
| 300001.27 - 302500.47 |        4879 |
| 152501.16 - 155000.75 |       13956 |
| 70001.29 - 72500.94   |       14753 |
| 87501.07 - 90000.76   |       14280 |
| 175001.17 - 177500.73 |       13412 |
| 190001.06 - 192500.92 |       13049 |
| 257501.27 - 260000.81 |        8640 |
| 220001.16 - 222500.87 |       11493 |
| 312502.51 - 315000.35 |        3821 |
| 52501.13 - 55000.71   |       14592 |
| 170001.03 - 172500.99 |       13558 |
| 7501.00 - 10000.89    |        8279 |
| 292501.00 - 295000.92 |        5458 |
| 270001.95 - 272500.92 |        7317 |
| 317501.10 - 319999.41 |        3553 |
| 147501.15 - 150000.80 |       14100 |
| 265001.13 - 267500.77 |        7804 |
| 210001.01 - 212500.46 |       12123 |
| 97501.00 - 100000.85  |       13910 |
| 107501.08 - 110000.87 |       13815 |
| 40001.18 - 42500.93   |       13090 |
| 47501.14 - 50000.96   |       14405 |
| 85001.08 - 87500.89   |       14279 |
| 117501.07 - 120000.94 |       14152 |
| 325001.80 - 327500.86 |        2986 |
| 27501.08 - 30000.91   |       11035 |
| 247501.03 - 250000.96 |        9255 |
| 215001.56 - 217500.87 |       11911 |
| 155001.12 - 157500.91 |       13802 |
| 352501.43 - 354999.58 |        1606 |
| 237501.03 - 240000.90 |       10216 |
| 165001.96 - 167500.94 |       13605 |
| 202501.29 - 205000.99 |       12584 |
| 267501.44 - 270000.94 |        7588 |
| 20002.11 - 22500.36   |        9763 |
| 105001.18 - 107500.87 |       14145 |
| 342501.47 - 344998.87 |        2069 |
| 857.71 - 2500.73      |        5459 |
| 50001.37 - 52500.98   |       14740 |
| 227501.09 - 230000.63 |       10838 |
| 140001.10 - 142500.96 |       13941 |
| 327501.03 - 329996.98 |        2942 |
| 35001.24 - 37500.96   |       12231 |
| 182501.01 - 185000.59 |       13248 |
| 22502.12 - 25000.87   |       10356 |
| 180001.09 - 182500.93 |       13449 |
| 282502.28 - 285000.53 |        6288 |
| 90001.03 - 92500.96   |       14244 |
| 242501.02 - 245000.98 |        9876 |
| 120001.03 - 122500.87 |       14094 |
| 355004.87 - 357499.30 |        1473 |
| 160001.72 - 162500.94 |       13760 |
| 195001.20 - 197500.97 |       12636 |
| 25001.17 - 27500.55   |       10686 |
| 92501.08 - 95000.93   |       13947 |
| 137501.08 - 140000.98 |       14024 |
| 185001.17 - 187500.72 |       13108 |
| 277501.47 - 280000.70 |        6760 |
| 127501.24 - 130000.99 |       14177 |
| 335001.28 - 337500.96 |        2401 |
| 345001.89 - 347500.31 |        1889 |
| 235001.00 - 237500.91 |       10594 |
| 115001.07 - 117500.91 |       14257 |
| 222501.25 - 225000.52 |       11265 |
| 15001.75 - 17500.81   |        9434 |
| 132501.12 - 135000.75 |       13972 |
| 295001.91 - 297500.72 |        5194 |
| 95001.04 - 97500.67   |       14000 |
| 305001.12 - 307500.99 |        4526 |
| 350001.07 - 352500.09 |        1626 |
| 75001.15 - 77500.99   |       14481 |
| 135001.30 - 137500.79 |       14009 |
| 42501.04 - 45000.87   |       13444 |
| 82501.31 - 85000.81   |       14289 |
| 60001.16 - 62500.48   |       14617 |
| 12501.03 - 15000.94   |        9058 |
| 272501.11 - 275000.65 |        7235 |
| 285001.31 - 287500.94 |        6092 |
| 77501.09 - 80000.94   |       14568 |
| 150001.59 - 152500.95 |       13749 |
| 72501.36 - 75000.85   |       14489 |
| 262501.18 - 265000.60 |        8091 |
| 315001.61 - 317498.76 |        3763 |
| 320001.05 - 322499.80 |        3393 |
| 62501.11 - 65000.84   |       14842 |
| 145001.09 - 147500.83 |       13825 |
| 290001.67 - 292500.67 |        5756 |
| 55001.11 - 57500.99   |       14684 |
| 17501.41 - 20000.64   |        9598 |
| 157501.05 - 160000.89 |       13677 |
| 225001.05 - 227500.92 |       11080 |
| 370001.91 - 372495.62 |         947 |
| 240001.46 - 242500.92 |       10101 |
| 280002.54 - 282500.85 |        6683 |
| 232501.07 - 235000.67 |       10725 |
| 297501.97 - 300000.44 |        5171 |
| 5001.47 - 7499.47     |        8235 |
| 302501.95 - 305000.74 |        4640 |
| 322501.97 - 325000.63 |        3171 |
| 310001.63 - 312498.75 |        4048 |
| 245001.38 - 247500.60 |        9658 |
| 177501.17 - 180000.37 |       13307 |
| 217501.43 - 220000.98 |       11540 |
| 100001.01 - 102500.98 |       13851 |
| 230001.45 - 232500.68 |       10719 |
| 397501.52 - 399994.59 |         366 |
| 255001.19 - 257500.94 |        8636 |
| 287501.88 - 290000.60 |        5834 |
| 405030.01 - 407498.67 |         276 |
| 367503.82 - 369995.79 |         994 |
| 10001.35 - 12500.78   |        8623 |
| 337501.50 - 339999.44 |        2405 |
| 357501.44 - 360000.08 |        1370 |
| 332501.10 - 335000.70 |        2515 |
| 362503.56 - 365000.24 |        1186 |
| 382501.45 - 384993.99 |         664 |
| 307501.78 - 310000.93 |        4146 |
| 387509.76 - 389998.02 |         557 |
| 395009.02 - 397497.65 |         436 |
| 365004.18 - 367500.29 |        1103 |
| 407513.85 - 409998.47 |         263 |
| 385002.30 - 387500.10 |         604 |
| 377505.09 - 379992.61 |         790 |
| 392510.97 - 394999.72 |         455 |
| 360003.16 - 362499.10 |        1263 |
| 430072.79 - 432495.19 |         111 |
| 412501.23 - 414995.50 |         243 |
| 347503.10 - 350000.99 |        1759 |
| 380003.91 - 382500.68 |         730 |
| 375002.24 - 377494.92 |         847 |
| 372505.20 - 375000.45 |         928 |
| 400001.59 - 402498.02 |         352 |
| 447516.65 - 449997.80 |          41 |
| 425014.46 - 427497.00 |         145 |
| 390004.31 - 392483.70 |         540 |
| 442524.96 - 444978.18 |          63 |
| 435001.12 - 437432.06 |          92 |
| 427520.24 - 429997.06 |         130 |
| 432517.30 - 434996.24 |         107 |
| 417504.40 - 419970.78 |         170 |
| 477728.86 - 479758.63 |           6 |
| 410022.27 - 412500.07 |         243 |
| 475302.84 - 477117.70 |           7 |
| 445059.27 - 447467.12 |          56 |
| 437534.77 - 439998.16 |          84 |
| 402522.53 - 404997.75 |         337 |
| 457654.25 - 459957.73 |          31 |
| 440014.39 - 442486.84 |          59 |
| 487747.90 - 489836.86 |           6 |
| 422518.46 - 424987.15 |         160 |
| 490133.06 - 492147.15 |           8 |
| 470062.63 - 472440.55 |          12 |
| 452527.04 - 454909.13 |          30 |
| 415034.07 - 417491.94 |         192 |
| 455011.59 - 457388.54 |          36 |
| 462599.52 - 464958.68 |          25 |
| 420032.05 - 422490.48 |         138 |
| 450074.69 - 452388.80 |          28 |
| 495148.48 - 496620.48 |           6 |
| 460026.07 - 462492.46 |          29 |
| 465198.50 - 467484.22 |          28 |
| 467819.53 - 469992.72 |          21 |
| 502742.76 - 504509.06 |           3 |
| 472529.02 - 474185.37 |          10 |
| 508010.56 - 508668.52 |           3 |
| 485141.38 - 487405.74 |           9 |
| 480012.15 - 482259.74 |           7 |
| 555285.16 - 555285.16 |           1 |
| 482781.28 - 484188.38 |           5 |
| 497529.23 - 499794.58 |           6 |
| 510061.60 - 511359.88 |           2 |
| 515531.82 - 515531.82 |           1 |
| 522644.48 - 522720.61 |           2 |
| 530604.44 - 530604.44 |           1 |
| 494398.79 - 494747.48 |           2 |
| 500241.33 - 500241.33 |           1 |
| 525590.57 - 525590.57 |           1 |
| 544089.09 - 544089.09 |           1 |
    )";
    o_totalprice.dataMap = makeDataMap(input);

    o_orderpriority.identifier = false;
    o_orderpriority.bucketNum = 5;
    o_orderpriority.dataType = "string";
    o_orderpriority.count = ordersRow;
    input = R"(
| 1-URGENT        | 300343 |
| 2-HIGH          | 300091 |
| 3-MEDIUM        | 298723 |
| 4-NOT SPECIFIED | 300254 |
| 5-LOW           | 300589 |
    )";

    o_clerk.identifier = false;
    o_clerk.bucketNum = 1000;
    o_clerk.count = ordersRow;
    o_clerk.dataType = "string";

    o_shippriority.identifier = false;
    o_shippriority.bucketNum = 1;
    o_shippriority.minValue = 0;
    o_shippriority.maxValue = 0;
    o_shippriority.count = ordersRow;
    o_shippriority.dataType = "string";

    o_comment.identifier = true;
    o_comment.count = ordersRow;
    o_comment.dataType = "string";

    o_orderdate.identifier = false;
    o_orderdate.count = ordersRow;
    o_orderdate.dataType = "date";
    o_orderdate.minValue = 1019937;
    o_orderdate.maxValue = 1023234;
    o_orderdate.bucketNum = 241;
    input = R"(
| 1995-12-31 - 1996-01-09 |        6367 |
| 1996-11-25 - 1996-12-04 |        6216 |
| 1993-10-12 - 1993-10-21 |        6126 |
| 1995-10-02 - 1995-10-11 |        6311 |
| 1994-07-29 - 1994-08-07 |        6380 |
| 1992-02-20 - 1992-02-29 |        6249 |
| 1996-01-10 - 1996-01-19 |        6133 |
| 1995-07-14 - 1995-07-23 |        6188 |
| 1993-10-22 - 1993-10-31 |        6210 |
| 1998-07-18 - 1998-07-27 |        6266 |
| 1995-10-22 - 1995-10-31 |        6295 |
| 1995-11-01 - 1995-11-10 |        6204 |
| 1992-05-30 - 1992-06-08 |        6158 |
| 1996-08-17 - 1996-08-26 |        6351 |
| 1996-09-16 - 1996-09-25 |        6428 |
| 1994-07-09 - 1994-07-18 |        6199 |
| 1995-03-16 - 1995-03-25 |        6178 |
| 1994-01-20 - 1994-01-29 |        6216 |
| 1996-12-15 - 1996-12-24 |        6215 |
| 1998-04-09 - 1998-04-18 |        6174 |
| 1994-05-30 - 1994-06-08 |        6347 |
| 1993-12-11 - 1993-12-20 |        6197 |
| 1998-01-19 - 1998-01-28 |        6121 |
| 1994-04-10 - 1994-04-19 |        6235 |
| 1993-01-25 - 1993-02-03 |        6133 |
| 1994-09-17 - 1994-09-26 |        6156 |
| 1994-03-11 - 1994-03-20 |        6452 |
| 1998-02-28 - 1998-03-09 |        6297 |
| 1996-03-10 - 1996-03-19 |        6154 |
| 1997-05-04 - 1997-05-13 |        6282 |
| 1996-06-18 - 1996-06-27 |        6244 |
| 1992-06-09 - 1992-06-18 |        6221 |
| 1992-11-16 - 1992-11-25 |        6085 |
| 1992-04-30 - 1992-05-09 |        6177 |
| 1993-06-04 - 1993-06-13 |        6228 |
| 1997-11-20 - 1997-11-29 |        6127 |
| 1995-10-12 - 1995-10-21 |        6288 |
| 1994-08-28 - 1994-09-06 |        6252 |
| 1995-05-05 - 1995-05-14 |        6090 |
| 1997-09-01 - 1997-09-10 |        6217 |
| 1992-10-17 - 1992-10-26 |        6243 |
| 1995-09-12 - 1995-09-21 |        6283 |
| 1992-12-26 - 1993-01-04 |        6202 |
| 1993-08-03 - 1993-08-12 |        6106 |
| 1992-03-31 - 1992-04-09 |        6184 |
| 1993-12-21 - 1993-12-30 |        6272 |
| 1993-03-16 - 1993-03-25 |        6301 |
| 1995-04-05 - 1995-04-14 |        6326 |
| 1997-12-30 - 1998-01-08 |        6303 |
| 1996-02-29 - 1996-03-09 |        6180 |
| 1994-06-09 - 1994-06-18 |        6274 |
| 1995-05-25 - 1995-06-03 |        6416 |
| 1993-03-06 - 1993-03-15 |        6109 |
| 1993-02-24 - 1993-03-05 |        6251 |
| 1994-09-27 - 1994-10-06 |        6160 |
| 1998-03-20 - 1998-03-29 |        6299 |
| 1993-09-22 - 1993-10-01 |        6173 |
| 1996-12-05 - 1996-12-14 |        6205 |
| 1993-06-24 - 1993-07-03 |        6353 |
| 1995-11-21 - 1995-11-30 |        6241 |
| 1994-05-10 - 1994-05-19 |        6285 |
| 1997-02-13 - 1997-02-22 |        6379 |
| 1997-02-03 - 1997-02-12 |        6278 |
| 1993-12-31 - 1994-01-09 |        6369 |
| 1992-01-11 - 1992-01-20 |        6158 |
| 1992-09-27 - 1992-10-06 |        6141 |
| 1993-07-14 - 1993-07-23 |        6270 |
| 1992-03-11 - 1992-03-20 |        6218 |
| 1994-03-21 - 1994-03-30 |        6298 |
| 1995-06-04 - 1995-06-13 |        6169 |
| 1995-04-15 - 1995-04-24 |        6330 |
| 1994-03-01 - 1994-03-10 |        6204 |
| 1994-06-29 - 1994-07-08 |        6166 |
| 1996-10-06 - 1996-10-15 |        6205 |
| 1993-09-12 - 1993-09-21 |        6194 |
| 1994-12-16 - 1994-12-25 |        6282 |
| 1992-03-01 - 1992-03-10 |        6220 |
| 1996-03-20 - 1996-03-29 |        6238 |
| 1995-01-25 - 1995-02-03 |        6322 |
| 1997-01-24 - 1997-02-02 |        6173 |
| 1992-12-16 - 1992-12-25 |        6181 |
| 1994-02-09 - 1994-02-18 |        6115 |
| 1998-03-30 - 1998-04-08 |        6262 |
| 1994-11-16 - 1994-11-25 |        6191 |
| 1994-01-30 - 1994-02-08 |        6293 |
| 1996-09-26 - 1996-10-05 |        6260 |
| 1997-05-24 - 1997-06-02 |        6264 |
| 1996-05-29 - 1996-06-07 |        6315 |
| 1995-08-13 - 1995-08-22 |        6288 |
| 1995-02-24 - 1995-03-05 |        6313 |
| 1998-05-19 - 1998-05-28 |        6333 |
| 1997-10-11 - 1997-10-20 |        6160 |
| 1995-12-21 - 1995-12-30 |        6243 |
| 1993-05-05 - 1993-05-14 |        6075 |
| 1992-10-07 - 1992-10-16 |        6204 |
| 1995-07-04 - 1995-07-13 |        6139 |
| 1996-12-25 - 1997-01-03 |        6268 |
| 1997-03-25 - 1997-04-03 |        6143 |
| 1992-08-18 - 1992-08-27 |        6213 |
| 1995-05-15 - 1995-05-24 |        6222 |
| 1995-04-25 - 1995-05-04 |        6326 |
| 1996-03-30 - 1996-04-08 |        6200 |
| 1993-08-23 - 1993-09-01 |        6291 |
| 1998-04-19 - 1998-04-28 |        6156 |
| 1997-04-04 - 1997-04-13 |        6228 |
| 1998-02-08 - 1998-02-17 |        6368 |
| 1997-10-31 - 1997-11-09 |        6147 |
| 1993-02-14 - 1993-02-23 |        6198 |
| 1996-10-26 - 1996-11-04 |        6290 |
| 1992-07-09 - 1992-07-18 |        6341 |
| 1995-07-24 - 1995-08-02 |        6470 |
| 1997-01-04 - 1997-01-13 |        6188 |
| 1998-03-10 - 1998-03-19 |        6282 |
| 1997-07-03 - 1997-07-12 |        6302 |
| 1997-02-23 - 1997-03-04 |        6143 |
| 1997-10-21 - 1997-10-30 |        6186 |
| 1997-03-15 - 1997-03-24 |        6187 |
| 1996-02-19 - 1996-02-28 |        6302 |
| 1995-06-14 - 1995-06-23 |        6333 |
| 1992-11-26 - 1992-12-05 |        6362 |
| 1993-01-15 - 1993-01-24 |        6267 |
| 1994-11-26 - 1994-12-05 |        6287 |
| 1997-08-02 - 1997-08-11 |        6187 |
| 1992-08-28 - 1992-09-06 |        6115 |
| 1997-07-23 - 1997-08-01 |        6364 |
| 1993-11-21 - 1993-11-30 |        6112 |
| 1995-12-11 - 1995-12-20 |        6209 |
| 1996-11-15 - 1996-11-24 |        6298 |
| 1995-09-02 - 1995-09-11 |        6294 |
| 1998-06-28 - 1998-07-07 |        6208 |
| 1998-06-18 - 1998-06-27 |        6116 |
| 1992-04-20 - 1992-04-29 |        6109 |
| 1998-05-29 - 1998-06-07 |        6174 |
| 1993-05-25 - 1993-06-03 |        6274 |
| 1993-04-15 - 1993-04-24 |        6253 |
| 1995-12-01 - 1995-12-10 |        6131 |
| 1998-07-08 - 1998-07-17 |        6290 |
| 1992-02-10 - 1992-02-19 |        6242 |
| 1995-01-05 - 1995-01-14 |        6336 |
| 1997-04-24 - 1997-05-03 |        6364 |
| 1992-04-10 - 1992-04-19 |        6254 |
| 1994-05-20 - 1994-05-29 |        6160 |
| 1998-01-29 - 1998-02-07 |        6272 |
| 1995-08-03 - 1995-08-12 |        6364 |
| 1997-08-12 - 1997-08-21 |        6202 |
| 1993-04-25 - 1993-05-04 |        6161 |
| 1993-11-11 - 1993-11-20 |        6273 |
| 1993-06-14 - 1993-06-23 |        6186 |
| 1995-11-11 - 1995-11-20 |        6174 |
| 1994-07-19 - 1994-07-28 |        6189 |
| 1992-12-06 - 1992-12-15 |        6321 |
| 1997-05-14 - 1997-05-23 |        6218 |
| 1992-07-29 - 1992-08-07 |        6096 |
| 1996-06-28 - 1996-07-07 |        6344 |
| 1997-09-21 - 1997-09-30 |        6239 |
| 1994-04-30 - 1994-05-09 |        6129 |
| 1998-04-29 - 1998-05-08 |        6280 |
| 1992-06-19 - 1992-06-28 |        6218 |
| 1997-11-10 - 1997-11-19 |        6237 |
| 1994-04-20 - 1994-04-29 |        6199 |
| 1997-12-20 - 1997-12-29 |        6147 |
| 1993-09-02 - 1993-09-11 |        6308 |
| 1997-06-03 - 1997-06-12 |        6398 |
| 1994-06-19 - 1994-06-28 |        6235 |
| 1995-02-04 - 1995-02-13 |        6468 |
| 1994-02-19 - 1994-02-28 |        6202 |
| 1998-05-09 - 1998-05-18 |        6266 |
| 1997-01-14 - 1997-01-23 |        6194 |
| 1994-03-31 - 1994-04-09 |        6172 |
| 1992-05-20 - 1992-05-29 |        6328 |
| 1996-04-29 - 1996-05-08 |        6292 |
| 1996-08-27 - 1996-09-05 |        6292 |
| 1996-07-28 - 1996-08-06 |        6204 |
| 1998-07-28 - 1998-08-02 |        3659 |
| 1994-10-27 - 1994-11-05 |        6090 |
| 1994-08-08 - 1994-08-17 |        6247 |
| 1996-04-09 - 1996-04-18 |        6170 |
| 1997-10-01 - 1997-10-10 |        6385 |
| 1996-10-16 - 1996-10-25 |        6231 |
| 1998-01-09 - 1998-01-18 |        6331 |
| 1992-09-17 - 1992-09-26 |        6285 |
| 1996-08-07 - 1996-08-16 |        6378 |
| 1993-02-04 - 1993-02-13 |        6213 |
| 1996-05-19 - 1996-05-28 |        6226 |
| 1992-01-01 - 1992-01-10 |        6281 |
| 1993-01-05 - 1993-01-14 |        6245 |
| 1994-12-06 - 1994-12-15 |        6269 |
| 1994-09-07 - 1994-09-16 |        6307 |
| 1993-12-01 - 1993-12-10 |        6070 |
| 1992-10-27 - 1992-11-05 |        6181 |
| 1997-06-13 - 1997-06-22 |        6434 |
| 1993-08-13 - 1993-08-22 |        6199 |
| 1997-03-05 - 1997-03-14 |        6157 |
| 1997-08-22 - 1997-08-31 |        6316 |
| 1993-07-04 - 1993-07-13 |        6192 |
| 1995-03-06 - 1995-03-15 |        6250 |
| 1994-08-18 - 1994-08-27 |        6235 |
| 1993-07-24 - 1993-08-02 |        6293 |
| 1997-04-14 - 1997-04-23 |        6335 |
| 1996-09-06 - 1996-09-15 |        6143 |
| 1996-07-18 - 1996-07-27 |        6251 |
| 1996-06-08 - 1996-06-17 |        6357 |
| 1992-05-10 - 1992-05-19 |        6120 |
| 1996-05-09 - 1996-05-18 |        6011 |
| 1992-03-21 - 1992-03-30 |        6301 |
| 1993-11-01 - 1993-11-10 |        6275 |
| 1995-02-14 - 1995-02-23 |        6194 |
| 1997-12-10 - 1997-12-19 |        6167 |
| 1998-02-18 - 1998-02-27 |        6134 |
| 1994-01-10 - 1994-01-19 |        6239 |
| 1996-07-08 - 1996-07-17 |        6137 |
| 1996-01-30 - 1996-02-08 |        6213 |
| 1995-09-22 - 1995-10-01 |        6131 |
| 1992-09-07 - 1992-09-16 |        6087 |
| 1994-10-17 - 1994-10-26 |        6169 |
| 1995-01-15 - 1995-01-24 |        6250 |
| 1996-11-05 - 1996-11-14 |        6334 |
| 1992-11-06 - 1992-11-15 |        6150 |
| 1997-07-13 - 1997-07-22 |        6111 |
| 1993-04-05 - 1993-04-14 |        6135 |
| 1994-12-26 - 1995-01-04 |        6179 |
| 1997-09-11 - 1997-09-20 |        6142 |
| 1995-06-24 - 1995-07-03 |        6373 |
| 1992-08-08 - 1992-08-17 |        6193 |
| 1992-01-21 - 1992-01-30 |        6219 |
| 1997-11-30 - 1997-12-09 |        6487 |
| 1996-01-20 - 1996-01-29 |        6074 |
| 1992-01-31 - 1992-02-09 |        6239 |
| 1994-10-07 - 1994-10-16 |        6046 |
| 1993-03-26 - 1993-04-04 |        6194 |
| 1994-11-06 - 1994-11-15 |        6444 |
| 1995-08-23 - 1995-09-01 |        6175 |
| 1993-05-15 - 1993-05-24 |        6089 |
| 1996-02-09 - 1996-02-18 |        6339 |
| 1992-06-29 - 1992-07-08 |        6175 |
| 1998-06-08 - 1998-06-17 |        6295 |
| 1993-10-02 - 1993-10-11 |        6252 |
| 1996-04-19 - 1996-04-28 |        6223 |
| 1992-07-19 - 1992-07-28 |        6154 |
| 1995-03-26 - 1995-04-04 |        6236 |
| 1997-06-23 - 1997-07-02 |        6203 |       
    )";
    o_orderdate.dataMap = makeDataMapDate(input);

    l_orderkey.identifier = false;
    l_orderkey.dataType = "int";
    l_orderkey.bucketNum = 240;
    l_orderkey.count = lineitemRow;
    l_orderkey.minValue = 1;
    l_orderkey.maxValue = 6000000;
    input = R"(
| 1 - 24999         |       25180 |
| 25024 - 49991     |       25012 |
| 50016 - 74983     |       24890 |
| 75008 - 100000    |       25304 |
| 100001 - 124999   |       25142 |
| 125024 - 149991   |       24879 |
| 150016 - 174983   |       25199 |
| 175008 - 200000   |       24758 |
| 200001 - 224999   |       25009 |
| 225024 - 249991   |       24838 |
| 250016 - 274983   |       24796 |
| 275008 - 300000   |       24807 |
| 300001 - 324999   |       25090 |
| 325024 - 349991   |       25036 |
| 350016 - 374983   |       24809 |
| 375008 - 400000   |       25166 |
| 400001 - 424999   |       24916 |
| 425024 - 449991   |       24999 |
| 450016 - 474983   |       25404 |
| 475008 - 500000   |       25057 |
| 500001 - 524999   |       25318 |
| 525024 - 549991   |       24811 |
| 550016 - 574983   |       25091 |
| 575008 - 600000   |       25061 |
| 600001 - 624999   |       24818 |
| 625024 - 649991   |       24900 |
| 650016 - 674983   |       24979 |
| 675008 - 700000   |       25194 |
| 700001 - 724999   |       25129 |
| 725024 - 749991   |       25016 |
| 750016 - 774983   |       25016 |
| 775008 - 800000   |       24924 |
| 800001 - 824999   |       25073 |
| 825024 - 849991   |       24741 |
| 850016 - 874983   |       25033 |
| 875008 - 900000   |       24973 |
| 900001 - 924999   |       24896 |
| 925024 - 949991   |       25221 |
| 950016 - 974983   |       24874 |
| 975008 - 1000000  |       24690 |
| 1000001 - 1024999 |       25061 |
| 1025024 - 1049991 |       24975 |
| 1050016 - 1074983 |       25002 |
| 1075008 - 1100000 |       24866 |
| 1100001 - 1124999 |       24963 |
| 1125024 - 1149991 |       24895 |
| 1150016 - 1174983 |       24920 |
| 1175008 - 1200000 |       25238 |
| 1200001 - 1224999 |       24849 |
| 1225024 - 1249991 |       24989 |
| 1250016 - 1274983 |       25181 |
| 1275008 - 1300000 |       24869 |
| 1300001 - 1324999 |       25357 |
| 1325024 - 1349991 |       25021 |
| 1350016 - 1374983 |       25034 |
| 1375008 - 1400000 |       24813 |
| 1400001 - 1424999 |       25202 |
| 1425024 - 1449991 |       24930 |
| 1450016 - 1474983 |       24811 |
| 1475008 - 1500000 |       24554 |
| 1500001 - 1524999 |       24908 |
| 1525024 - 1549991 |       24958 |
| 1550016 - 1574983 |       25256 |
| 1575008 - 1600000 |       24922 |
| 1600001 - 1624999 |       25214 |
| 1625024 - 1649991 |       25274 |
| 1650016 - 1674983 |       24801 |
| 1675008 - 1700000 |       25231 |
| 1700001 - 1724999 |       24943 |
| 1725024 - 1749991 |       24902 |
| 1750016 - 1774983 |       24798 |
| 1775008 - 1800000 |       25307 |
| 1800001 - 1824999 |       25004 |
| 1825024 - 1849991 |       25155 |
| 1850016 - 1874983 |       25207 |
| 1875008 - 1900000 |       24999 |
| 1900001 - 1924999 |       24962 |
| 1925024 - 1949991 |       25044 |
| 1950016 - 1974983 |       25121 |
| 1975008 - 2000000 |       24912 |
| 2000001 - 2024999 |       24798 |
| 2025024 - 2049991 |       24967 |
| 2050016 - 2074983 |       25103 |
| 2075008 - 2100000 |       25033 |
| 2100001 - 2124999 |       25130 |
| 2125024 - 2149991 |       24723 |
| 2150016 - 2174983 |       24843 |
| 2175008 - 2200000 |       25178 |
| 2200001 - 2224999 |       24915 |
| 2225024 - 2249991 |       24849 |
| 2250016 - 2274983 |       24882 |
| 2275008 - 2300000 |       24853 |
| 2300001 - 2324999 |       25107 |
| 2325024 - 2349991 |       24797 |
| 2350016 - 2374983 |       24955 |
| 2375008 - 2400000 |       25110 |
| 2400001 - 2424999 |       25197 |
| 2425024 - 2449991 |       25062 |
| 2450016 - 2474983 |       25046 |
| 2475008 - 2500000 |       25066 |
| 2500001 - 2524999 |       25116 |
| 2525024 - 2549991 |       25113 |
| 2550016 - 2574983 |       24616 |
| 2575008 - 2600000 |       24872 |
| 2600001 - 2624999 |       24688 |
| 2625024 - 2649991 |       24935 |
| 2650016 - 2674983 |       24776 |
| 2675008 - 2700000 |       25022 |
| 2700001 - 2724999 |       25342 |
| 2725024 - 2749991 |       25265 |
| 2750016 - 2774983 |       25063 |
| 2775008 - 2800000 |       24878 |
| 2800001 - 2824999 |       25223 |
| 2825024 - 2849991 |       25178 |
| 2850016 - 2874983 |       24683 |
| 2875008 - 2900000 |       24804 |
| 2900001 - 2924999 |       25040 |
| 2925024 - 2949991 |       25090 |
| 2950016 - 2974983 |       24962 |
| 2975008 - 3000000 |       24894 |
| 3000001 - 3024999 |       25091 |
| 3025024 - 3049991 |       24877 |
| 3050016 - 3074983 |       25089 |
| 3075008 - 3100000 |       25003 |
| 3100001 - 3124999 |       24908 |
| 3125024 - 3149991 |       24913 |
| 3150016 - 3174983 |       25158 |
| 3175008 - 3200000 |       25129 |
| 3200001 - 3224999 |       25112 |
| 3225024 - 3249991 |       25008 |
| 3250016 - 3274983 |       24951 |
| 3275008 - 3300000 |       24864 |
| 3300001 - 3324999 |       25355 |
| 3325024 - 3349991 |       24898 |
| 3350016 - 3374983 |       25097 |
| 3375008 - 3400000 |       25185 |
| 3400001 - 3424999 |       24801 |
| 3425024 - 3449991 |       25133 |
| 3450016 - 3474983 |       25103 |
| 3475008 - 3500000 |       25161 |
| 3500001 - 3524999 |       25177 |
| 3525024 - 3549991 |       25240 |
| 3550016 - 3574983 |       25119 |
| 3575008 - 3600000 |       24993 |
| 3600001 - 3624999 |       24950 |
| 3625024 - 3649991 |       24871 |
| 3650016 - 3674983 |       25117 |
| 3675008 - 3700000 |       25051 |
| 3700001 - 3724999 |       24799 |
| 3725024 - 3749991 |       24984 |
| 3750016 - 3774983 |       24820 |
| 3775008 - 3800000 |       25017 |
| 3800001 - 3824999 |       25143 |
| 3825024 - 3849991 |       24861 |
| 3850016 - 3874983 |       24891 |
| 3875008 - 3900000 |       25146 |
| 3900001 - 3924999 |       24922 |
| 3925024 - 3949991 |       24907 |
| 3950016 - 3974983 |       25393 |
| 3975008 - 4000000 |       24750 |
| 4000001 - 4024999 |       24982 |
| 4025024 - 4049991 |       24896 |
| 4050016 - 4074983 |       24858 |
| 4075008 - 4100000 |       25116 |
| 4100001 - 4124999 |       25030 |
| 4125024 - 4149991 |       24998 |
| 4150016 - 4174983 |       24943 |
| 4175008 - 4200000 |       24856 |
| 4200001 - 4224999 |       25130 |
| 4225024 - 4249991 |       25069 |
| 4250016 - 4274983 |       24963 |
| 4275008 - 4300000 |       25166 |
| 4300001 - 4324999 |       25237 |
| 4325024 - 4349991 |       25049 |
| 4350016 - 4374983 |       25061 |
| 4375008 - 4400000 |       24809 |
| 4400001 - 4424999 |       24922 |
| 4425024 - 4449991 |       24945 |
| 4450016 - 4474983 |       24883 |
| 4475008 - 4500000 |       25012 |
| 4500001 - 4524999 |       24938 |
| 4525024 - 4549991 |       25007 |
| 4550016 - 4574983 |       24935 |
| 4575008 - 4600000 |       25209 |
| 4600001 - 4624999 |       24937 |
| 4625024 - 4649991 |       25197 |
| 4650016 - 4674983 |       25037 |
| 4675008 - 4700000 |       25181 |
| 4700001 - 4724999 |       25209 |
| 4725024 - 4749991 |       25072 |
| 4750016 - 4774983 |       24595 |
| 4775008 - 4800000 |       24941 |
| 4800001 - 4824999 |       24917 |
| 4825024 - 4849991 |       25003 |
| 4850016 - 4874983 |       25210 |
| 4875008 - 4900000 |       25057 |
| 4900001 - 4924999 |       25085 |
| 4925024 - 4949991 |       25073 |
| 4950016 - 4974983 |       24963 |
| 4975008 - 5000000 |       25005 |
| 5000001 - 5024999 |       24803 |
| 5025024 - 5049991 |       25032 |
| 5050016 - 5074983 |       24856 |
| 5075008 - 5100000 |       24943 |
| 5100001 - 5124999 |       25206 |
| 5125024 - 5149991 |       24808 |
| 5150016 - 5174983 |       24867 |
| 5175008 - 5200000 |       24911 |
| 5200001 - 5224999 |       24964 |
| 5225024 - 5249991 |       24945 |
| 5250016 - 5274983 |       24663 |
| 5275008 - 5300000 |       25342 |
| 5300001 - 5324999 |       25326 |
| 5325024 - 5349991 |       24907 |
| 5350016 - 5374983 |       24771 |
| 5375008 - 5400000 |       25058 |
| 5400001 - 5424999 |       25116 |
| 5425024 - 5449991 |       25028 |
| 5450016 - 5474983 |       24974 |
| 5475008 - 5500000 |       24663 |
| 5500001 - 5524999 |       24870 |
| 5525024 - 5549991 |       25081 |
| 5550016 - 5574983 |       25101 |
| 5575008 - 5600000 |       24751 |
| 5600001 - 5624999 |       24972 |
| 5625024 - 5649991 |       24930 |
| 5650016 - 5674983 |       24815 |
| 5675008 - 5700000 |       25401 |
| 5700001 - 5724999 |       24925 |
| 5725024 - 5749991 |       25018 |
| 5750016 - 5774983 |       25219 |
| 5775008 - 5800000 |       25128 |
| 5800001 - 5824999 |       24949 |
| 5825024 - 5849991 |       25201 |
| 5850016 - 5874983 |       25086 |
| 5875008 - 5900000 |       25413 |
| 5900001 - 5924999 |       24968 |
| 5925024 - 5949991 |       25060 |
| 5950016 - 5974983 |       24867 |
| 5975008 - 6000000 |       25123 |        
    )";
    l_orderkey.dataMap = makeDataMapFloat(input);

    l_partkey.identifier = false;
    l_partkey.dataType = "int";
    l_partkey.minValue = 1;
    l_partkey.maxValue = 200000;
    l_partkey.bucketNum = 200;
    l_partkey.count = lineitemRow;
    input = R"(
| 155001 - 156000 |       30072 |
| 67001 - 68000   |       30008 |
| 63001 - 64000   |       30083 |
| 2001 - 3000     |       30174 |
| 24001 - 25000   |       29976 |
| 15001 - 16000   |       29997 |
| 106001 - 107000 |       30073 |
| 4001 - 5000     |       30136 |
| 19001 - 20000   |       30101 |
| 128001 - 129000 |       29747 |
| 29001 - 30000   |       29793 |
| 183001 - 184000 |       30425 |
| 62001 - 63000   |       30060 |
| 88001 - 89000   |       30098 |
| 108001 - 109000 |       30138 |
| 123001 - 124000 |       30135 |
| 37001 - 38000   |       29922 |
| 139001 - 140000 |       29961 |
| 182001 - 183000 |       30175 |
| 145001 - 146000 |       29838 |
| 94001 - 95000   |       29838 |
| 163001 - 164000 |       30088 |
| 151001 - 152000 |       30168 |
| 79001 - 80000   |       30158 |
| 157001 - 158000 |       29858 |
| 82001 - 83000   |       29602 |
| 197001 - 198000 |       29761 |
| 44001 - 45000   |       30034 |
| 85001 - 86000   |       30200 |
| 11001 - 12000   |       29917 |
| 61001 - 62000   |       30120 |
| 60001 - 61000   |       29938 |
| 137001 - 138000 |       30541 |
| 33001 - 34000   |       30364 |
| 89001 - 90000   |       30373 |
| 169001 - 170000 |       29949 |
| 1 - 1000        |       29790 |
| 161001 - 162000 |       29849 |
| 120001 - 121000 |       30036 |
| 119001 - 120000 |       30031 |
| 30001 - 31000   |       30018 |
| 22001 - 23000   |       29987 |
| 126001 - 127000 |       29748 |
| 12001 - 13000   |       30083 |
| 175001 - 176000 |       29891 |
| 186001 - 187000 |       30082 |
| 20001 - 21000   |       29668 |
| 54001 - 55000   |       29902 |
| 59001 - 60000   |       29938 |
| 73001 - 74000   |       29950 |
| 1001 - 2000     |       30016 |
| 115001 - 116000 |       29981 |
| 173001 - 174000 |       29907 |
| 21001 - 22000   |       29927 |
| 87001 - 88000   |       30047 |
| 40001 - 41000   |       29910 |
| 178001 - 179000 |       29984 |
| 7001 - 8000     |       29845 |
| 34001 - 35000   |       30275 |
| 102001 - 103000 |       30133 |
| 104001 - 105000 |       30054 |
| 92001 - 93000   |       30270 |
| 18001 - 19000   |       29992 |
| 64001 - 65000   |       30215 |
| 196001 - 197000 |       29639 |
| 179001 - 180000 |       30308 |
| 45001 - 46000   |       29735 |
| 55001 - 56000   |       30254 |
| 65001 - 66000   |       29807 |
| 96001 - 97000   |       30120 |
| 103001 - 104000 |       30214 |
| 195001 - 196000 |       29899 |
| 135001 - 136000 |       29697 |
| 49001 - 50000   |       30154 |
| 77001 - 78000   |       29947 |
| 109001 - 110000 |       29983 |
| 167001 - 168000 |       30041 |
| 134001 - 135000 |       30139 |
| 46001 - 47000   |       30118 |
| 38001 - 39000   |       29884 |
| 53001 - 54000   |       29667 |
| 118001 - 119000 |       29689 |
| 138001 - 139000 |       30137 |
| 194001 - 195000 |       29763 |
| 10001 - 11000   |       30310 |
| 28001 - 29000   |       30218 |
| 185001 - 186000 |       30029 |
| 39001 - 40000   |       30051 |
| 31001 - 32000   |       30093 |
| 168001 - 169000 |       29960 |
| 69001 - 70000   |       30095 |
| 189001 - 190000 |       30018 |
| 140001 - 141000 |       29821 |
| 114001 - 115000 |       30068 |
| 176001 - 177000 |       30069 |
| 117001 - 118000 |       29983 |
| 164001 - 165000 |       29897 |
| 188001 - 189000 |       30037 |
| 144001 - 145000 |       30294 |
| 35001 - 36000   |       30047 |
| 133001 - 134000 |       29988 |
| 198001 - 199000 |       30379 |
| 136001 - 137000 |       29952 |
| 14001 - 15000   |       29898 |
| 86001 - 87000   |       29885 |
| 36001 - 37000   |       30020 |
| 192001 - 193000 |       30095 |
| 190001 - 191000 |       30087 |
| 91001 - 92000   |       30152 |
| 125001 - 126000 |       29930 |
| 17001 - 18000   |       29756 |
| 147001 - 148000 |       30090 |
| 3001 - 4000     |       30023 |
| 58001 - 59000   |       30060 |
| 166001 - 167000 |       29935 |
| 99001 - 100000  |       29984 |
| 101001 - 102000 |       29786 |
| 171001 - 172000 |       30149 |
| 97001 - 98000   |       30218 |
| 110001 - 111000 |       29729 |
| 141001 - 142000 |       29892 |
| 153001 - 154000 |       30404 |
| 93001 - 94000   |       29959 |
| 56001 - 57000   |       30280 |
| 148001 - 149000 |       29925 |
| 84001 - 85000   |       29890 |
| 9001 - 10000    |       29941 |
| 98001 - 99000   |       30005 |
| 177001 - 178000 |       29993 |
| 41001 - 42000   |       30150 |
| 105001 - 106000 |       29893 |
| 132001 - 133000 |       29849 |
| 150001 - 151000 |       30242 |
| 50001 - 51000   |       29867 |
| 130001 - 131000 |       30021 |
| 146001 - 147000 |       29856 |
| 131001 - 132000 |       30021 |
| 165001 - 166000 |       30006 |
| 174001 - 175000 |       30226 |
| 83001 - 84000   |       30101 |
| 78001 - 79000   |       30040 |
| 158001 - 159000 |       29923 |
| 129001 - 130000 |       30098 |
| 23001 - 24000   |       29963 |
| 5001 - 6000     |       29851 |
| 95001 - 96000   |       29936 |
| 191001 - 192000 |       29737 |
| 142001 - 143000 |       29892 |
| 116001 - 117000 |       29459 |
| 111001 - 112000 |       29997 |
| 16001 - 17000   |       30004 |
| 122001 - 123000 |       29860 |
| 8001 - 9000     |       30075 |
| 152001 - 153000 |       29719 |
| 43001 - 44000   |       29815 |
| 199001 - 200000 |       30043 |
| 156001 - 157000 |       29976 |
| 42001 - 43000   |       29946 |
| 143001 - 144000 |       30170 |
| 193001 - 194000 |       30081 |
| 113001 - 114000 |       30247 |
| 107001 - 108000 |       29908 |
| 124001 - 125000 |       29862 |
| 181001 - 182000 |       29998 |
| 68001 - 69000   |       30003 |
| 32001 - 33000   |       30277 |
| 127001 - 128000 |       30232 |
| 121001 - 122000 |       30106 |
| 70001 - 71000   |       30120 |
| 100001 - 101000 |       30059 |
| 47001 - 48000   |       29836 |
| 74001 - 75000   |       30090 |
| 72001 - 73000   |       29923 |
| 170001 - 171000 |       30184 |
| 172001 - 173000 |       29968 |
| 26001 - 27000   |       29806 |
| 76001 - 77000   |       29831 |
| 13001 - 14000   |       29994 |
| 25001 - 26000   |       30256 |
| 27001 - 28000   |       29983 |
| 48001 - 49000   |       30011 |
| 52001 - 53000   |       29967 |
| 81001 - 82000   |       30216 |
| 149001 - 150000 |       29876 |
| 75001 - 76000   |       29944 |
| 71001 - 72000   |       29911 |
| 187001 - 188000 |       30169 |
| 6001 - 7000     |       29717 |
| 184001 - 185000 |       29960 |
| 80001 - 81000   |       29872 |
| 66001 - 67000   |       29938 |
| 90001 - 91000   |       29962 |
| 162001 - 163000 |       30289 |
| 159001 - 160000 |       30240 |
| 112001 - 113000 |       29875 |
| 154001 - 155000 |       29756 |
| 180001 - 181000 |       30155 |
| 160001 - 161000 |       30008 |
| 51001 - 52000   |       30077 |
| 57001 - 58000   |       29832 |
    )";
    l_partkey.dataMap = makeDataMapFloat(input);

    l_quantity.identifier = false;
    l_quantity.dataType = "int";
    l_quantity.minValue = 1;
    l_quantity.maxValue = 50;
    l_quantity.bucketNum = 50;
    l_quantity.count = lineitemRow;
    input = R"(
|       1.00 | 120401 |
|       2.00 | 119460 |
|       3.00 | 120047 |
|       4.00 | 119621 |
|       5.00 | 119509 |
|       6.00 | 119432 |
|       7.00 | 120114 |
|       8.00 | 120153 |
|       9.00 | 120503 |
|      10.00 | 119700 |
|      11.00 | 119552 |
|      12.00 | 119913 |
|      13.00 | 119757 |
|      14.00 | 119420 |
|      15.00 | 120324 |
|      16.00 | 120518 |
|      17.00 | 120086 |
|      18.00 | 119429 |
|      19.00 | 120363 |
|      20.00 | 120114 |
|      21.00 | 119926 |
|      22.00 | 119887 |
|      23.00 | 120593 |
|      24.00 | 119971 |
|      25.00 | 120635 |
|      26.00 | 119702 |
|      27.00 | 120013 |
|      28.00 | 120307 |
|      29.00 | 119907 |
|      30.00 | 119671 |
|      31.00 | 119963 |
|      32.00 | 120630 |
|      33.00 | 120127 |
|      34.00 | 119966 |
|      35.00 | 120753 |
|      36.00 | 120372 |
|      37.00 | 120070 |
|      38.00 | 120221 |
|      39.00 | 119851 |
|      40.00 | 119977 |
|      41.00 | 120447 |
|      42.00 | 120372 |
|      43.00 | 119886 |
|      44.00 | 120024 |
|      45.00 | 119638 |
|      46.00 | 120179 |
|      47.00 | 120050 |
|      48.00 | 120191 |
|      49.00 | 119624 |
|      50.00 | 119846 | 
    )";
    l_quantity.dataMap = makeDataMap(input);

    l_extendedprice.identifier = false;
    l_extendedprice.count = lineitemRow;
    l_extendedprice.dataType = "float";
    l_extendedprice.minValue = 901;
    l_extendedprice.maxValue = 105050;
    l_extendedprice.bucketNum = 209;
    input = R"(
| 21001.00 - 21500.88   |       41509 |
| 45501.12 - 46000.99   |       42097 |
| 13001.04 - 13500.96   |       42764 |
| 28501.00 - 29000.97   |       41724 |
| 22501.00 - 23000.92   |       41757 |
| 49501.00 - 50000.96   |       40125 |
| 44501.04 - 45000.90   |       41895 |
| 54001.00 - 54500.94   |       37086 |
| 46501.00 - 47000.98   |       41394 |
| 39501.13 - 40000.95   |       41994 |
| 2502.30 - 3000.98     |       33075 |
| 32501.11 - 33000.99   |       42252 |
| 30501.02 - 31000.97   |       41952 |
| 23501.01 - 24000.99   |       41342 |
| 50501.00 - 51000.84   |       39955 |
| 73001.10 - 73500.70   |       19177 |
| 61501.12 - 62000.90   |       29419 |
| 13501.04 - 14000.98   |       42161 |
| 11501.00 - 12000.96   |       42560 |
| 81501.42 - 82000.90   |       12644 |
| 31501.12 - 32000.96   |       41492 |
| 73501.11 - 74000.90   |       19076 |
| 43001.01 - 43500.93   |       41488 |
| 6001.00 - 6499.08     |       36980 |
| 47001.00 - 47500.86   |       41038 |
| 64501.15 - 65000.91   |       26854 |
| 2001.90 - 2500.70     |       29928 |
| 6501.00 - 7000.70     |       39342 |
| 79001.24 - 79500.98   |       14398 |
| 9001.04 - 9500.96     |       43099 |
| 40001.00 - 40500.95   |       41721 |
| 7501.02 - 8000.80     |       44980 |
| 75501.12 - 75999.62   |       17031 |
| 17501.04 - 18000.96   |       41723 |
| 9501.00 - 10000.90    |       43342 |
| 32001.05 - 32500.94   |       41318 |
| 68001.12 - 68500.80   |       23809 |
| 29001.06 - 29500.96   |       41323 |
| 65501.04 - 66000.97   |       25902 |
| 75001.05 - 75500.88   |       17830 |
| 62001.06 - 62500.93   |       29120 |
| 70501.08 - 71000.93   |       21370 |
| 78001.00 - 78496.32   |       15089 |
| 84004.20 - 84500.83   |       10739 |
| 53501.00 - 54000.96   |       37331 |
| 82501.30 - 82999.60   |       11991 |
| 48001.00 - 48500.92   |       41325 |
| 63001.01 - 63500.80   |       27865 |
| 40501.08 - 41000.96   |       41311 |
| 42501.01 - 43000.86   |       41639 |
| 39001.00 - 39500.82   |       41604 |
| 27001.00 - 27500.98   |       41720 |
| 35001.05 - 35500.96   |       42206 |
| 64001.12 - 64500.92   |       27115 |
| 8001.28 - 8500.17     |       38773 |
| 66001.34 - 66500.94   |       25330 |
| 35501.18 - 36000.99   |       41499 |
| 57501.20 - 58000.83   |       33607 |
| 88013.25 - 88500.96   |        7857 |
| 34001.00 - 34500.96   |       41678 |
| 52501.00 - 53000.92   |       38483 |
| 58501.00 - 59000.98   |       32724 |
| 37501.10 - 38000.88   |       41733 |
| 22001.00 - 22500.96   |       41835 |
| 4001.80 - 4500.88     |       34671 |
| 8503.00 - 9000.96     |       39984 |
| 16001.04 - 16500.90   |       41253 |
| 1501.40 - 2000.99     |       60185 |
| 18001.08 - 18500.40   |       41924 |
| 5501.08 - 6000.95     |       46881 |
| 61001.16 - 61500.96   |       30011 |
| 49001.00 - 49500.90   |       41102 |
| 25001.00 - 25500.86   |       41445 |
| 19001.00 - 19500.91   |       41788 |
| 56001.00 - 56500.92   |       34821 |
| 23001.00 - 23500.97   |       41903 |
| 12001.00 - 12500.96   |       41237 |
| 11001.00 - 11500.98   |       42911 |
| 27501.00 - 28000.98   |       41194 |
| 43501.00 - 44000.95   |       41861 |
| 50001.00 - 50500.80   |       39937 |
| 51501.00 - 52000.96   |       39582 |
| 63501.16 - 64000.80   |       27571 |
| 17001.02 - 17500.92   |       41421 |
| 70001.04 - 70500.98   |       21519 |
| 44001.00 - 44500.95   |       41646 |
| 16501.03 - 17000.94   |       41505 |
| 10501.00 - 11000.99   |       40674 |
| 31001.00 - 31500.90   |       41811 |
| 30001.05 - 30500.86   |       41377 |
| 69501.08 - 70000.98   |       22270 |
| 81001.83 - 81500.96   |       12966 |
| 25501.00 - 26000.99   |       41564 |
| 78503.49 - 79000.85   |       15350 |
| 59501.19 - 60000.91   |       31545 |
| 26501.00 - 27000.96   |       41895 |
| 46001.00 - 46500.97   |       41418 |
| 38501.05 - 39000.96   |       41592 |
| 20001.00 - 20500.96   |       41601 |
| 34501.04 - 35000.91   |       42392 |
| 57001.00 - 57500.97   |       34159 |
| 33001.02 - 33500.80   |       41990 |
| 69001.16 - 69500.70   |       22369 |
| 38001.02 - 38500.80   |       41928 |
| 33501.09 - 34000.92   |       41573 |
| 58001.20 - 58500.80   |       32809 |
| 66501.12 - 67000.84   |       24932 |
| 51001.00 - 51500.96   |       40144 |
| 21501.00 - 22000.88   |       41591 |
| 3001.00 - 3499.68     |       46713 |
| 72501.12 - 73000.98   |       19636 |
| 60001.02 - 60500.88   |       30585 |
| 68501.09 - 69000.96   |       22882 |
| 18503.16 - 19000.95   |       41289 |
| 67501.20 - 68000.96   |       23509 |
| 14501.08 - 15000.90   |       40817 |
| 48501.00 - 49000.98   |       40745 |
| 20501.00 - 21000.84   |       41917 |
| 26001.00 - 26500.95   |       41736 |
| 19501.00 - 20000.89   |       41875 |
| 55001.00 - 55500.90   |       36520 |
| 60501.00 - 61000.80   |       30506 |
| 54501.00 - 55000.96   |       36528 |
| 83013.30 - 83500.84   |       11276 |
| 3501.21 - 4000.36     |       49968 |
| 4501.20 - 5000.96     |       38076 |
| 84501.00 - 85000.96   |       10417 |
| 92003.56 - 92497.00   |        5314 |
| 28001.00 - 28500.94   |       41993 |
| 42001.20 - 42500.95   |       41623 |
| 89501.40 - 90000.77   |        7281 |
| 1001.00 - 1500.60     |       57249 |
| 53001.00 - 53500.94   |       38211 |
| 56501.05 - 57000.94   |       34812 |
| 82001.37 - 82500.96   |       12203 |
| 24501.00 - 25000.96   |       42077 |
| 97004.16 - 97499.50   |        2405 |
| 36001.00 - 36500.97   |       41964 |
| 72001.09 - 72500.96   |       20150 |
| 41001.12 - 41500.94   |       41908 |
| 96523.63 - 96999.50   |        2547 |
| 12501.02 - 13000.91   |       40552 |
| 29501.04 - 30000.97   |       41341 |
| 77001.39 - 77500.85   |       16121 |
| 15502.41 - 16000.96   |       41920 |
| 62501.01 - 63000.64   |       28656 |
| 47501.00 - 48000.96   |       41415 |
| 65001.15 - 65500.98   |       26015 |
| 71001.00 - 71499.84   |       20909 |
| 85001.10 - 85499.55   |       10298 |
| 14001.00 - 14500.97   |       41368 |
| 77501.28 - 78000.82   |       15442 |
| 55501.00 - 56000.98   |       35644 |
| 15001.20 - 15500.80   |       41904 |
| 901.00 - 1000.09      |        3137 |
| 5001.00 - 5500.95     |       44218 |
| 36501.30 - 37000.80   |       41845 |
| 94505.76 - 94999.50   |        3871 |
| 90505.80 - 91000.80   |        6381 |
| 24001.00 - 24500.75   |       41901 |
| 52001.00 - 52500.96   |       38660 |
| 71502.90 - 72000.89   |       20636 |
| 76003.75 - 76500.96   |       16895 |
| 88501.24 - 88993.50   |        7687 |
| 10001.20 - 10500.90   |       40360 |
| 59001.12 - 59500.80   |       32132 |
| 41501.07 - 42000.93   |       41653 |
| 92501.71 - 93000.53   |        5090 |
| 98013.12 - 98499.50   |        1728 |
| 37001.07 - 37500.96   |       40984 |
| 45001.06 - 45500.88   |       41892 |
| 95003.16 - 95500.71   |        3543 |
| 87008.32 - 87500.77   |        8836 |
| 97504.61 - 97999.51   |        2091 |
| 100511.52 - 100999.50 |         789 |
| 74001.03 - 74500.86   |       18096 |
| 67001.08 - 67500.86   |       23956 |
| 85502.50 - 86000.60   |        9937 |
| 87501.26 - 87999.56   |        8531 |
| 83501.27 - 83999.58   |       11340 |
| 76501.04 - 77000.96   |       16775 |
| 7001.50 - 7500.96     |       43097 |
| 74501.07 - 75000.96   |       18288 |
| 86501.36 - 86994.18   |        9099 |
| 103048.00 - 103499.50 |         212 |
| 80001.00 - 80500.66   |       13882 |
| 80501.13 - 81000.92   |       13219 |
| 102507.51 - 102999.50 |         260 |
| 93001.02 - 93500.64   |        4893 |
| 86001.07 - 86500.92   |        9492 |
| 96001.08 - 96499.50   |        2808 |
| 93501.12 - 93999.53   |        4441 |
| 91001.28 - 91496.00   |        5999 |
| 90001.24 - 90500.06   |        6617 |
| 100006.06 - 100499.50 |        1023 |
| 102017.02 - 102499.50 |         408 |
| 99022.08 - 99499.50   |        1387 |
| 79501.05 - 80000.83   |       14327 |
| 95501.18 - 95999.52   |        3156 |
| 89002.18 - 89500.95   |        7494 |
| 99502.56 - 99999.50   |        1200 |
| 98534.59 - 98999.50   |        1536 |
| 91501.48 - 91999.54   |        5783 |
| 94004.55 - 94499.00   |        4081 |
| 101526.53 - 101999.50 |         507 |
| 103548.50 - 103999.50 |         134 |
| 101036.04 - 101499.50 |         698 |
| 104549.50 - 104949.50 |          24 |
| 104049.00 - 104499.50 |          67 |
    )";
    l_extendedprice.dataMap = makeDataMapFloat(input);

    l_discount.identifier = false;
    l_discount.dataType = "float";
    l_discount.minValue = 0;
    l_discount.maxValue = 0.1;
    l_discount.count = lineitemRow;
    l_discount.bucketNum = 11;
    input = R"(
|       0.00 | 544886 |
|       0.01 | 545834 |
|       0.02 | 546173 |
|       0.03 | 545293 |
|       0.04 | 545545 |
|       0.05 | 546395 |
|       0.06 | 544970 |
|       0.07 | 546192 |
|       0.08 | 544803 |
|       0.09 | 545309 |
|       0.10 | 545815 |  
    )";
    l_discount.dataMap = makeDataMap(input);

    l_tax.identifier = false;
    l_tax.dataType = "float";
    l_tax.minValue = 0;
    l_tax.maxValue = 0.08;
    l_tax.count = lineitemRow;
    l_tax.bucketNum = 9;
    input = R"(
|  0.00 | 665254 |
|  0.01 | 666678 |
|  0.02 | 667458 |
|  0.03 | 667175 |
|  0.04 | 666908 |
|  0.05 | 665972 |
|  0.06 | 667463 |
|  0.07 | 666878 |
|  0.08 | 667429 |      
    )";
    l_tax.dataMap = makeDataMap(input);

    l_returnflag.identifier = false;
    l_returnflag.dataType = "string";
    l_returnflag.count = lineitemRow;
    l_returnflag.bucketNum = 3;
    input = R"(
| A            | 1478493 |
| N            | 3043852 |
| R            | 1478870 |    
    )";
    l_returnflag.dataMap = makeDataMap(input);

    l_linestatus.identifier = false;
    l_linestatus.dataType = "string";
    l_linestatus.count = lineitemRow;
    l_linestatus.bucketNum = 2;
    input = R"(
| F            | 2996217 |
| O            | 3004998 |
    )";

    l_shipdate.identifier = false;
    l_shipdate.dataType = "date";
    l_shipdate.count = lineitemRow;
    l_shipdate.bucketNum = 253;
    l_shipdate.minValue = 1019938;
    l_shipdate.maxValue = 1023361;
    input = R"(
| 1996-03-11 - 1996-03-20 |       24879 |
| 1996-04-10 - 1996-04-19 |       24792 |
| 1996-01-21 - 1996-01-30 |       24936 |
| 1996-04-20 - 1996-04-29 |       24994 |
| 1996-03-21 - 1996-03-30 |       24776 |
| 1997-01-25 - 1997-02-03 |       25026 |
| 1994-01-31 - 1994-02-09 |       24868 |
| 1993-11-02 - 1993-11-11 |       25070 |
| 1994-01-11 - 1994-01-20 |       24757 |
| 1993-12-02 - 1993-12-11 |       24997 |
| 1993-12-12 - 1993-12-21 |       24977 |
| 1993-10-23 - 1993-11-01 |       24878 |
| 1996-01-01 - 1996-01-10 |       24746 |
| 1994-10-28 - 1994-11-06 |       25188 |
| 1994-10-08 - 1994-10-17 |       24856 |
| 1994-07-30 - 1994-08-08 |       24712 |
| 1992-04-21 - 1992-04-30 |       23870 |
| 1996-04-30 - 1996-05-09 |       24656 |
| 1996-01-31 - 1996-02-09 |       24815 |
| 1996-01-11 - 1996-01-20 |       24936 |
| 1996-02-10 - 1996-02-19 |       24597 |
| 1995-10-23 - 1995-11-01 |       24981 |
| 1995-08-14 - 1995-08-23 |       24998 |
| 1995-08-04 - 1995-08-13 |       25111 |
| 1995-08-24 - 1995-09-02 |       24947 |
| 1995-07-15 - 1995-07-24 |       25102 |
| 1998-10-17 - 1998-10-26 |        8573 |
| 1998-10-07 - 1998-10-16 |       10579 |
| 1998-10-27 - 1998-11-05 |        6469 |
| 1996-02-20 - 1996-02-29 |       24742 |
| 1995-11-22 - 1995-12-01 |       24974 |
| 1995-11-02 - 1995-11-11 |       25079 |
| 1992-07-20 - 1992-07-29 |       24635 |
| 1992-06-30 - 1992-07-09 |       24625 |
| 1992-07-10 - 1992-07-19 |       24770 |
| 1996-09-27 - 1996-10-06 |       25239 |
| 1996-11-06 - 1996-11-15 |       25188 |
| 1996-10-27 - 1996-11-05 |       25000 |
| 1996-09-17 - 1996-09-26 |       25249 |
| 1996-10-17 - 1996-10-26 |       25257 |
| 1996-12-06 - 1996-12-15 |       25271 |
| 1994-09-28 - 1994-10-07 |       24859 |
| 1995-04-16 - 1995-04-25 |       25233 |
| 1995-07-05 - 1995-07-14 |       25142 |
| 1994-02-10 - 1994-02-19 |       24887 |
| 1994-02-20 - 1994-03-01 |       24927 |
| 1997-04-15 - 1997-04-24 |       24851 |
| 1997-02-14 - 1997-02-23 |       25298 |
| 1997-03-16 - 1997-03-25 |       25108 |
| 1998-06-29 - 1998-07-08 |       24854 |
| 1998-06-19 - 1998-06-28 |       25078 |
| 1998-08-08 - 1998-08-17 |       23276 |
| 1994-08-09 - 1994-08-18 |       24859 |
| 1994-08-19 - 1994-08-28 |       24920 |
| 1994-06-30 - 1994-07-09 |       25044 |
| 1994-05-31 - 1994-06-09 |       24908 |
| 1994-03-02 - 1994-03-11 |       25116 |
| 1994-01-21 - 1994-01-30 |       24875 |
| 1994-03-12 - 1994-03-21 |       25068 |
| 1998-04-10 - 1998-04-19 |       24973 |
| 1998-05-20 - 1998-05-29 |       25358 |
| 1998-02-19 - 1998-02-28 |       24898 |
| 1998-01-20 - 1998-01-29 |       25010 |
| 1998-03-01 - 1998-03-10 |       24728 |
| 1994-07-10 - 1994-07-19 |       25026 |
| 1993-03-27 - 1993-04-05 |       25099 |
| 1993-04-06 - 1993-04-15 |       24898 |
| 1993-05-06 - 1993-05-15 |       24603 |
| 1994-12-17 - 1994-12-26 |       24776 |
| 1994-11-27 - 1994-12-06 |       24885 |
| 1994-12-27 - 1995-01-05 |       24765 |
| 1994-10-18 - 1994-10-27 |       24404 |
| 1994-05-11 - 1994-05-20 |       24882 |
| 1994-05-01 - 1994-05-10 |       25051 |
| 1994-04-11 - 1994-04-20 |       25088 |
| 1998-04-30 - 1998-05-09 |       25164 |
| 1996-06-19 - 1996-06-28 |       24894 |
| 1996-05-10 - 1996-05-19 |       24906 |
| 1997-07-24 - 1997-08-02 |       25167 |
| 1997-08-03 - 1997-08-12 |       25267 |
| 1997-05-25 - 1997-06-03 |       25261 |
| 1996-10-07 - 1996-10-16 |       25011 |
| 1996-09-07 - 1996-09-16 |       25132 |
| 1996-07-29 - 1996-08-07 |       24887 |
| 1992-08-29 - 1992-09-07 |       24728 |
| 1993-02-15 - 1993-02-24 |       25025 |
| 1992-11-17 - 1992-11-26 |       24489 |
| 1993-01-06 - 1993-01-15 |       24652 |
| 1993-01-26 - 1993-02-04 |       24918 |
| 1992-12-07 - 1992-12-16 |       24717 |
| 1992-08-09 - 1992-08-18 |       24735 |
| 1992-06-20 - 1992-06-29 |       24954 |
| 1994-09-08 - 1994-09-17 |       25094 |
| 1994-09-18 - 1994-09-27 |       25179 |
| 1993-07-05 - 1993-07-14 |       25100 |
| 1993-08-24 - 1993-09-02 |       24684 |
| 1993-06-15 - 1993-06-24 |       24992 |
| 1997-12-21 - 1997-12-30 |       24761 |
| 1997-12-01 - 1997-12-10 |       24863 |
| 1998-03-21 - 1998-03-30 |       25183 |
| 1992-08-19 - 1992-08-28 |       24815 |
| 1992-07-30 - 1992-08-08 |       24891 |
| 1995-11-12 - 1995-11-21 |       25038 |
| 1997-03-06 - 1997-03-15 |       25092 |
| 1994-12-07 - 1994-12-16 |       24892 |
| 1997-09-12 - 1997-09-21 |       24789 |
| 1997-11-11 - 1997-11-20 |       24757 |
| 1997-12-11 - 1997-12-20 |       25194 |
| 1997-09-22 - 1997-10-01 |       24956 |
| 1992-12-27 - 1993-01-05 |       24611 |
| 1992-12-17 - 1992-12-26 |       24837 |
| 1992-11-27 - 1992-12-06 |       24581 |
| 1992-10-28 - 1992-11-06 |       24664 |
| 1993-02-25 - 1993-03-06 |       24945 |
| 1993-04-26 - 1993-05-05 |       25008 |
| 1995-12-22 - 1995-12-31 |       24658 |
| 1998-01-30 - 1998-02-08 |       24745 |
| 1998-03-11 - 1998-03-20 |       24882 |
| 1998-02-09 - 1998-02-18 |       24797 |
| 1993-09-13 - 1993-09-22 |       25088 |
| 1993-11-22 - 1993-12-01 |       24912 |
| 1993-08-14 - 1993-08-23 |       24871 |
| 1992-05-21 - 1992-05-30 |       24664 |
| 1992-05-01 - 1992-05-10 |       24573 |
| 1992-05-11 - 1992-05-20 |       24698 |
| 1994-01-01 - 1994-01-10 |       24573 |
| 1993-04-16 - 1993-04-25 |       25066 |
| 1995-07-25 - 1995-08-03 |       24635 |
| 1995-06-05 - 1995-06-14 |       24973 |
| 1995-05-06 - 1995-05-15 |       25122 |
| 1997-12-31 - 1998-01-09 |       24874 |
| 1998-01-10 - 1998-01-19 |       25397 |
| 1996-06-09 - 1996-06-18 |       25022 |
| 1994-08-29 - 1994-09-07 |       25202 |
| 1995-09-23 - 1995-10-02 |       25306 |
| 1995-06-15 - 1995-06-24 |       25104 |
| 1995-05-26 - 1995-06-04 |       25422 |
| 1995-09-13 - 1995-09-22 |       25397 |
| 1993-03-17 - 1993-03-26 |       24635 |
| 1993-06-05 - 1993-06-14 |       24659 |
| 1993-05-16 - 1993-05-25 |       24488 |
| 1995-12-02 - 1995-12-11 |       25188 |
| 1994-03-22 - 1994-03-31 |       25051 |
| 1993-11-12 - 1993-11-21 |       24973 |
| 1994-11-17 - 1994-11-26 |       24987 |
| 1998-06-09 - 1998-06-18 |       24890 |
| 1993-10-13 - 1993-10-22 |       25213 |
| 1993-10-03 - 1993-10-12 |       25043 |
| 1997-03-26 - 1997-04-04 |       24721 |
| 1993-07-15 - 1993-07-24 |       24682 |
| 1993-09-03 - 1993-09-12 |       24819 |
| 1993-09-23 - 1993-10-02 |       24995 |
| 1996-03-01 - 1996-03-10 |       25142 |
| 1994-07-20 - 1994-07-29 |       24682 |
| 1997-06-04 - 1997-06-13 |       24735 |
| 1994-04-01 - 1994-04-10 |       24774 |
| 1994-05-21 - 1994-05-30 |       24830 |
| 1994-06-10 - 1994-06-19 |       25001 |
| 1992-02-11 - 1992-02-20 |        9403 |
| 1992-03-22 - 1992-03-31 |       17727 |
| 1992-10-18 - 1992-10-27 |       25032 |
| 1993-08-04 - 1993-08-13 |       25032 |
| 1994-11-07 - 1994-11-16 |       24689 |
| 1995-01-06 - 1995-01-15 |       24836 |
| 1992-06-10 - 1992-06-19 |       24804 |
| 1992-04-11 - 1992-04-20 |       21634 |
| 1994-06-20 - 1994-06-29 |       24907 |
| 1995-09-03 - 1995-09-12 |       25224 |
| 1995-05-16 - 1995-05-25 |       25035 |
| 1996-03-31 - 1996-04-09 |       24881 |
| 1996-06-29 - 1996-07-08 |       24849 |
| 1996-12-26 - 1997-01-04 |       25192 |
| 1995-01-26 - 1995-02-04 |       25139 |
| 1995-03-27 - 1995-04-05 |       25114 |
| 1995-02-15 - 1995-02-24 |       25032 |
| 1992-05-31 - 1992-06-09 |       24811 |
| 1992-04-01 - 1992-04-10 |       19729 |
| 1996-05-20 - 1996-05-29 |       24947 |
| 1995-04-06 - 1995-04-15 |       25379 |
| 1997-05-05 - 1997-05-14 |       25122 |
| 1997-04-25 - 1997-05-04 |       25088 |
| 1998-05-30 - 1998-06-08 |       24604 |
| 1995-02-05 - 1995-02-14 |       24889 |
| 1993-12-22 - 1993-12-31 |       24875 |
| 1995-06-25 - 1995-07-04 |       24798 |
| 1996-11-26 - 1996-12-05 |       25312 |
| 1996-12-16 - 1996-12-25 |       24967 |
| 1997-01-05 - 1997-01-14 |       25126 |
| 1997-06-24 - 1997-07-03 |       24966 |
| 1997-06-14 - 1997-06-23 |       24951 |
| 1997-08-23 - 1997-09-01 |       25002 |
| 1996-08-18 - 1996-08-27 |       25219 |
| 1995-03-17 - 1995-03-26 |       25356 |
| 1995-03-07 - 1995-03-16 |       25114 |
| 1998-07-29 - 1998-08-07 |       24756 |
| 1998-07-09 - 1998-07-18 |       24731 |
| 1997-07-14 - 1997-07-23 |       24962 |
| 1997-08-13 - 1997-08-22 |       25100 |
| 1997-01-15 - 1997-01-24 |       24967 |
| 1996-05-30 - 1996-06-08 |       24942 |
| 1996-07-19 - 1996-07-28 |       24766 |
| 1997-04-05 - 1997-04-14 |       24789 |
| 1997-02-24 - 1997-03-05 |       24968 |
| 1992-09-28 - 1992-10-07 |       25060 |
| 1998-03-31 - 1998-04-09 |       24788 |
| 1993-03-07 - 1993-03-16 |       25038 |
| 1997-02-04 - 1997-02-13 |       24789 |
| 1996-08-28 - 1996-09-06 |       24856 |
| 1995-01-16 - 1995-01-25 |       24926 |
| 1992-09-08 - 1992-09-17 |       24550 |
| 1997-05-15 - 1997-05-24 |       24840 |
| 1998-04-20 - 1998-04-29 |       25040 |
| 1997-10-02 - 1997-10-11 |       24991 |
| 1992-11-07 - 1992-11-16 |       25175 |
| 1993-01-16 - 1993-01-25 |       24759 |
| 1995-02-25 - 1995-03-06 |       25012 |
| 1997-11-21 - 1997-11-30 |       24807 |
| 1997-10-12 - 1997-10-21 |       24892 |
| 1995-12-12 - 1995-12-21 |       24820 |
| 1998-09-07 - 1998-09-16 |       16937 |
| 1998-07-19 - 1998-07-28 |       25143 |
| 1998-09-27 - 1998-10-06 |       12793 |
| 1998-08-18 - 1998-08-27 |       20982 |
| 1993-06-25 - 1993-07-04 |       24759 |
| 1995-04-26 - 1995-05-05 |       25034 |
| 1992-03-12 - 1992-03-21 |       15703 |
| 1996-07-09 - 1996-07-18 |       24868 |
| 1996-08-08 - 1996-08-17 |       24765 |
| 1994-04-21 - 1994-04-30 |       25324 |
| 1995-10-13 - 1995-10-22 |       25150 |
| 1992-09-18 - 1992-09-27 |       24749 |
| 1993-05-26 - 1993-06-04 |       24474 |
| 1998-11-06 - 1998-11-15 |        4487 |
| 1995-10-03 - 1995-10-12 |       25244 |
| 1992-10-08 - 1992-10-17 |       24781 |
| 1997-11-01 - 1997-11-10 |       24844 |
| 1997-07-04 - 1997-07-13 |       25078 |
| 1992-02-21 - 1992-03-01 |       11242 |
| 1992-03-02 - 1992-03-11 |       13581 |
| 1998-08-28 - 1998-09-06 |       18954 |
| 1998-11-16 - 1998-11-25 |        2379 |
| 1998-09-17 - 1998-09-26 |       14613 |
| 1996-11-16 - 1996-11-25 |       24979 |
| 1993-02-05 - 1993-02-14 |       25086 |
| 1992-01-22 - 1992-01-31 |        5212 |
| 1992-01-12 - 1992-01-21 |        3228 |
| 1992-02-01 - 1992-02-10 |        7322 |
| 1997-09-02 - 1997-09-11 |       25037 |
| 1997-10-22 - 1997-10-31 |       24658 |
| 1993-07-25 - 1993-08-03 |       25076 |
| 1998-05-10 - 1998-05-19 |       24940 |
| 1998-11-26 - 1998-12-01 |         416 |
| 1992-01-02 - 1992-01-11 |        1084 |
    )";
    l_shipdate.dataMap = makeDataMapDate(input);

    l_commitdate.identifier = false;
    l_commitdate.count = lineitemRow;
    l_commitdate.dataType = "date";
    l_commitdate.minValue = 1019967;
    l_commitdate.maxValue = 1023327;
    l_commitdate.bucketNum = 247;
    input = R"(
| 1996-02-09 - 1996-02-18 |       24831 |
| 1996-02-19 - 1996-02-28 |       24696 |
| 1996-02-29 - 1996-03-09 |       24836 |
| 1996-03-30 - 1996-04-08 |       24789 |
| 1996-03-10 - 1996-03-19 |       24857 |
| 1996-01-30 - 1996-02-08 |       24862 |
| 1997-01-14 - 1997-01-23 |       25183 |
| 1993-12-31 - 1994-01-09 |       24910 |
| 1993-12-11 - 1993-12-20 |       25037 |
| 1993-11-21 - 1993-11-30 |       25200 |
| 1994-01-10 - 1994-01-19 |       24932 |
| 1995-12-11 - 1995-12-20 |       25062 |
| 1994-08-28 - 1994-09-06 |       25056 |
| 1994-09-17 - 1994-09-26 |       24826 |
| 1994-10-07 - 1994-10-16 |       24813 |
| 1992-05-10 - 1992-05-19 |       24866 |
| 1996-03-20 - 1996-03-29 |       25167 |
| 1995-08-23 - 1995-09-01 |       25237 |
| 1995-10-02 - 1995-10-11 |       25356 |
| 1995-09-22 - 1995-10-01 |       25323 |
| 1995-08-13 - 1995-08-22 |       25380 |
| 1993-12-21 - 1993-12-30 |       25051 |
| 1994-01-20 - 1994-01-29 |       24747 |
| 1998-09-06 - 1998-09-15 |       20976 |
| 1998-10-16 - 1998-10-25 |        4703 |
| 1998-09-16 - 1998-09-25 |       17023 |
| 1995-12-31 - 1996-01-09 |       25055 |
| 1995-12-21 - 1995-12-30 |       24821 |
| 1996-01-10 - 1996-01-19 |       24898 |
| 1996-01-20 - 1996-01-29 |       24743 |
| 1992-07-29 - 1992-08-07 |       24628 |
| 1992-08-18 - 1992-08-27 |       24852 |
| 1992-06-29 - 1992-07-08 |       24614 |
| 1996-11-15 - 1996-11-24 |       25172 |
| 1996-12-15 - 1996-12-24 |       24954 |
| 1996-10-16 - 1996-10-25 |       25269 |
| 1996-11-05 - 1996-11-14 |       25255 |
| 1995-04-25 - 1995-05-04 |       24969 |
| 1995-06-04 - 1995-06-13 |       25073 |
| 1995-05-05 - 1995-05-14 |       24870 |
| 1994-03-11 - 1994-03-20 |       25278 |
| 1994-03-01 - 1994-03-10 |       25416 |
| 1997-01-24 - 1997-02-02 |       24929 |
| 1997-02-13 - 1997-02-22 |       25102 |
| 1997-02-03 - 1997-02-12 |       24950 |
| 1998-05-29 - 1998-06-07 |       24688 |
| 1998-07-08 - 1998-07-17 |       24780 |
| 1998-05-19 - 1998-05-28 |       24985 |
| 1998-06-18 - 1998-06-27 |       25024 |
| 1994-08-08 - 1994-08-17 |       24927 |
| 1994-06-29 - 1994-07-08 |       24665 |
| 1994-07-19 - 1994-07-28 |       25086 |
| 1994-07-29 - 1994-08-07 |       25123 |
| 1994-02-19 - 1994-02-28 |       24553 |
| 1994-02-09 - 1994-02-18 |       24868 |
| 1998-04-19 - 1998-04-28 |       24917 |
| 1998-03-30 - 1998-04-08 |       25096 |
| 1998-03-20 - 1998-03-29 |       24904 |
| 1994-05-20 - 1994-05-29 |       25018 |
| 1993-03-26 - 1993-04-04 |       25061 |
| 1993-02-24 - 1993-03-05 |       24814 |
| 1994-10-17 - 1994-10-26 |       24995 |
| 1994-12-06 - 1994-12-15 |       24675 |
| 1994-11-16 - 1994-11-25 |       24795 |
| 1994-11-06 - 1994-11-15 |       24986 |
| 1994-05-30 - 1994-06-08 |       24886 |
| 1994-05-10 - 1994-05-19 |       24803 |
| 1994-04-10 - 1994-04-19 |       25164 |
| 1998-05-09 - 1998-05-18 |       25144 |
| 1998-04-09 - 1998-04-18 |       25135 |
| 1998-04-29 - 1998-05-08 |       25202 |
| 1996-05-19 - 1996-05-28 |       24876 |
| 1996-04-29 - 1996-05-08 |       24800 |
| 1996-04-19 - 1996-04-28 |       24953 |
| 1997-08-02 - 1997-08-11 |       25049 |
| 1997-07-23 - 1997-08-01 |       25196 |
| 1997-07-13 - 1997-07-22 |       25182 |
| 1996-07-18 - 1996-07-27 |       24778 |
| 1996-09-16 - 1996-09-25 |       25105 |
| 1996-07-28 - 1996-08-06 |       25231 |
| 1993-01-15 - 1993-01-24 |       25053 |
| 1992-12-16 - 1992-12-25 |       24516 |
| 1993-02-14 - 1993-02-23 |       24769 |
| 1992-12-26 - 1993-01-04 |       24735 |
| 1993-01-25 - 1993-02-03 |       25066 |
| 1993-01-05 - 1993-01-14 |       24779 |
| 1992-07-19 - 1992-07-28 |       24700 |
| 1992-07-09 - 1992-07-18 |       24667 |
| 1992-06-09 - 1992-06-18 |       24726 |
| 1993-08-03 - 1993-08-12 |       24738 |
| 1993-08-13 - 1993-08-22 |       24937 |
| 1993-08-23 - 1993-09-01 |       25248 |
| 1998-02-18 - 1998-02-27 |       24745 |
| 1998-01-09 - 1998-01-18 |       25068 |
| 1998-01-29 - 1998-02-07 |       24859 |
| 1992-05-30 - 1992-06-08 |       24832 |
| 1995-11-21 - 1995-11-30 |       25039 |
| 1995-11-11 - 1995-11-20 |       25018 |
| 1997-03-05 - 1997-03-14 |       24887 |
| 1995-06-14 - 1995-06-23 |       24747 |
| 1997-11-10 - 1997-11-19 |       24996 |
| 1997-10-11 - 1997-10-20 |       25048 |
| 1997-11-20 - 1997-11-29 |       25056 |
| 1997-10-01 - 1997-10-10 |       24803 |
| 1997-10-21 - 1997-10-30 |       24978 |
| 1992-11-16 - 1992-11-25 |       24921 |
| 1992-11-26 - 1992-12-05 |       24730 |
| 1993-03-06 - 1993-03-15 |       24559 |
| 1993-04-15 - 1993-04-24 |       24780 |
| 1995-10-12 - 1995-10-21 |       24880 |
| 1995-11-01 - 1995-11-10 |       24728 |
| 1998-02-08 - 1998-02-17 |       24963 |
| 1993-10-02 - 1993-10-11 |       24956 |
| 1992-05-20 - 1992-05-29 |       24906 |
| 1992-06-19 - 1992-06-28 |       24833 |
| 1994-03-21 - 1994-03-30 |       24924 |
| 1993-05-25 - 1993-06-03 |       24695 |
| 1993-05-05 - 1993-05-14 |       24989 |
| 1995-06-24 - 1995-07-03 |       25015 |
| 1995-05-15 - 1995-05-24 |       24950 |
| 1998-03-10 - 1998-03-19 |       25151 |
| 1996-05-29 - 1996-06-07 |       24875 |
| 1994-08-18 - 1994-08-27 |       24854 |
| 1994-09-07 - 1994-09-16 |       24714 |
| 1995-07-04 - 1995-07-13 |       25047 |
| 1995-08-03 - 1995-08-12 |       25112 |
| 1995-07-24 - 1995-08-02 |       24878 |
| 1995-07-14 - 1995-07-23 |       24916 |
| 1993-04-25 - 1993-05-04 |       24905 |
| 1993-05-15 - 1993-05-24 |       24698 |
| 1993-04-05 - 1993-04-14 |       25031 |
| 1993-06-04 - 1993-06-13 |       24869 |
| 1994-01-30 - 1994-02-08 |       24793 |
| 1994-10-27 - 1994-11-05 |       25042 |
| 1994-11-26 - 1994-12-05 |       24397 |
| 1994-12-26 - 1995-01-04 |       24679 |
| 1993-12-01 - 1993-12-10 |       24886 |
| 1993-11-11 - 1993-11-20 |       24692 |
| 1993-11-01 - 1993-11-10 |       25237 |
| 1993-09-22 - 1993-10-01 |       24782 |
| 1993-07-24 - 1993-08-02 |       24923 |
| 1993-09-02 - 1993-09-11 |       24855 |
| 1994-06-19 - 1994-06-28 |       24882 |
| 1994-07-09 - 1994-07-18 |       25074 |
| 1997-04-24 - 1997-05-03 |       24925 |
| 1997-05-14 - 1997-05-23 |       24969 |
| 1997-05-04 - 1997-05-13 |       24721 |
| 1997-04-04 - 1997-04-13 |       24920 |
| 1997-04-14 - 1997-04-23 |       24673 |
| 1997-03-25 - 1997-04-03 |       24742 |
| 1994-04-20 - 1994-04-29 |       25164 |
| 1994-04-30 - 1994-05-09 |       25105 |
| 1992-03-21 - 1992-03-30 |       22730 |
| 1992-03-01 - 1992-03-10 |       14452 |
| 1998-01-19 - 1998-01-28 |       24675 |
| 1997-12-20 - 1997-12-29 |       24541 |
| 1992-04-30 - 1992-05-09 |       24608 |
| 1994-06-09 - 1994-06-18 |       24807 |
| 1994-03-31 - 1994-04-09 |       24833 |
| 1996-05-09 - 1996-05-18 |       25044 |
| 1996-04-09 - 1996-04-18 |       24886 |
| 1996-06-08 - 1996-06-17 |       24636 |
| 1996-11-25 - 1996-12-04 |       24674 |
| 1996-12-25 - 1997-01-03 |       24925 |
| 1993-10-22 - 1993-10-31 |       24903 |
| 1995-02-14 - 1995-02-23 |       25042 |
| 1995-03-16 - 1995-03-25 |       25030 |
| 1995-01-15 - 1995-01-24 |       25064 |
| 1995-01-25 - 1995-02-03 |       25186 |
| 1995-03-06 - 1995-03-15 |       25569 |
| 1992-04-10 - 1992-04-19 |       24901 |
| 1992-04-20 - 1992-04-29 |       24983 |
| 1995-02-24 - 1995-03-05 |       25083 |
| 1995-04-15 - 1995-04-24 |       25291 |
| 1997-02-23 - 1997-03-04 |       25232 |
| 1998-06-28 - 1998-07-07 |       24991 |
| 1998-06-08 - 1998-06-17 |       25016 |
| 1997-08-12 - 1997-08-21 |       25203 |
| 1997-07-03 - 1997-07-12 |       25124 |
| 1995-09-12 - 1995-09-21 |       25258 |
| 1995-09-02 - 1995-09-11 |       25026 |
| 1995-05-25 - 1995-06-03 |       25170 |
| 1998-08-07 - 1998-08-16 |       25126 |
| 1998-07-28 - 1998-08-06 |       25090 |
| 1997-12-30 - 1998-01-08 |       24896 |
| 1997-06-23 - 1997-07-02 |       25374 |
| 1997-01-04 - 1997-01-13 |       25039 |
| 1992-12-06 - 1992-12-15 |       24689 |
| 1992-11-06 - 1992-11-15 |       24990 |
| 1997-03-15 - 1997-03-24 |       25240 |
| 1997-05-24 - 1997-06-02 |       24878 |
| 1992-10-07 - 1992-10-16 |       24660 |
| 1992-10-27 - 1992-11-05 |       24673 |
| 1997-06-13 - 1997-06-22 |       25078 |
| 1997-12-10 - 1997-12-19 |       24994 |
| 1997-11-30 - 1997-12-09 |       24754 |
| 1996-08-17 - 1996-08-26 |       25302 |
| 1994-12-16 - 1994-12-25 |       24577 |
| 1992-08-08 - 1992-08-17 |       24660 |
| 1992-08-28 - 1992-09-06 |       24614 |
| 1992-09-07 - 1992-09-16 |       25037 |
| 1997-09-11 - 1997-09-20 |       24623 |
| 1997-09-01 - 1997-09-10 |       24938 |
| 1997-09-21 - 1997-09-30 |       25107 |
| 1995-10-22 - 1995-10-31 |       25080 |
| 1993-02-04 - 1993-02-13 |       24903 |
| 1993-10-12 - 1993-10-21 |       25029 |
| 1995-01-05 - 1995-01-14 |       24937 |
| 1995-02-04 - 1995-02-13 |       25138 |
| 1995-12-01 - 1995-12-10 |       24846 |
| 1998-08-27 - 1998-09-05 |       24545 |
| 1993-03-16 - 1993-03-25 |       24947 |
| 1998-07-18 - 1998-07-27 |       24751 |
| 1998-08-17 - 1998-08-26 |       25147 |
| 1998-09-26 - 1998-10-05 |       12763 |
| 1996-10-26 - 1996-11-04 |       25493 |
| 1996-09-26 - 1996-10-05 |       25001 |
| 1993-07-14 - 1993-07-23 |       24693 |
| 1998-10-06 - 1998-10-15 |        8769 |
| 1992-03-31 - 1992-04-09 |       25179 |
| 1992-03-11 - 1992-03-20 |       18307 |
| 1995-03-26 - 1995-04-04 |       25588 |
| 1996-09-06 - 1996-09-15 |       25146 |
| 1996-08-07 - 1996-08-16 |       24887 |
| 1997-10-31 - 1997-11-09 |       25119 |
| 1993-06-24 - 1993-07-03 |       24596 |
| 1993-09-12 - 1993-09-21 |       24976 |
| 1993-07-04 - 1993-07-13 |       24775 |
| 1995-04-05 - 1995-04-14 |       25194 |
| 1992-09-17 - 1992-09-26 |       25183 |
| 1992-09-27 - 1992-10-06 |       24670 |
| 1993-06-14 - 1993-06-23 |       24795 |
| 1996-06-18 - 1996-06-27 |       24839 |
| 1996-07-08 - 1996-07-17 |       24946 |
| 1996-06-28 - 1996-07-07 |       24693 |
| 1996-10-06 - 1996-10-15 |       25180 |
| 1998-10-26 - 1998-10-31 |         843 |
| 1998-02-28 - 1998-03-09 |       24813 |
| 1992-01-31 - 1992-02-09 |        2276 |
| 1992-02-10 - 1992-02-19 |        6461 |
| 1994-09-27 - 1994-10-06 |       24834 |
| 1996-12-05 - 1996-12-14 |       25266 |
| 1997-08-22 - 1997-08-31 |       24993 |
| 1992-10-17 - 1992-10-26 |       24671 |
| 1996-08-27 - 1996-09-05 |       24799 |
| 1997-06-03 - 1997-06-12 |       25129 |
| 1992-02-20 - 1992-02-29 |       10412 |
    )";
    l_commitdate.dataMap = makeDataMapDate(input);

    l_receiptdate.identifier = false;
    l_receiptdate.dataType = "date";
    l_receiptdate.count = lineitemRow;
    l_receiptdate.minValue = 1019940;
    l_receiptdate.maxValue = 1023391;
    l_receiptdate.bucketNum = 256;
    input = R"(
| 1996-03-13 - 1996-03-22 |       24835 |
| 1996-04-12 - 1996-04-21 |       24906 |
| 1996-01-23 - 1996-02-01 |       24960 |
| 1996-05-12 - 1996-05-21 |       24778 |
| 1996-03-23 - 1996-04-01 |       25120 |
| 1996-02-02 - 1996-02-11 |       24934 |
| 1997-01-27 - 1997-02-05 |       25022 |
| 1994-02-22 - 1994-03-03 |       24968 |
| 1993-11-24 - 1993-12-03 |       24889 |
| 1994-01-23 - 1994-02-01 |       24589 |
| 1993-12-24 - 1994-01-02 |       24851 |
| 1993-11-04 - 1993-11-13 |       25226 |
| 1996-01-13 - 1996-01-22 |       24883 |
| 1994-11-19 - 1994-11-28 |       24620 |
| 1994-10-10 - 1994-10-19 |       24835 |
| 1994-08-21 - 1994-08-30 |       24917 |
| 1992-04-23 - 1992-05-02 |       20935 |
| 1996-06-01 - 1996-06-10 |       24928 |
| 1996-02-12 - 1996-02-21 |       24854 |
| 1995-10-25 - 1995-11-03 |       24999 |
| 1995-08-26 - 1995-09-04 |       24749 |
| 1995-08-16 - 1995-08-25 |       25022 |
| 1995-09-05 - 1995-09-14 |       25124 |
| 1995-07-17 - 1995-07-26 |       25008 |
| 1993-12-14 - 1993-12-23 |       25154 |
| 1998-10-29 - 1998-11-07 |        9284 |
| 1998-10-09 - 1998-10-18 |       13403 |
| 1995-12-14 - 1995-12-23 |       25038 |
| 1995-11-24 - 1995-12-03 |       25051 |
| 1996-02-22 - 1996-03-02 |       24482 |
| 1992-08-11 - 1992-08-20 |       24687 |
| 1992-07-22 - 1992-07-31 |       24760 |
| 1992-08-01 - 1992-08-10 |       24662 |
| 1996-09-29 - 1996-10-08 |       24988 |
| 1996-12-08 - 1996-12-17 |       25092 |
| 1996-11-18 - 1996-11-27 |       25094 |
| 1996-10-19 - 1996-10-28 |       25223 |
| 1996-10-09 - 1996-10-18 |       25100 |
| 1996-12-28 - 1997-01-06 |       25355 |
| 1994-10-20 - 1994-10-29 |       24913 |
| 1995-05-08 - 1995-05-17 |       25363 |
| 1995-07-27 - 1995-08-05 |       24866 |
| 1994-02-12 - 1994-02-21 |       24834 |
| 1994-03-14 - 1994-03-23 |       25048 |
| 1997-04-17 - 1997-04-26 |       24863 |
| 1997-02-16 - 1997-02-25 |       24983 |
| 1997-04-07 - 1997-04-16 |       24986 |
| 1997-04-27 - 1997-05-06 |       24813 |
| 1998-07-21 - 1998-07-30 |       25054 |
| 1998-07-01 - 1998-07-10 |       24601 |
| 1998-08-20 - 1998-08-29 |       23352 |
| 1998-06-21 - 1998-06-30 |       24822 |
| 1998-08-10 - 1998-08-19 |       24767 |
| 1994-08-31 - 1994-09-09 |       24968 |
| 1994-07-02 - 1994-07-11 |       24863 |
| 1994-06-12 - 1994-06-21 |       24993 |
| 1994-01-13 - 1994-01-22 |       24859 |
| 1994-03-24 - 1994-04-02 |       25135 |
| 1994-02-02 - 1994-02-11 |       24751 |
| 1998-04-02 - 1998-04-11 |       25073 |
| 1998-06-01 - 1998-06-10 |       25013 |
| 1998-03-23 - 1998-04-01 |       24735 |
| 1998-04-12 - 1998-04-21 |       25099 |
| 1998-02-11 - 1998-02-20 |       24757 |
| 1994-07-22 - 1994-07-31 |       24857 |
| 1994-06-22 - 1994-07-01 |       25103 |
| 1993-04-08 - 1993-04-17 |       24760 |
| 1993-05-18 - 1993-05-27 |       24876 |
| 1995-01-08 - 1995-01-17 |       24681 |
| 1994-12-09 - 1994-12-18 |       24854 |
| 1995-01-18 - 1995-01-27 |       25120 |
| 1994-11-09 - 1994-11-18 |       24862 |
| 1994-05-23 - 1994-06-01 |       24768 |
| 1994-05-13 - 1994-05-22 |       25314 |
| 1994-04-13 - 1994-04-22 |       25080 |
| 1998-05-22 - 1998-05-31 |       25181 |
| 1996-06-21 - 1996-06-30 |       24725 |
| 1997-08-05 - 1997-08-14 |       25357 |
| 1997-08-25 - 1997-09-03 |       25285 |
| 1997-08-15 - 1997-08-24 |       25110 |
| 1997-05-27 - 1997-06-05 |       25188 |
| 1996-09-19 - 1996-09-28 |       25479 |
| 1996-07-31 - 1996-08-09 |       24659 |
| 1992-09-30 - 1992-10-09 |       24721 |
| 1993-02-27 - 1993-03-08 |       24967 |
| 1992-12-09 - 1992-12-18 |       24514 |
| 1993-01-28 - 1993-02-06 |       24783 |
| 1993-02-07 - 1993-02-16 |       24687 |
| 1993-02-17 - 1993-02-26 |       25034 |
| 1992-09-10 - 1992-09-19 |       24811 |
| 1992-07-02 - 1992-07-11 |       25108 |
| 1992-08-31 - 1992-09-09 |       24839 |
| 1994-09-30 - 1994-10-09 |       25140 |
| 1994-09-20 - 1994-09-29 |       25079 |
| 1993-07-07 - 1993-07-16 |       24939 |
| 1993-09-15 - 1993-09-24 |       24987 |
| 1993-07-27 - 1993-08-05 |       24941 |
| 1993-06-17 - 1993-06-26 |       24723 |
| 1997-12-23 - 1998-01-01 |       24826 |
| 1998-03-03 - 1998-03-12 |       24767 |
| 1992-08-21 - 1992-08-30 |       24941 |
| 1992-07-12 - 1992-07-21 |       24632 |
| 1995-11-14 - 1995-11-23 |       25161 |
| 1997-03-18 - 1997-03-27 |       24940 |
| 1997-02-26 - 1997-03-07 |       25079 |
| 1997-02-06 - 1997-02-15 |       24969 |
| 1994-12-19 - 1994-12-28 |       24660 |
| 1997-09-24 - 1997-10-03 |       24883 |
| 1997-12-03 - 1997-12-12 |       24835 |
| 1998-01-02 - 1998-01-11 |       24971 |
| 1997-12-13 - 1997-12-22 |       24847 |
| 1997-10-04 - 1997-10-13 |       24902 |
| 1992-12-29 - 1993-01-07 |       24832 |
| 1992-12-19 - 1992-12-28 |       24631 |
| 1992-11-29 - 1992-12-08 |       24819 |
| 1993-01-08 - 1993-01-17 |       24787 |
| 1992-11-09 - 1992-11-18 |       24895 |
| 1993-04-28 - 1993-05-07 |       25072 |
| 1993-03-09 - 1993-03-18 |       24989 |
| 1993-05-08 - 1993-05-17 |       24733 |
| 1995-12-04 - 1995-12-13 |       25133 |
| 1993-05-28 - 1993-06-06 |       24690 |
| 1998-02-21 - 1998-03-02 |       25041 |
| 1998-03-13 - 1998-03-22 |       24728 |
| 1993-09-25 - 1993-10-04 |       24903 |
| 1993-12-04 - 1993-12-13 |       24907 |
| 1993-08-26 - 1993-09-04 |       24718 |
| 1992-05-23 - 1992-06-01 |       24789 |
| 1992-05-03 - 1992-05-12 |       22777 |
| 1992-05-13 - 1992-05-22 |       23950 |
| 1994-04-03 - 1994-04-12 |       24742 |
| 1993-06-27 - 1993-07-06 |       24677 |
| 1995-08-06 - 1995-08-15 |       25016 |
| 1995-04-18 - 1995-04-27 |       25415 |
| 1995-06-17 - 1995-06-26 |       25137 |
| 1998-01-22 - 1998-01-31 |       25110 |
| 1996-07-01 - 1996-07-10 |       25117 |
| 1995-10-15 - 1995-10-24 |       25321 |
| 1995-06-27 - 1995-07-06 |       24893 |
| 1995-06-07 - 1995-06-16 |       25210 |
| 1993-03-29 - 1993-04-07 |       24956 |
| 1993-04-18 - 1993-04-27 |       25107 |
| 1995-12-24 - 1996-01-02 |       24630 |
| 1994-03-04 - 1994-03-13 |       24920 |
| 1994-11-29 - 1994-12-08 |       25181 |
| 1994-04-23 - 1994-05-02 |       25017 |
| 1993-11-14 - 1993-11-23 |       25069 |
| 1993-10-05 - 1993-10-14 |       25137 |
| 1993-08-16 - 1993-08-25 |       25274 |
| 1996-04-02 - 1996-04-11 |       24768 |
| 1994-08-01 - 1994-08-10 |       24678 |
| 1997-03-28 - 1997-04-06 |       24884 |
| 1997-05-17 - 1997-05-26 |       25004 |
| 1997-06-16 - 1997-06-25 |       25004 |
| 1997-06-26 - 1997-07-05 |       24959 |
| 1992-03-14 - 1992-03-23 |       12690 |
| 1992-04-13 - 1992-04-22 |       19068 |
| 1993-08-06 - 1993-08-15 |       24794 |
| 1994-12-29 - 1995-01-07 |       24904 |
| 1992-06-22 - 1992-07-01 |       24545 |
| 1994-05-03 - 1994-05-12 |       25161 |
| 1994-07-12 - 1994-07-21 |       25054 |
| 1994-01-03 - 1994-01-12 |       24875 |
| 1995-09-25 - 1995-10-04 |       25280 |
| 1995-07-07 - 1995-07-16 |       25048 |
| 1995-05-28 - 1995-06-06 |       25026 |
| 1996-05-02 - 1996-05-11 |       24841 |
| 1996-05-22 - 1996-05-31 |       24885 |
| 1996-04-22 - 1996-05-01 |       24803 |
| 1997-01-07 - 1997-01-16 |       25052 |
| 1997-01-17 - 1997-01-26 |       25057 |
| 1993-10-25 - 1993-11-03 |       24911 |
| 1993-10-15 - 1993-10-24 |       24862 |
| 1995-01-28 - 1995-02-06 |       24802 |
| 1995-02-07 - 1995-02-16 |       24962 |
| 1995-02-17 - 1995-02-26 |       25131 |
| 1992-06-02 - 1992-06-11 |       24820 |
| 1995-05-18 - 1995-05-27 |       25093 |
| 1997-05-07 - 1997-05-16 |       24858 |
| 1993-03-19 - 1993-03-28 |       24921 |
| 1993-01-18 - 1993-01-27 |       24824 |
| 1998-06-11 - 1998-06-20 |       25009 |
| 1998-07-11 - 1998-07-20 |       24967 |
| 1998-04-22 - 1998-05-01 |       24935 |
| 1994-06-02 - 1994-06-11 |       24921 |
| 1996-12-18 - 1996-12-27 |       25264 |
| 1997-07-06 - 1997-07-15 |       25004 |
| 1997-09-14 - 1997-09-23 |       24742 |
| 1996-08-20 - 1996-08-29 |       24762 |
| 1995-04-08 - 1995-04-17 |       25140 |
| 1995-03-09 - 1995-03-18 |       25089 |
| 1998-08-30 - 1998-09-08 |       21773 |
| 1998-07-31 - 1998-08-09 |       24941 |
| 1998-01-12 - 1998-01-21 |       25100 |
| 1997-07-16 - 1997-07-25 |       24907 |
| 1997-09-04 - 1997-09-13 |       25252 |
| 1997-10-14 - 1997-10-23 |       24959 |
| 1992-11-19 - 1992-11-28 |       24717 |
| 1996-06-11 - 1996-06-20 |       24941 |
| 1996-08-10 - 1996-08-19 |       25042 |
| 1995-09-15 - 1995-09-24 |       25167 |
| 1996-07-21 - 1996-07-30 |       24897 |
| 1992-10-20 - 1992-10-29 |       25317 |
| 1995-10-05 - 1995-10-14 |       25517 |
| 1993-09-05 - 1993-09-14 |       24747 |
| 1998-05-12 - 1998-05-21 |       25121 |
| 1998-02-01 - 1998-02-10 |       25030 |
| 1995-11-04 - 1995-11-13 |       24997 |
| 1998-05-02 - 1998-05-11 |       25081 |
| 1997-06-06 - 1997-06-15 |       24955 |
| 1997-03-08 - 1997-03-17 |       25184 |
| 1993-06-07 - 1993-06-16 |       24453 |
| 1992-06-12 - 1992-06-21 |       24650 |
| 1995-02-27 - 1995-03-08 |       24704 |
| 1997-10-24 - 1997-11-02 |       24996 |
| 1992-10-30 - 1992-11-08 |       24869 |
| 1997-11-23 - 1997-12-02 |       24786 |
| 1997-11-13 - 1997-11-22 |       24744 |
| 1996-01-03 - 1996-01-12 |       24797 |
| 1998-11-18 - 1998-11-27 |        5233 |
| 1998-09-19 - 1998-09-28 |       17743 |
| 1998-09-09 - 1998-09-18 |       19590 |
| 1998-10-19 - 1998-10-28 |       11353 |
| 1996-11-08 - 1996-11-17 |       25112 |
| 1996-03-03 - 1996-03-12 |       24770 |
| 1992-04-03 - 1992-04-12 |       17130 |
| 1992-03-24 - 1992-04-02 |       14999 |
| 1995-03-19 - 1995-03-28 |       24940 |
| 1994-08-11 - 1994-08-20 |       24769 |
| 1993-07-17 - 1993-07-26 |       24820 |
| 1992-10-10 - 1992-10-19 |       24685 |
| 1998-11-08 - 1998-11-17 |        7209 |
| 1994-10-30 - 1994-11-08 |       24911 |
| 1995-04-28 - 1995-05-07 |       25205 |
| 1995-03-29 - 1995-04-07 |       25372 |
| 1994-09-10 - 1994-09-19 |       24959 |
| 1992-03-04 - 1992-03-13 |       10719 |
| 1996-07-11 - 1996-07-20 |       25058 |
| 1996-11-28 - 1996-12-07 |       25136 |
| 1996-08-30 - 1996-09-08 |       24963 |
| 1998-09-29 - 1998-10-08 |       15409 |
| 1998-12-18 - 1998-12-27 |         383 |
| 1996-10-29 - 1996-11-07 |       25041 |
| 1996-09-09 - 1996-09-18 |       24766 |
| 1992-02-13 - 1992-02-22 |        6680 |
| 1992-02-03 - 1992-02-12 |        4516 |
| 1997-11-03 - 1997-11-12 |       24769 |
| 1992-09-20 - 1992-09-29 |       24338 |
| 1997-07-26 - 1997-08-04 |       24795 |
| 1992-02-23 - 1992-03-03 |        8543 |
| 1992-01-14 - 1992-01-23 |         969 |
| 1992-01-24 - 1992-02-02 |        2523 |
| 1998-11-28 - 1998-12-07 |        3100 |
| 1998-12-08 - 1998-12-17 |        1356 |
| 1992-01-04 - 1992-01-13 |         193 |
| 1998-12-28 - 1998-12-31 |          13 |       
    )";
    l_receiptdate.dataMap = makeDataMapDate(input);

    l_shipinstruct.identifier = false;
    l_shipinstruct.dataType = "string";
    l_shipinstruct.count = lineitemRow;
    l_shipinstruct.bucketNum = 4;
    input = R"(
| COLLECT COD       | 1500547 |
| DELIVER IN PERSON | 1500048 |
| NONE              | 1500862 |
| TAKE BACK RETURN  | 1499758 |    
    )";
    l_shipinstruct.dataMap = makeDataMap(input);

    l_shipmode.identifier = false;
    l_shipmode.dataType = "string";
    l_shipmode.count = lineitemRow;
    l_shipmode.bucketNum = 7;
    input = R"(
| AIR        | 858104 |
| FOB        | 857324 |
| MAIL       | 857401 |
| RAIL       | 856484 |
| REG AIR    | 856868 |
| SHIP       | 858036 |
| TRUCK      | 856998 |   
    )";
    l_shipmode.dataMap = makeDataMap(input);

    l_comment.identifier = true;
    l_comment.count = lineitemRow;
    l_comment.dataType = "string";

    n_nationkey.identifier = true;
    n_nationkey.count = nationRow;
    n_nationkey.dataType = "int";
    n_nationkey.minValue = 1;
    n_nationkey.maxValue = 25;

    n_name.identifier = true;
    n_name.count = nationRow;
    n_name.dataType = "string";

    n_regionkey.identifier = false;
    n_regionkey.dataType= "int";
    n_regionkey.count = nationRow;
    n_regionkey.minValue = 1;
    n_regionkey.maxValue = 5;
    n_regionkey.bucketNum = 5;
    input = R"(
|           0 |     5 |
|           1 |     5 |
|           2 |     5 |
|           3 |     5 |
|           4 |     5 |
    )";
    n_regionkey.dataMap = makeDataMap(input);

    n_comment.identifier = true;
    n_comment.dataType = "string";
    n_comment.count = nationRow;

    r_regionkey.identifier = true;
    r_regionkey.count = regionRow;
    r_regionkey.dataType = "int";
    r_regionkey.minValue = 1;
    r_regionkey.maxValue = 5;

    r_name.identifier = true;
    r_name.dataType = "string";
    r_name.count = regionRow;

    r_comment.identifier = true;
    r_comment.dataType = "string";
    r_comment.count = regionRow;
}


std::map<std::string, std::string> makeDataMap(std::string input){
    std::map<std::string, std::string> dataMap;
    std::istringstream lines(input);
    std::string line;
    while (std::getline(lines, line)) {
        std::istringstream tokens(line);
        // "|"을 기준으로 분할
        std::string key, value;
        std::getline(tokens >> std::ws, key, '|'); // Skip leading whitespaces
        std::getline(tokens >> std::ws, key, '|');
        std::getline(tokens >> std::ws, value, '|');
        // 앞뒤 공백 제거
        key.erase(std::remove_if(key.begin(), key.end(), ::isspace), key.end());
        value.erase(std::remove_if(value.begin(), value.end(), ::isspace), value.end());
        // 비어 있는 문자열이 아니라면 map에 추가
        if (!key.empty() && !value.empty()) {
            dataMap[key] = value;
        }
    }
    // 결과 출력
    //for (const auto& pair : dataMap) {
     //   std::cout << "Key: " << pair.first << ", Value: " << pair.second << std::endl;
    //}
    return dataMap;
}

std::map<std::string, std::string> makeDataMapFloat(std::string input){
    std::map<std::string, std::string> dataMap;
    std::istringstream lines(input);
    std::string line;
    while (std::getline(lines, line)) {
        std::istringstream tokens(line);
        // "|"을 기준으로 분할
        std::string key, value;
        std::getline(tokens >> std::ws, key, '|'); // Skip leading whitespaces
        std::getline(tokens >> std::ws, key, '|');
        std::getline(tokens >> std::ws, value, '|');
        // 앞뒤 공백 제거
        key.erase(std::remove_if(key.begin(), key.end(), ::isspace), key.end());
        value.erase(std::remove_if(value.begin(), value.end(), ::isspace), value.end());

        std::regex pattern(R"(\d+-([0-9]+))");
        std::smatch matches;
        if(std::regex_search(key, matches, pattern)){
            std::string valuePart = matches[1];
            key = valuePart;
        }

        // 비어 있는 문자열이 아니라면 map에 추가
        if (!key.empty() && !value.empty()) {
            dataMap[key] = value;
        }
    }
    // 결과 출력
    //for (const auto& pair : dataMap) {
    //    std::cout << "Key: " << pair.first << ", Value: " << pair.second << std::endl;
    //}
    return dataMap;
}

std::map<std::string, std::string> makeDataMapDate(std::string input){
    std::map<std::string, std::string> dataMap;
    std::istringstream lines(input);
    std::string line;
    while (std::getline(lines, line)) {
        std::istringstream tokens(line);
        // "|"을 기준으로 분할
        std::string key, value;
        std::getline(tokens >> std::ws, key, '|'); // Skip leading whitespaces
        std::getline(tokens >> std::ws, key, '|');
        std::getline(tokens >> std::ws, value, '|');
        // 앞뒤 공백 제거
        key.erase(std::remove_if(key.begin(), key.end(), ::isspace), key.end());
        value.erase(std::remove_if(value.begin(), value.end(), ::isspace), value.end());
         std::regex pattern(R"((\d+)-(\d+)-(\d+)-(\d+)-(\d+)-(\d+))");
        std::smatch matches;
        if(std::regex_search(key, matches, pattern)){
            std::string year = matches[4];
            std::string month = matches[5];
            std::string day = matches[6];
            std::string valuePart = year + "-" + month + "-" + day;
            int intDate = dateToInt(valuePart);
            key = std::to_string(intDate);
        }

        // 비어 있는 문자열이 아니라면 map에 추가
        if (!key.empty() && !value.empty()) {
            dataMap[key] = value;
        }
    }
    // 결과 출력
    //for (const auto& pair : dataMap) {
     //   std::cout << "Key: " << pair.first << ", Value: " << pair.second << std::endl;
    //}
    return dataMap;
}

int dateToInt(std::string date){
    int result;

    std::istringstream iss(date);
    std::string year, month, day;
    std::getline(iss, year, '-');
    std::getline(iss, month, '-');
    std::getline(iss, day, '-');

    int numericYear = std::stoi(year);
    int numericMonth = std::stoi(month);
    int numericDay = std::stoi(day);

    result = numericYear * 32 * 16 + numericMonth * 32 + numericDay;
    return result;
}

float getFilteredRow(querySnippetInfo snippet){
    int filteredrow = 0;
    std::vector<float> filterRatio;
    bool isContainNot = false;
    for(int i=0;i<snippet.filterInfo.size();i++){
        if(snippet.filterInfo[i] == "12"){
            isContainNot = true;
            std::cout<<"IS CONTAIN NOT"<<std::endl;
            break;
        }
    }
    if(isContainNot){ // is contain NOT
        bool currentNot = false;
        int notCount = 0;

        bool currentSubstring = false;
        int subStringNum = 0;
        std::string subStringTable = "";

        int index = 0;
        std::vector<std::string> tableList;
        for(int i=0 ;i<snippet.filterCount;i++){
            int itemp = i - notCount;
            if(snippet.filterInfo[((itemp+1)/2)*6+notCount] == "12"){ // not 연산자 
                currentNot = true;
                notCount++;
                std::cout<<"NOT CONTAIN COUNT"<<notCount<<std::endl;
            }
            else if(currentSubstring){
                histogram targetTable = Stringtohisto(subStringTable);
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+2];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                for(int j=0;j<valueVector.size();j++){
                    valueVector[j].erase(std::remove(valueVector[j].begin(),valueVector[j].end(),' '),valueVector[j].end());
                }

                int subNum = valueVector.size();
                float filterRatioTemp;
                filterRatioTemp = subNum / pow(10,subStringNum);
                filterRatio.push_back(filterRatioTemp);
                currentSubstring = false;

            }
            else if(itemp %2 == 0){ // 실제 계산
                index = (itemp/2) * 6 + notCount;
                histogram targetTable = Stringtohisto(snippet.filterInfo[index+1]); // 타겟 히스토그램 테이블
                tableList.push_back(snippet.filterInfo[index+1]); // 타겟 테이블 리스트 정리 같은 컬럼 and, or 연산자 처리를 위함 
            std::cout<<"SCAN TARGET TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
            std::cout<<"SCAN OPERATOR : "<<snippet.filterInfo[index+2]<<std::endl;
            std::cout<<"SCAN DATA TYPE : "<<snippet.filterInfo[index+3]<<std::endl;
            for(int j=0;j<tableList.size();j++){
                std::cout<<"INDEX : "<<j<<"PREV TABLE LIST : "<<tableList[j]<<std::endl;
            }
            if(snippet.filterInfo[index+2] == "1" | snippet.filterInfo[index+2] == "3"){ // >= or >
                    bool isduplicated = false;
                    int duplicateIndex = 0;
                    for(int k = 0;k<tableList.size()-1;k++){
                        std::cout<<"TABLE LIST NAME : "<<tableList[k]<<std::endl;
                        std::cout<<"1231232123"<<std::endl;
                        if(snippet.filterInfo[index+1] == tableList[k]){
                            isduplicated = true;
                            duplicateIndex = k;
                            std::cout<<"DUPLICATE INDEX : "<<k<<" DUPLICATED TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
                        }
                    }

                if(isduplicated){ // 테이블이 중복된 경우 <= >= 만 연산됨
                    if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                 if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                 if(temp1 > temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }

                    else{

                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                 if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                 if(temp1 > temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }//

                }
                if(isduplicated){ // 테이블이 중복된 경우 따로 연산 수행
                float prevRatio;
                float curRatio;
                float newRatio;
                prevRatio = filterRatio[(duplicateIndex) * 2];
                filterRatio[(duplicateIndex) * 2] = 1;
                curRatio = filterRatio.back();
                newRatio = prevRatio + curRatio - 1;
                filterRatio.pop_back();
                filterRatio.push_back(newRatio);
                 std::cout<<"RATIO LIST"<<std::endl;
                    for(int p = 0;p<filterRatio.size();p++){
                        std::cout<<filterRatio[p]<<" ";
                    }
                    std::cout<<"\n";
                std::cout<<"PREV RATIO : "<<prevRatio << " CUR RATIO : "<<curRatio<<std::endl;
                std::cout<<"NEW CALCULATED RATIO : "<<newRatio<<std::endl;
                isduplicated = false;
                }
            }
            else if(snippet.filterInfo[index+2] == "2" | snippet.filterInfo[index+2] == "4"){ // <= or <
                bool isduplicated = false;
                int duplicateIndex = 0;
                for(int k = 0;k<tableList.size()-1;k++){
                    if(snippet.filterInfo[index+1] == tableList[k]){
                        isduplicated = true;
                        duplicateIndex = k;
                        std::cout<<"DUPLICATE INDEX : "<<k<<"DUPLICATED TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
                    }
                }

                if(isduplicated){

                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "4"){
                                if(temp1 < temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                else{
                    if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "4"){
                                if(temp1 < temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                if(isduplicated){ // 테이블이 중복된 경우 따로 연산 수행
                float prevRatio;
                float curRatio;
                float newRatio;
                prevRatio = filterRatio[(duplicateIndex) * 2];
                filterRatio[(duplicateIndex) * 2] = 1;
                curRatio = filterRatio.back();
                newRatio = prevRatio + curRatio - 1;
                filterRatio.pop_back();
                filterRatio.push_back(newRatio);
                 std::cout<<"RATIO LIST"<<std::endl;
                    for(int p = 0;p<filterRatio.size();p++){
                        std::cout<<filterRatio[p]<<" ";
                    }
                    std::cout<<"\n";
                std::cout<<"PREV RATIO : "<<prevRatio << " CUR RATIO : "<<curRatio<<std::endl;
                std::cout<<"NEW CALCULATED RATIO : "<<newRatio<<std::endl;
                isduplicated = false;
                }
            }
            else if(snippet.filterInfo[index+2] == "5"){ // = 연산자
                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::string value = snippet.filterInfo[index+4];
                    value.erase(std::remove(value.begin(), value.end(), ' '),value.end()); // 공백 제거 string 
                    if(targetTable.identifier == true){ // identifier true
                        float temp = 1.0f / targetTable.count;
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            std::string temp1 = iter -> first;
                            
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp += filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
            }
            else if(snippet.filterInfo[index+2] == "6"){ // != CSD단에서는 해당 연산자 수행하지 않음

            }
            else if(snippet.filterInfo[index+2] == "7"){ // like string인경우 밖에 없음
                std::string value = snippet.filterInfo[index+4];
                float filterRatioTemp = 0;
                float filterCount = 0;
                std::string pattern = value;
                std::string regexPattern = std::regex_replace(pattern, std::regex("%"), ".*");
                regexPattern = std::regex_replace(regexPattern, std::regex("_"), ".");
                std::regex regexObject(regexPattern);

                for(auto iter =targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                // 입력 문자열과 매치 여부 확인
                    std::string temp1 = iter -> first;

                    if(std::regex_match(temp1, regexObject)){
                        filterCount += std::stof(iter -> second);
                    }
                    
                }
                filterRatioTemp = filterCount / targetTable.count;
                if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        } 
                filterRatio.push_back(filterRatioTemp);
            }
            else if(snippet.filterInfo[index+2] == "8"){ // between 지금은 일단 스니펫  < > 로 쪼개서 하기
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+4];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                float leftValue = std::stof(valueVector[0]);
                float rightValue = std::stof(valueVector[1]);
                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    if(targetTable.identifier == true){
                        float temp = (rightValue - leftValue) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(temp1 >= leftValue & temp1 <= rightValue){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else{ // 숫자의 경우
                    if(targetTable.identifier == true){
                        float temp = (rightValue - leftValue) / (targetTable.maxValue - targetTable.minValue);
                        if(currentNot){
                            temp = 1 - temp;
                            currentNot = false;
                        }
                        filterRatio.push_back(temp);
                    }
                    else{
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(temp1 >= leftValue & temp1 <= rightValue){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        if(currentNot){
                            filterRatioTemp = 1 - filterRatioTemp;
                            currentNot = false;
                        }
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
            }
            else if(snippet.filterInfo[index+2] == "9"){ // in 해야됌, only string
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+4];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                for(int j=0;j<valueVector.size();j++){
                    valueVector[j].erase(std::remove(valueVector[j].begin(), valueVector[j].end(), ' '),valueVector[j].end());
                }

                if(targetTable.identifier == true){
                    float temp = valueVector.size() / targetTable.count;
                    filterRatio.push_back(temp);
                }
                else{
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    for(auto iter = targetTable.dataMap.begin(); iter != targetTable.dataMap.end(); iter++){
                        for(int j = 0;j < valueVector.size();j++){
                            if(iter->first == valueVector[j]){ // string found
                                filterCount += std::stof(iter -> second);
                            }
                            else{ // string not found
                            }
                        }
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatio.push_back(filterRatioTemp);
                }
            }
            else if(snippet.filterInfo[index+2] == "16"){ //substring 연산자 계산 
            std::cout<<"SUBSTRING CALCULATE ON"<<std::endl;
                currentSubstring = true;
                subStringTable = snippet.filterInfo[index+1];
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+4];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                for(int j=0;j<valueVector.size();j++){
                    valueVector[j].erase(std::remove(valueVector[j].begin(), valueVector[j].end(),' '),valueVector[j].end());
                }
                subStringNum = std::stoi(valueVector[1]);
            }
            
            }
            else{ // and or 계산
                int index = ((itemp+1)/2)*6-1 + notCount;
                if(snippet.filterInfo[index] == "13"){
                    filterRatio.push_back(1);
                }
                else if(snippet.filterInfo[index] == "14"){
                    filterRatio.push_back(0);
                }
            }
        }
    }
    else{
        bool currentSubstring = false;
        int subStringNum = 0;
        std::string subStringTable = "";
        std::vector<std::string> tableList;
    for(int i=0;i<snippet.filterCount;i++){
        if(currentSubstring){ // substring 처립 부분
                histogram targetTable = Stringtohisto(subStringTable);
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo.back();
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                for(int j=0;j<valueVector.size();j++){
                    valueVector[j].erase(std::remove(valueVector[j].begin(),valueVector[j].end(),' '),valueVector[j].end());
                }

                int subNum = valueVector.size();
                float filterRatioTemp;
                filterRatioTemp = subNum / pow(10,subStringNum);
                filterRatio.push_back(filterRatioTemp);
                currentSubstring = false;
        }
        else if(i%2 == 0){ // 실제 계산
            int index = (i/2)*6;
            histogram targetTable = Stringtohisto(snippet.filterInfo[index+1]); // 타겟 히스토그램 테이블
            tableList.push_back(snippet.filterInfo[index+1]); // 타겟 테이블 리스트 정리 같은 컬럼 and, or 연산자 처리를 위함
            std::cout<<"SCAN TARGET TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
            std::cout<<"SCAN OPERATOR : "<<snippet.filterInfo[index+2]<<std::endl;
            std::cout<<"SCAN DATA TYPE : "<<snippet.filterInfo[index+3]<<std::endl;

            for(int j=0;j<tableList.size()-1;j++){
                std::cout<<"INDEX : "<<j<<" PREV TABLE LIST : "<<tableList[j]<<std::endl;
            }

            if(snippet.filterInfo[index+2] == "1" | snippet.filterInfo[index+2] == "3"){ // >= or >

                    bool isduplicated = false;
                    int duplicateIndex = 0;
                    for(int k = 0;k<tableList.size()-1;k++){
                        std::cout<<"TABLE LIST NAME : "<<tableList[k]<<std::endl;
                        std::cout<<"1231232123"<<std::endl;
                        if(snippet.filterInfo[index+1] == tableList[k]){
                            isduplicated = true;
                            duplicateIndex = k;
                            std::cout<<"DUPLICATE INDEX : "<<k<<"DUPLICATED TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
                        }
                    }
                if(isduplicated){
            
                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatioTemp = 0.6323;
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                else{
                    if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if (snippet.filterInfo[index+2] == "3"){
                                if(temp1 > temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatioTemp = 0.6323;
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "1"){
                            if(temp1 >= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "3"){
                                if(temp1 > value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                if(isduplicated){
                    float prevRatio;
                    float curRatio;
                    float newRatio;
                    prevRatio = filterRatio[(duplicateIndex) * 2];
                    filterRatio[(duplicateIndex) * 2] = 1;
                    curRatio = filterRatio.back();
                    newRatio = prevRatio + curRatio - 1;
                    filterRatio.pop_back();
                    filterRatio.push_back(newRatio);
                     std::cout<<"RATIO LIST"<<std::endl;
                    for(int p = 0;p<filterRatio.size();p++){
                        std::cout<<filterRatio[p]<<" ";
                    }
                    std::cout<<"\n";
                    std::cout<<"PREV RATIO : "<<prevRatio << " CUR RATIO : "<<curRatio<<std::endl;
                    std::cout<<"NEW CALCULATED RATIO : "<<newRatio<<std::endl;
                    isduplicated = false;   
                }
            }
            else if(snippet.filterInfo[index+2] == "2" | snippet.filterInfo[index+2] == "4"){ // <= or <

            bool isduplicated = false;
                int duplicateIndex = 0;
                for(int k = 0;k<tableList.size()-1;k++){
                    if(snippet.filterInfo[index+1] == tableList[k]){
                        isduplicated = true;
                        duplicateIndex = k;
                        std::cout<<"DUPLICATE INDEX : "<<k<<"DUPLICATED TABLE : "<<snippet.filterInfo[index+1]<<std::endl;
                    }
                }

                if(isduplicated){

                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatioTemp = 0.6323;
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                else{
                    if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::cout<<"WRONG DATATYPE AND OPERATOR TYPE >= , STRING"<<std::endl;
                }
                else if(snippet.filterInfo[index+3] == "10"){
                    histogram targetTable2 = Stringtohisto(snippet.filterInfo[index+4]);
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    float filterCountTemp = 0;
                    float temp1 = 0;
                    for(auto iter1 = targetTable.dataMap.begin();iter1!= targetTable.dataMap.end();iter1++){
                        float temp1 = std::stof(iter1 ->first);
                        filterCountTemp = 0;
                        for(auto iter2 = targetTable2.dataMap.begin();iter2!= targetTable2.dataMap.end();iter2++){
                            float temp2 = std::stof(iter2 -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < temp2){
                                filterCountTemp += std::stof(iter2 -> second);
                            }
                            }
                        }
                        temp1 = filterCountTemp / targetTable.count;
                        filterCount += std::stof(iter1 -> second) * temp1;
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatioTemp = 0.6323;
                    filterRatio.push_back(filterRatioTemp);
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(snippet.filterInfo[index+2] == "2"){
                            if(temp1 <= value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                            else if(snippet.filterInfo[index+2] == "4"){
                                if(temp1 < value){
                                filterCount += std::stof(iter -> second);
                            }
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                }
                if(isduplicated){
                    float prevRatio;
                    float curRatio;
                    float newRatio;
                    prevRatio = filterRatio[(duplicateIndex) * 2];
                    filterRatio[(duplicateIndex) * 2] = 1;
                    curRatio = filterRatio.back();
                    newRatio = prevRatio + curRatio - 1;
                    filterRatio.pop_back();
                    filterRatio.push_back(newRatio);
                    std::cout<<"RATIO LIST"<<std::endl;
                    for(int p = 0;p<filterRatio.size();p++){
                        std::cout<<filterRatio[p]<<" ";
                    }
                    std::cout<<"\n";
                    std::cout<<"PREV RATIO : "<<prevRatio << " CUR RATIO : "<<curRatio<<std::endl;
                    std::cout<<"NEW CALCULATED RATIO : "<<newRatio<<std::endl;
                    isduplicated = false;   
                }
            }
            else if(snippet.filterInfo[index+2] == "5"){ // = 연산자
                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else if(snippet.filterInfo[index+3] == "9") // string의 경우
                {
                    std::string value = snippet.filterInfo[index+4];
                    value.erase(std::remove(value.begin(), value.end(), ' '),value.end()); // 공백 제거 string 
                    if(targetTable.identifier == true){ // identifier true
                        float temp = 1.0f / targetTable.count;
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            std::string temp1 = iter -> first;
                        
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else{ // 숫자인 경우
                    float value = std::stof(snippet.filterInfo[index+4]);
                    if(targetTable.identifier == true){ // identifier true
                        float temp = (targetTable.maxValue - std::stof(snippet.filterInfo[index+4])+1) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{ // identifier false
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            
                            if(temp1 == value){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp += filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
            }
            else if(snippet.filterInfo[index+2] == "6"){ // != CSD단에서는 해당 연산자 수행하지 않음

            }
            else if(snippet.filterInfo[index+2] == "7"){ // like string인경우 밖에 없음
                std::string value = snippet.filterInfo[index+4];
                float filterRatioTemp = 0;
                float filterCount = 0;
                std::string pattern = value;
                std::string regexPattern = std::regex_replace(pattern, std::regex("%"), ".*");
                regexPattern = std::regex_replace(regexPattern, std::regex("_"), ".");
                std::regex regexObject(regexPattern);

                for(auto iter =targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                // 입력 문자열과 매치 여부 확인
                    std::string temp1 = iter -> first;

                    if(std::regex_match(temp1, regexObject)){
                        filterCount += std::stof(iter -> second);
                    }
                    
                }
                filterRatioTemp = filterCount / targetTable.count; 

                if(filterCount == 0){
                    filterRatioTemp = 0.05425;
                }
                filterRatio.push_back(filterRatioTemp);
            }
            else if(snippet.filterInfo[index+2] == "8"){ // between 
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+4];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                float leftValue = std::stof(valueVector[0]);
                float rightValue = std::stof(valueVector[1]);
                if(snippet.filterInfo[index+3] == "7"){ // date의 경우
                    if(targetTable.identifier == true){
                        float temp = (rightValue - leftValue) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(temp1 >= leftValue & temp1 <= rightValue){
                                filterCount += std::stof(iter -> second);
                            }
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
                else{ // 숫자의 경우
                    if(targetTable.identifier == true){
                        float temp = (rightValue - leftValue) / (targetTable.maxValue - targetTable.minValue);
                        filterRatio.push_back(temp);
                    }
                    else{
                        float filterRatioTemp = 0;
                        float filterCount = 0;
                        for(auto iter = targetTable.dataMap.begin();iter != targetTable.dataMap.end();iter++){
                            float temp1 = std::stof(iter -> first);
                            if(temp1 >= leftValue & temp1 <= rightValue){
                                filterCount += std::stof(iter -> second);
                            }
                            
                        }
                        filterRatioTemp = filterCount / targetTable.count; 
                        filterRatio.push_back(filterRatioTemp);
                    }
                }
            }
            else if(snippet.filterInfo[index+2] == "9"){ // in 해야됌, only string
                std::vector<std::string> valueVector;
                std::string s = snippet.filterInfo[index+4];
                std::istringstream ss(s);
                std::string subs;
                while(std::getline(ss,subs,'|')){
                    valueVector.push_back(subs);
                }
                for(int j=0;j<valueVector.size();j++){
                    valueVector[j].erase(std::remove(valueVector[j].begin(), valueVector[j].end(), ' '),valueVector[j].end());
                }

                if(targetTable.identifier == true){
                    float temp = valueVector.size() / targetTable.count;
                    filterRatio.push_back(temp);
                }
                else{
                    float filterRatioTemp = 0;
                    float filterCount = 0;
                    for(auto iter = targetTable.dataMap.begin(); iter != targetTable.dataMap.end(); iter++){
                        for(int j = 0;j < valueVector.size();j++){
                            if(iter->first == valueVector[j]){ // string found
                                filterCount += std::stof(iter -> second);
                            }
                            else{ // string not found
                            }
                        }
                    }
                    filterRatioTemp = filterCount / targetTable.count;
                    filterRatio.push_back(filterRatioTemp);
                }
            }
            else if(snippet.filterInfo[index+2] == "16"){
                std::cout<<"SUBSTRING CALCULATE ON"<<std::endl;
                currentSubstring = true;
                subStringTable = snippet.filterInfo[index+1];
                std::vector<std::string> valueVector;
                subStringNum = std::stoi(snippet.filterInfo[index+4]);
                std::cout<<"SUBSTRING CALCULATE FINISHED"<<std::endl;
            }
        }
        else if(i%2 == 1){ // 중간 연산자 or, and
            int index = ((i+1)/2)*6-1;
            if(snippet.filterInfo[index] == "13"){
                filterRatio.push_back(1);
            }
            else if(snippet.filterInfo[index] == "14"){
                filterRatio.push_back(0);
            }
        }
    }
    }
    float resultRatio = 1;
    bool andon = false;
    bool oron  = false;
    for(int j=0;j<filterRatio.size();j++){
        if( j == 0){
            resultRatio *= filterRatio[j];
        }
        else if(j%2 == 0){ // ratio 계산
            if(oron == true){
                resultRatio += filterRatio[j];
            }
            else if(andon == true){
                resultRatio *= filterRatio[j];
            }
        }
        else{ // 연산자 계산
            if(filterRatio[j] == 0){
                oron = true;
                andon = false; 
            }
            if(filterRatio[j] == 1){
                oron = false;
                andon = true;
            }
        }
        std::cout<<"FILTER RATIO : "<<filterRatio[j]<<std::endl;
    }
    std::cout<<"RESULT RATIO : "<<resultRatio<<std::endl;
    return resultRatio;
}

histogram Stringtohisto(std::string str){
    if(str == "p_partkey")
        return p_partkey;
    else if(str == "p_name")
        return p_name;
    else if(str == "p_mfgr")
        return p_mfgr;
    else if(str == "p_brand")
        return p_brand;
    else if(str == "p_type")
        return p_type;
    else if(str == "p_size")
        return p_size;
    else if(str == "p_container")
        return p_container;
    else if(str == "p_retailprice")
        return p_retailprice;
    else if(str == "p_comment")
        return p_comment;
    else if(str == "s_suppkey")
        return s_suppkey;
    else if(str == "s_name")
        return s_name;
    else if(str == "s_address")
        return s_address;
    else if(str == "s_nationkey")
        return s_nationkey;
    else if(str == "s_phone")
        return s_phone;
    else if(str == "s_acctbal")
        return s_acctbal;
    else if(str == "s_comment")
        return s_comment;
    else if(str == "ps_partkey")
        return ps_partkey;
    else if(str == "ps_suppkey")
        return ps_suppkey;
    else if(str == "ps_availqty")
        return ps_availqty;
    else if(str == "ps_supplycost")
        return ps_supplycost;
    else if(str == "ps_comment")
        return ps_comment;
    else if(str == "c_custkey")
        return c_custkey;
    else if(str == "c_name")
        return c_name;
    else if(str == "c_address")
        return c_address;
    else if(str == "c_nationkey")
        return c_nationkey;
    else if(str == "c_phone")
        return c_phone;
    else if(str == "c_acctbal")
        return c_acctbal;
    else if(str == "c_mktsegment")
        return c_mktsegment;
    else if(str == "c_comment")
        return c_comment;
    else if(str == "o_orderkey")
        return o_orderkey;
    else if(str == "o_custkey")
        return o_custkey;
    else if(str == "o_orderstatus")
        return o_orderstatus;
    else if(str == "o_totalprice")
        return o_totalprice;
    else if(str == "o_orderdate")
        return o_orderdate;
    else if(str == "o_orderpriority")
        return o_orderpriority;
    else if(str == "o_clerk")
        return o_clerk;
    else if(str == "o_shippriority")
        return o_shippriority;
    else if(str == "o_comment")
        return o_comment;
    else if(str == "l_orderkey")
        return l_orderkey;
    else if(str == "l_partkey")
        return l_partkey;
    else if(str == "l_suppkey")
        return l_suppkey;
    else if(str == "l_linenumber")
        return l_linenumber;
    else if(str == "l_quantity")
        return l_quantity;
    else if(str == "l_extendedprice")
        return l_extendedprice;
    else if(str == "l_discount")
        return l_discount;
    else if(str == "l_tax")
        return l_tax;
    else if(str == "l_returnflag")
        return l_returnflag;
    else if(str == "l_linestatus")
        return l_linestatus;
    else if(str == "l_shipdate")
        return l_shipdate;
    else if(str == "l_commitdate")
        return l_commitdate;
    else if(str == "l_receiptdate")
        return l_receiptdate;
    else if(str == "l_shipinstruct")
        return l_shipinstruct;
    else if(str == "l_shipmode")
        return l_shipmode;
    else if(str == "l_comment")
        return l_comment;
    else if(str == "n_nationkey")
        return n_nationkey;
    else if(str == "n_name")
        return n_name;
    else if(str == "n_regionkey")
        return n_regionkey;
    else if(str == "n_comment")
        return n_comment;
    else if(str == "r_regionkey")
        return r_regionkey;
    else if(str == "r_name")
        return r_name;
    else if(str == "r_comment")
        return r_comment;
}
