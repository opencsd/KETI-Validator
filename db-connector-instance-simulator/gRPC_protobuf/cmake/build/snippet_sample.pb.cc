// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippet_sample.proto

#include "snippet_sample.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace StorageEngineInstance {
constexpr SnippetRequest::SnippetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snippet_(nullptr)
  , type_(0)
{}
struct SnippetRequestDefaultTypeInternal {
  constexpr SnippetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
constexpr Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_()
  , _type_cached_byte_size_(0)
  , value_(){}
struct Snippet_Filter_FilterValueDefaultTypeInternal {
  constexpr Snippet_Filter_FilterValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_Filter_FilterValueDefaultTypeInternal() {}
  union {
    Snippet_Filter_FilterValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
constexpr Snippet_Filter::Snippet_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_()
  , lv_(nullptr)
  , rv_(nullptr)
  , operator__(0)
{}
struct Snippet_FilterDefaultTypeInternal {
  constexpr Snippet_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_FilterDefaultTypeInternal() {}
  union {
    Snippet_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
constexpr Snippet_Projection::Snippet_Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , value_type_()
  , _value_type_cached_byte_size_(0)
  , select_type_(0)
{}
struct Snippet_ProjectionDefaultTypeInternal {
  constexpr Snippet_ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_ProjectionDefaultTypeInternal() {}
  union {
    Snippet_Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
constexpr Snippet_Order::Snippet_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ascending_()
  , _ascending_cached_byte_size_(0)
  , column_name_(){}
struct Snippet_OrderDefaultTypeInternal {
  constexpr Snippet_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_OrderDefaultTypeInternal() {}
  union {
    Snippet_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
constexpr Snippet_Dependency::Snippet_Dependency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependency_projection_()
  , dependency_filter_(){}
struct Snippet_DependencyDefaultTypeInternal {
  constexpr Snippet_DependencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_DependencyDefaultTypeInternal() {}
  union {
    Snippet_Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
constexpr Snippet_Limit::Snippet_Limit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0){}
struct Snippet_LimitDefaultTypeInternal {
  constexpr Snippet_LimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_LimitDefaultTypeInternal() {}
  union {
    Snippet_Limit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_LimitDefaultTypeInternal _Snippet_Limit_default_instance_;
constexpr Snippet::Snippet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_()
  , table_col_()
  , table_filter_()
  , table_offset_()
  , _table_offset_cached_byte_size_(0)
  , table_offlen_()
  , _table_offlen_cached_byte_size_(0)
  , table_datatype_()
  , _table_datatype_cached_byte_size_(0)
  , column_alias_()
  , column_projection_()
  , column_filtering_()
  , group_by_()
  , table_alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dependency_(nullptr)
  , order_by_(nullptr)
  , limit_(nullptr)
  , query_id_(0)
  , work_id_(0){}
struct SnippetDefaultTypeInternal {
  constexpr SnippetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetDefaultTypeInternal() {}
  union {
    Snippet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetDefaultTypeInternal _Snippet_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_id_(0)
  , work_id_(0){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace StorageEngineInstance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snippet_5fsample_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snippet_5fsample_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snippet_5fsample_2eproto = nullptr;

const uint32_t TableStruct_snippet_5fsample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, snippet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, lv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, operator__),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, rv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, select_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, ascending_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_filter_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, dependency_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offlen_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_datatype_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_filtering_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, group_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, order_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, table_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest)},
  { 8, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter_FilterValue)},
  { 16, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter)},
  { 26, -1, -1, sizeof(::StorageEngineInstance::Snippet_Projection)},
  { 35, -1, -1, sizeof(::StorageEngineInstance::Snippet_Order)},
  { 43, -1, -1, sizeof(::StorageEngineInstance::Snippet_Dependency)},
  { 51, -1, -1, sizeof(::StorageEngineInstance::Snippet_Limit)},
  { 59, -1, -1, sizeof(::StorageEngineInstance::Snippet)},
  { 81, -1, -1, sizeof(::StorageEngineInstance::Request)},
  { 90, -1, -1, sizeof(::StorageEngineInstance::Result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Limit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Result_default_instance_),
};

const char descriptor_table_protodef_snippet_5fsample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024snippet_sample.proto\022\025StorageEngineIns"
  "tance\"\317\003\n\016SnippetRequest\022\?\n\004type\030\001 \001(\01621"
  ".StorageEngineInstance.SnippetRequest.Sn"
  "ippetType\022/\n\007snippet\030\002 \001(\0132\036.StorageEngi"
  "neInstance.Snippet\"\312\002\n\013SnippetType\022\020\n\014SC"
  "AN_SNIPPET\020\000\022\027\n\023AGGREGATION_SNIPPET\020\001\022\026\n"
  "\022INNER_JOIN_SNIPPET\020\002\022\033\n\027LEFT_OUTER_JOIN"
  "_SNIPPET\020\003\022\034\n\030RIGHT_OUTER_JOIN_SNIPPET\020\004"
  "\022\033\n\027FULL_OUTER_JOIN_SNIPPET\020\005\022\024\n\020SUBQUER"
  "Y_SNIPPET\020\006\022\034\n\030DEPENDENCY_EXIST_SNIPPET\020"
  "\007\022 \n\034DEPENDENCY_NOT_EXIST_SNIPPET\020\010\022\033\n\027D"
  "EPENDENCY_OPER_SNIPPET\020\t\022\031\n\025DEPENDENCY_I"
  "N_SNIPPET\020\n\022\022\n\016FILTER_SNIPPET\020\013\"\237\017\n\007Snip"
  "pet\022\020\n\010query_ID\030\001 \001(\005\022\017\n\007work_ID\030\002 \001(\005\022\022"
  "\n\ntable_name\030\003 \003(\t\022\021\n\ttable_col\030\004 \003(\t\022;\n"
  "\014table_filter\030\005 \003(\0132%.StorageEngineInsta"
  "nce.Snippet.Filter\022=\n\ndependency\030\006 \001(\0132)"
  ".StorageEngineInstance.Snippet.Dependenc"
  "y\022\024\n\014table_offset\030\007 \003(\005\022\024\n\014table_offlen\030"
  "\010 \003(\005\022\026\n\016table_datatype\030\t \003(\005\022\023\n\013table_a"
  "lias\030\n \001(\t\022\024\n\014column_alias\030\013 \003(\t\022D\n\021colu"
  "mn_projection\030\014 \003(\0132).StorageEngineInsta"
  "nce.Snippet.Projection\022\030\n\020column_filteri"
  "ng\030\r \003(\t\022\020\n\010group_by\030\016 \003(\t\0226\n\010order_by\030\017"
  " \001(\0132$.StorageEngineInstance.Snippet.Ord"
  "er\0223\n\005limit\030\020 \001(\0132$.StorageEngineInstanc"
  "e.Snippet.Limit\032\204\005\n\006Filter\022=\n\002LV\030\001 \001(\01321"
  ".StorageEngineInstance.Snippet.Filter.Fi"
  "lterValue\022@\n\010Operator\030\002 \001(\0162..StorageEng"
  "ineInstance.Snippet.Filter.OperType\022=\n\002R"
  "V\030\003 \001(\01321.StorageEngineInstance.Snippet."
  "Filter.FilterValue\022@\n\005EXTRA\030\004 \003(\01321.Stor"
  "ageEngineInstance.Snippet.Filter.FilterV"
  "alue\032T\n\013FilterValue\0226\n\004type\030\001 \003(\0162(.Stor"
  "ageEngineInstance.Snippet.ValueType\022\r\n\005v"
  "alue\030\002 \003(\t\"\241\002\n\010OperType\022\020\n\014KETI_DEFAULT\020"
  "\000\022\013\n\007KETI_GE\020\001\022\013\n\007KETI_LE\020\002\022\013\n\007KETI_GT\020\003"
  "\022\013\n\007KETI_LT\020\004\022\013\n\007KETI_ET\020\005\022\013\n\007KETI_NE\020\006\022"
  "\r\n\tKETI_LIKE\020\007\022\020\n\014KETI_BETWEEN\020\010\022\013\n\007KETI"
  "_IN\020\t\022\013\n\007KETI_IS\020\n\022\016\n\nKETI_ISNOT\020\013\022\014\n\010KE"
  "TI_NOT\020\014\022\014\n\010KETI_AND\020\r\022\013\n\007KETI_OR\020\016\022\025\n\021K"
  "ETI_BRACKET_OPEN\020\017\022\026\n\022KETI_BRACKET_CLOSE"
  "\020\020\022\022\n\016KETI_SUBSTRING\020\021\032\211\002\n\nProjection\022I\n"
  "\013select_type\030\001 \001(\01624.StorageEngineInstan"
  "ce.Snippet.Projection.SelectType\022\r\n\005valu"
  "e\030\002 \003(\t\022<\n\nvalue_type\030\003 \003(\0162(.StorageEng"
  "ineInstance.Snippet.ValueType\"c\n\nSelectT"
  "ype\022\016\n\nCOLUMNNAME\020\000\022\007\n\003SUM\020\001\022\007\n\003AVG\020\002\022\t\n"
  "\005COUNT\020\003\022\r\n\tCOUNTSTAR\020\004\022\007\n\003TOP\020\005\022\007\n\003MIN\020"
  "\006\022\007\n\003MAX\020\007\032\211\001\n\005Order\022F\n\tascending\030\001 \003(\0162"
  "3.StorageEngineInstance.Snippet.Order.Or"
  "derDirection\022\023\n\013column_name\030\002 \003(\t\"#\n\016Ord"
  "erDirection\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\032\230\001\n\nDepen"
  "dency\022H\n\025dependency_projection\030\001 \003(\0132).S"
  "torageEngineInstance.Snippet.Projection\022"
  "@\n\021dependency_filter\030\002 \003(\0132%.StorageEngi"
  "neInstance.Snippet.Filter\032\'\n\005Limit\022\016\n\006of"
  "fset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\234\001\n\tValueType"
  "\022\010\n\004INT8\020\000\022\t\n\005INT16\020\001\022\t\n\005INT32\020\002\022\t\n\005INT6"
  "4\020\003\022\013\n\007FLOAT32\020\004\022\013\n\007FLOAT64\020\005\022\013\n\007NUMERIC"
  "\020\006\022\010\n\004DATE\020\007\022\r\n\tTIMESTAMP\020\010\022\n\n\006STRING\020\t\022"
  "\n\n\006COLUMN\020\n\022\014\n\010OPERATOR\020\013\"@\n\007Request\022\020\n\010"
  "query_id\030\001 \001(\005\022\017\n\007work_id\030\002 \001(\005\022\022\n\ntable"
  "_name\030\003 \001(\t\"\027\n\006Result\022\r\n\005value\030\001 \001(\t2\266\001\n"
  "\022InterfaceContainer\022X\n\nSetSnippet\022%.Stor"
  "ageEngineInstance.SnippetRequest\032\035.Stora"
  "geEngineInstance.Result\"\000(\0010\001\022F\n\003Run\022\036.S"
  "torageEngineInstance.Request\032\035.StorageEn"
  "gineInstance.Result\"\000B6\n\026io.grpc.snippet"
  "_sampleB\024snippet_sample_ProtoP\001\242\002\003SSPb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snippet_5fsample_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snippet_5fsample_2eproto = {
  false, false, 2805, descriptor_table_protodef_snippet_5fsample_2eproto, "snippet_sample.proto", 
  &descriptor_table_snippet_5fsample_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_snippet_5fsample_2eproto::offsets,
  file_level_metadata_snippet_5fsample_2eproto, file_level_enum_descriptors_snippet_5fsample_2eproto, file_level_service_descriptors_snippet_5fsample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_snippet_5fsample_2eproto_getter() {
  return &descriptor_table_snippet_5fsample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_snippet_5fsample_2eproto(&descriptor_table_snippet_5fsample_2eproto);
namespace StorageEngineInstance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[0];
}
bool SnippetRequest_SnippetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_SnippetType SnippetRequest::SCAN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::AGGREGATION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::INNER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::LEFT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::RIGHT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::FULL_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SUBQUERY_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_NOT_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_OPER_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::FILTER_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MIN;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MAX;
constexpr int SnippetRequest::SnippetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[1];
}
bool Snippet_Filter_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ET;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LIKE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BETWEEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IS;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ISNOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_AND;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_OR;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BRACKET_OPEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BRACKET_CLOSE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_SUBSTRING;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MIN;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MAX;
constexpr int Snippet_Filter::OperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[2];
}
bool Snippet_Projection_SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Projection_SelectType Snippet_Projection::COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection::SUM;
constexpr Snippet_Projection_SelectType Snippet_Projection::AVG;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNT;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTSTAR;
constexpr Snippet_Projection_SelectType Snippet_Projection::TOP;
constexpr Snippet_Projection_SelectType Snippet_Projection::MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::MAX;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MAX;
constexpr int Snippet_Projection::SelectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[3];
}
bool Snippet_Order_OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Order_OrderDirection Snippet_Order::ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order::DESC;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MIN;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MAX;
constexpr int Snippet_Order::OrderDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snippet_5fsample_2eproto);
  return file_level_enum_descriptors_snippet_5fsample_2eproto[4];
}
bool Snippet_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_ValueType Snippet::INT8;
constexpr Snippet_ValueType Snippet::INT16;
constexpr Snippet_ValueType Snippet::INT32;
constexpr Snippet_ValueType Snippet::INT64;
constexpr Snippet_ValueType Snippet::FLOAT32;
constexpr Snippet_ValueType Snippet::FLOAT64;
constexpr Snippet_ValueType Snippet::NUMERIC;
constexpr Snippet_ValueType Snippet::DATE;
constexpr Snippet_ValueType Snippet::TIMESTAMP;
constexpr Snippet_ValueType Snippet::STRING;
constexpr Snippet_ValueType Snippet::COLUMN;
constexpr Snippet_ValueType Snippet::OPERATOR;
constexpr Snippet_ValueType Snippet::ValueType_MIN;
constexpr Snippet_ValueType Snippet::ValueType_MAX;
constexpr int Snippet::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet& snippet(const SnippetRequest* msg);
};

const ::StorageEngineInstance::Snippet&
SnippetRequest::_Internal::snippet(const SnippetRequest* msg) {
  return *msg->snippet_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snippet()) {
    snippet_ = new ::StorageEngineInstance::Snippet(*from.snippet_);
  } else {
    snippet_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest)
}

inline void SnippetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&snippet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&snippet_)) + sizeof(type_));
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete snippet_;
}

void SnippetRequest::ArenaDtor(void* object) {
  SnippetRequest* _this = reinterpret_cast< SnippetRequest* >(object);
  (void)_this;
}
void SnippetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && snippet_ != nullptr) {
    delete snippet_;
  }
  snippet_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::StorageEngineInstance::SnippetRequest_SnippetType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snippet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snippet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snippet_);
  }

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }

void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest *>(to)->MergeFrom(
      static_cast<const SnippetRequest &>(from));
}


void SnippetRequest::MergeFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snippet()) {
    _internal_mutable_snippet()->::StorageEngineInstance::Snippet::MergeFrom(from._internal_snippet());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, type_)
      + sizeof(SnippetRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, snippet_)>(
          reinterpret_cast<char*>(&snippet_),
          reinterpret_cast<char*>(&other->snippet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[0]);
}

// ===================================================================

class Snippet_Filter_FilterValue::_Internal {
 public:
};

Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  type_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}
Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}

inline void Snippet_Filter_FilterValue::SharedCtor() {
}

Snippet_Filter_FilterValue::~Snippet_Filter_FilterValue() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter_FilterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Filter_FilterValue::ArenaDtor(void* object) {
  Snippet_Filter_FilterValue* _this = reinterpret_cast< Snippet_Filter_FilterValue* >(object);
  (void)_this;
}
void Snippet_Filter_FilterValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter_FilterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter_FilterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter_FilterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Filter.FilterValue.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter_FilterValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Filter.FilterValue.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter.FilterValue)
  return target;
}

size_t Snippet_Filter_FilterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter_FilterValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter_FilterValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter_FilterValue::GetClassData() const { return &_class_data_; }

void Snippet_Filter_FilterValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter_FilterValue *>(to)->MergeFrom(
      static_cast<const Snippet_Filter_FilterValue &>(from));
}


void Snippet_Filter_FilterValue::MergeFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter_FilterValue::CopyFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter_FilterValue::IsInitialized() const {
  return true;
}

void Snippet_Filter_FilterValue::InternalSwap(Snippet_Filter_FilterValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter_FilterValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[1]);
}

// ===================================================================

class Snippet_Filter::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& lv(const Snippet_Filter* msg);
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& rv(const Snippet_Filter* msg);
};

const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::lv(const Snippet_Filter* msg) {
  return *msg->lv_;
}
const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::rv(const Snippet_Filter* msg) {
  return *msg->rv_;
}
Snippet_Filter::Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter)
}
Snippet_Filter::Snippet_Filter(const Snippet_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_(from.extra_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lv()) {
    lv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.lv_);
  } else {
    lv_ = nullptr;
  }
  if (from._internal_has_rv()) {
    rv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.rv_);
  } else {
    rv_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter)
}

inline void Snippet_Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&lv_)) + sizeof(operator__));
}

Snippet_Filter::~Snippet_Filter() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lv_;
  if (this != internal_default_instance()) delete rv_;
}

void Snippet_Filter::ArenaDtor(void* object) {
  Snippet_Filter* _this = reinterpret_cast< Snippet_Filter* >(object);
  (void)_this;
}
void Snippet_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.Clear();
  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::StorageEngineInstance::Snippet_Filter_OperType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lv(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rv(this), target, stream);
  }

  // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_extra(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter)
  return target;
}

size_t Snippet_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
  total_size += 1UL * this->_internal_extra_size();
  for (const auto& msg : this->extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lv_);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rv_);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter::GetClassData() const { return &_class_data_; }

void Snippet_Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter *>(to)->MergeFrom(
      static_cast<const Snippet_Filter &>(from));
}


void Snippet_Filter::MergeFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_.MergeFrom(from.extra_);
  if (from._internal_has_lv()) {
    _internal_mutable_lv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_lv());
  }
  if (from._internal_has_rv()) {
    _internal_mutable_rv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_rv());
  }
  if (from._internal_operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter::CopyFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter::IsInitialized() const {
  return true;
}

void Snippet_Filter::InternalSwap(Snippet_Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extra_.InternalSwap(&other->extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Filter, operator__)
      + sizeof(Snippet_Filter::operator__)
      - PROTOBUF_FIELD_OFFSET(Snippet_Filter, lv_)>(
          reinterpret_cast<char*>(&lv_),
          reinterpret_cast<char*>(&other->lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[2]);
}

// ===================================================================

class Snippet_Projection::_Internal {
 public:
};

Snippet_Projection::Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  value_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Projection)
}
Snippet_Projection::Snippet_Projection(const Snippet_Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      value_type_(from.value_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_type_ = from.select_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Projection)
}

inline void Snippet_Projection::SharedCtor() {
select_type_ = 0;
}

Snippet_Projection::~Snippet_Projection() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Projection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Projection::ArenaDtor(void* object) {
  Snippet_Projection* _this = reinterpret_cast< Snippet_Projection* >(object);
  (void)_this;
}
void Snippet_Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  value_type_.Clear();
  select_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_select_type(static_cast<::StorageEngineInstance::Snippet_Projection_SelectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Projection.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_select_type(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Projection.value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    int byte_size = _value_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, value_type_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Projection)
  return target;
}

size_t Snippet_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_value_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_select_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Projection::GetClassData() const { return &_class_data_; }

void Snippet_Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Projection *>(to)->MergeFrom(
      static_cast<const Snippet_Projection &>(from));
}


void Snippet_Projection::MergeFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  value_type_.MergeFrom(from.value_type_);
  if (from._internal_select_type() != 0) {
    _internal_set_select_type(from._internal_select_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Projection::CopyFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Projection::IsInitialized() const {
  return true;
}

void Snippet_Projection::InternalSwap(Snippet_Projection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  value_type_.InternalSwap(&other->value_type_);
  swap(select_type_, other->select_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Projection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[3]);
}

// ===================================================================

class Snippet_Order::_Internal {
 public:
};

Snippet_Order::Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ascending_(arena),
  column_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Order)
}
Snippet_Order::Snippet_Order(const Snippet_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ascending_(from.ascending_),
      column_name_(from.column_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Order)
}

inline void Snippet_Order::SharedCtor() {
}

Snippet_Order::~Snippet_Order() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Order)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Order::ArenaDtor(void* object) {
  Snippet_Order* _this = reinterpret_cast< Snippet_Order* >(object);
  (void)_this;
}
void Snippet_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascending_.Clear();
  column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ascending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ascending(static_cast<::StorageEngineInstance::Snippet_Order_OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Order.column_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    int byte_size = _ascending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ascending_, byte_size, target);
    }
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Order.column_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Order)
  return target;
}

size_t Snippet_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ascending_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ascending(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ascending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Order::GetClassData() const { return &_class_data_; }

void Snippet_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Order *>(to)->MergeFrom(
      static_cast<const Snippet_Order &>(from));
}


void Snippet_Order::MergeFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Order)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ascending_.MergeFrom(from.ascending_);
  column_name_.MergeFrom(from.column_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Order::CopyFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Order::IsInitialized() const {
  return true;
}

void Snippet_Order::InternalSwap(Snippet_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ascending_.InternalSwap(&other->ascending_);
  column_name_.InternalSwap(&other->column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Order::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[4]);
}

// ===================================================================

class Snippet_Dependency::_Internal {
 public:
};

Snippet_Dependency::Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dependency_projection_(arena),
  dependency_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Dependency)
}
Snippet_Dependency::Snippet_Dependency(const Snippet_Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependency_projection_(from.dependency_projection_),
      dependency_filter_(from.dependency_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Dependency)
}

inline void Snippet_Dependency::SharedCtor() {
}

Snippet_Dependency::~Snippet_Dependency() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Dependency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Dependency::ArenaDtor(void* object) {
  Snippet_Dependency* _this = reinterpret_cast< Snippet_Dependency* >(object);
  (void)_this;
}
void Snippet_Dependency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependency_projection_.Clear();
  dependency_filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependency_projection(i), target, stream);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dependency_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Dependency)
  return target;
}

size_t Snippet_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  total_size += 1UL * this->_internal_dependency_projection_size();
  for (const auto& msg : this->dependency_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  total_size += 1UL * this->_internal_dependency_filter_size();
  for (const auto& msg : this->dependency_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Dependency::GetClassData() const { return &_class_data_; }

void Snippet_Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Dependency *>(to)->MergeFrom(
      static_cast<const Snippet_Dependency &>(from));
}


void Snippet_Dependency::MergeFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dependency_projection_.MergeFrom(from.dependency_projection_);
  dependency_filter_.MergeFrom(from.dependency_filter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Dependency::CopyFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Dependency::IsInitialized() const {
  return true;
}

void Snippet_Dependency::InternalSwap(Snippet_Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependency_projection_.InternalSwap(&other->dependency_projection_);
  dependency_filter_.InternalSwap(&other->dependency_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Dependency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[5]);
}

// ===================================================================

class Snippet_Limit::_Internal {
 public:
};

Snippet_Limit::Snippet_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Limit)
}
Snippet_Limit::Snippet_Limit(const Snippet_Limit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Limit)
}

inline void Snippet_Limit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

Snippet_Limit::~Snippet_Limit() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Limit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Limit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Limit::ArenaDtor(void* object) {
  Snippet_Limit* _this = reinterpret_cast< Snippet_Limit* >(object);
  (void)_this;
}
void Snippet_Limit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Limit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Limit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Limit)
  return target;
}

size_t Snippet_Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Limit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Limit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Limit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Limit::GetClassData() const { return &_class_data_; }

void Snippet_Limit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Limit *>(to)->MergeFrom(
      static_cast<const Snippet_Limit &>(from));
}


void Snippet_Limit::MergeFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Limit::CopyFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Limit::IsInitialized() const {
  return true;
}

void Snippet_Limit::InternalSwap(Snippet_Limit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Limit, length_)
      + sizeof(Snippet_Limit::length_)
      - PROTOBUF_FIELD_OFFSET(Snippet_Limit, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Limit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[6]);
}

// ===================================================================

class Snippet::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Dependency& dependency(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Order& order_by(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Limit& limit(const Snippet* msg);
};

const ::StorageEngineInstance::Snippet_Dependency&
Snippet::_Internal::dependency(const Snippet* msg) {
  return *msg->dependency_;
}
const ::StorageEngineInstance::Snippet_Order&
Snippet::_Internal::order_by(const Snippet* msg) {
  return *msg->order_by_;
}
const ::StorageEngineInstance::Snippet_Limit&
Snippet::_Internal::limit(const Snippet* msg) {
  return *msg->limit_;
}
Snippet::Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_(arena),
  table_col_(arena),
  table_filter_(arena),
  table_offset_(arena),
  table_offlen_(arena),
  table_datatype_(arena),
  column_alias_(arena),
  column_projection_(arena),
  column_filtering_(arena),
  group_by_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_name_(from.table_name_),
      table_col_(from.table_col_),
      table_filter_(from.table_filter_),
      table_offset_(from.table_offset_),
      table_offlen_(from.table_offlen_),
      table_datatype_(from.table_datatype_),
      column_alias_(from.column_alias_),
      column_projection_(from.column_projection_),
      column_filtering_(from.column_filtering_),
      group_by_(from.group_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_alias().empty()) {
    table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dependency()) {
    dependency_ = new ::StorageEngineInstance::Snippet_Dependency(*from.dependency_);
  } else {
    dependency_ = nullptr;
  }
  if (from._internal_has_order_by()) {
    order_by_ = new ::StorageEngineInstance::Snippet_Order(*from.order_by_);
  } else {
    order_by_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::StorageEngineInstance::Snippet_Limit(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet)
}

inline void Snippet::SharedCtor() {
table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dependency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&dependency_)) + sizeof(work_id_));
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dependency_;
  if (this != internal_default_instance()) delete order_by_;
  if (this != internal_default_instance()) delete limit_;
}

void Snippet::ArenaDtor(void* object) {
  Snippet* _this = reinterpret_cast< Snippet* >(object);
  (void)_this;
}
void Snippet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.Clear();
  table_col_.Clear();
  table_filter_.Clear();
  table_offset_.Clear();
  table_offlen_.Clear();
  table_datatype_.Clear();
  column_alias_.Clear();
  column_projection_.Clear();
  column_filtering_.Clear();
  group_by_.Clear();
  table_alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_id_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string table_col = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_col();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_col"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Dependency dependency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_table_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offlen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offlen(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_table_offlen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_datatype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_datatype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_table_datatype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_alias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_table_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_alias = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_alias();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_alias"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_filtering = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_filtering();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_filtering"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.group_by"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Order order_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Limit limit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // repeated string table_name = 3;
  for (int i = 0, n = this->_internal_table_name_size(); i < n; i++) {
    const auto& s = this->_internal_table_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string table_col = 4;
  for (int i = 0, n = this->_internal_table_col_size(); i < n; i++) {
    const auto& s = this->_internal_table_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_col");
    target = stream->WriteString(4, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_table_filter(i), target, stream);
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dependency(this), target, stream);
  }

  // repeated int32 table_offset = 7;
  {
    int byte_size = _table_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_table_offset(), byte_size, target);
    }
  }

  // repeated int32 table_offlen = 8;
  {
    int byte_size = _table_offlen_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_table_offlen(), byte_size, target);
    }
  }

  // repeated int32 table_datatype = 9;
  {
    int byte_size = _table_datatype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_table_datatype(), byte_size, target);
    }
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_alias().data(), static_cast<int>(this->_internal_table_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_alias");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_table_alias(), target);
  }

  // repeated string column_alias = 11;
  for (int i = 0, n = this->_internal_column_alias_size(); i < n; i++) {
    const auto& s = this->_internal_column_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_alias");
    target = stream->WriteString(11, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_column_projection(i), target, stream);
  }

  // repeated string column_filtering = 13;
  for (int i = 0, n = this->_internal_column_filtering_size(); i < n; i++) {
    const auto& s = this->_internal_column_filtering(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_filtering");
    target = stream->WriteString(13, s, target);
  }

  // repeated string group_by = 14;
  for (int i = 0, n = this->_internal_group_by_size(); i < n; i++) {
    const auto& s = this->_internal_group_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.group_by");
    target = stream->WriteString(14, s, target);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::order_by(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  if (this->_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_name_.size());
  for (int i = 0, n = table_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_name_.Get(i));
  }

  // repeated string table_col = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_col_.size());
  for (int i = 0, n = table_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_col_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
  total_size += 1UL * this->_internal_table_filter_size();
  for (const auto& msg : this->table_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 table_offset = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_offlen = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offlen_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offlen_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_datatype = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_datatype_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_datatype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_alias = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_alias_.size());
  for (int i = 0, n = column_alias_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_alias_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
  total_size += 1UL * this->_internal_column_projection_size();
  for (const auto& msg : this->column_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_filtering = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_filtering_.size());
  for (int i = 0, n = column_filtering_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_filtering_.Get(i));
  }

  // repeated string group_by = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_.size());
  for (int i = 0, n = group_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_.Get(i));
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_alias());
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependency_);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_by_);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  if (this->_internal_has_limit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet::GetClassData() const { return &_class_data_; }

void Snippet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet *>(to)->MergeFrom(
      static_cast<const Snippet &>(from));
}


void Snippet::MergeFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_name_.MergeFrom(from.table_name_);
  table_col_.MergeFrom(from.table_col_);
  table_filter_.MergeFrom(from.table_filter_);
  table_offset_.MergeFrom(from.table_offset_);
  table_offlen_.MergeFrom(from.table_offlen_);
  table_datatype_.MergeFrom(from.table_datatype_);
  column_alias_.MergeFrom(from.column_alias_);
  column_projection_.MergeFrom(from.column_projection_);
  column_filtering_.MergeFrom(from.column_filtering_);
  group_by_.MergeFrom(from.group_by_);
  if (!from._internal_table_alias().empty()) {
    _internal_set_table_alias(from._internal_table_alias());
  }
  if (from._internal_has_dependency()) {
    _internal_mutable_dependency()->::StorageEngineInstance::Snippet_Dependency::MergeFrom(from._internal_dependency());
  }
  if (from._internal_has_order_by()) {
    _internal_mutable_order_by()->::StorageEngineInstance::Snippet_Order::MergeFrom(from._internal_order_by());
  }
  if (from._internal_has_limit()) {
    _internal_mutable_limit()->::StorageEngineInstance::Snippet_Limit::MergeFrom(from._internal_limit());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  return true;
}

void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_name_.InternalSwap(&other->table_name_);
  table_col_.InternalSwap(&other->table_col_);
  table_filter_.InternalSwap(&other->table_filter_);
  table_offset_.InternalSwap(&other->table_offset_);
  table_offlen_.InternalSwap(&other->table_offlen_);
  table_datatype_.InternalSwap(&other->table_datatype_);
  column_alias_.InternalSwap(&other->column_alias_);
  column_projection_.InternalSwap(&other->column_projection_);
  column_filtering_.InternalSwap(&other->column_filtering_);
  group_by_.InternalSwap(&other->group_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_alias_, lhs_arena,
      &other->table_alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet, work_id_)
      + sizeof(Snippet::work_id_)
      - PROTOBUF_FIELD_OFFSET(Snippet, dependency_)>(
          reinterpret_cast<char*>(&dependency_),
          reinterpret_cast<char*>(&other->dependency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[7]);
}

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Request)
}

inline void Request::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_id_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Request.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Request.table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, work_id_)
      + sizeof(Request::work_id_)
      - PROTOBUF_FIELD_OFFSET(Request, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[8]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Result)
}

inline void Result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Result.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }

void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Result *>(to)->MergeFrom(
      static_cast<const Result &>(from));
}


void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_snippet_5fsample_2eproto_getter, &descriptor_table_snippet_5fsample_2eproto_once,
      file_level_metadata_snippet_5fsample_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter_FilterValue* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter_FilterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter_FilterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Projection* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Order* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Dependency* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Limit* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Limit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Request* Arena::CreateMaybeMessage< ::StorageEngineInstance::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Result* Arena::CreateMaybeMessage< ::StorageEngineInstance::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
