// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snippet_sample.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snippet_5fsample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snippet_5fsample_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snippet_5fsample_2eproto;
namespace StorageEngineInstance {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Snippet;
struct SnippetDefaultTypeInternal;
extern SnippetDefaultTypeInternal _Snippet_default_instance_;
class SnippetRequest;
struct SnippetRequestDefaultTypeInternal;
extern SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
class Snippet_Dependency;
struct Snippet_DependencyDefaultTypeInternal;
extern Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
class Snippet_Filter;
struct Snippet_FilterDefaultTypeInternal;
extern Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
class Snippet_Filter_FilterValue;
struct Snippet_Filter_FilterValueDefaultTypeInternal;
extern Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
class Snippet_Limit;
struct Snippet_LimitDefaultTypeInternal;
extern Snippet_LimitDefaultTypeInternal _Snippet_Limit_default_instance_;
class Snippet_Order;
struct Snippet_OrderDefaultTypeInternal;
extern Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
class Snippet_Projection;
struct Snippet_ProjectionDefaultTypeInternal;
extern Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::Request* Arena::CreateMaybeMessage<::StorageEngineInstance::Request>(Arena*);
template<> ::StorageEngineInstance::Result* Arena::CreateMaybeMessage<::StorageEngineInstance::Result>(Arena*);
template<> ::StorageEngineInstance::Snippet* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet>(Arena*);
template<> ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage<::StorageEngineInstance::SnippetRequest>(Arena*);
template<> ::StorageEngineInstance::Snippet_Dependency* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Dependency>(Arena*);
template<> ::StorageEngineInstance::Snippet_Filter* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter>(Arena*);
template<> ::StorageEngineInstance::Snippet_Filter_FilterValue* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(Arena*);
template<> ::StorageEngineInstance::Snippet_Limit* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Limit>(Arena*);
template<> ::StorageEngineInstance::Snippet_Order* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Order>(Arena*);
template<> ::StorageEngineInstance::Snippet_Projection* Arena::CreateMaybeMessage<::StorageEngineInstance::Snippet_Projection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

enum SnippetRequest_SnippetType : int {
  SnippetRequest_SnippetType_SCAN_SNIPPET = 0,
  SnippetRequest_SnippetType_AGGREGATION_SNIPPET = 1,
  SnippetRequest_SnippetType_INNER_JOIN_SNIPPET = 2,
  SnippetRequest_SnippetType_LEFT_OUTER_JOIN_SNIPPET = 3,
  SnippetRequest_SnippetType_RIGHT_OUTER_JOIN_SNIPPET = 4,
  SnippetRequest_SnippetType_FULL_OUTER_JOIN_SNIPPET = 5,
  SnippetRequest_SnippetType_SUBQUERY_SNIPPET = 6,
  SnippetRequest_SnippetType_DEPENDENCY_EXIST_SNIPPET = 7,
  SnippetRequest_SnippetType_DEPENDENCY_NOT_EXIST_SNIPPET = 8,
  SnippetRequest_SnippetType_DEPENDENCY_OPER_SNIPPET = 9,
  SnippetRequest_SnippetType_DEPENDENCY_IN_SNIPPET = 10,
  SnippetRequest_SnippetType_FILTER_SNIPPET = 11,
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SnippetRequest_SnippetType_SnippetRequest_SnippetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SnippetRequest_SnippetType_IsValid(int value);
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MIN = SnippetRequest_SnippetType_SCAN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest_SnippetType_SnippetType_MAX = SnippetRequest_SnippetType_FILTER_SNIPPET;
constexpr int SnippetRequest_SnippetType_SnippetType_ARRAYSIZE = SnippetRequest_SnippetType_SnippetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor();
template<typename T>
inline const std::string& SnippetRequest_SnippetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetRequest_SnippetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetRequest_SnippetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnippetRequest_SnippetType_descriptor(), enum_t_value);
}
inline bool SnippetRequest_SnippetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SnippetRequest_SnippetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnippetRequest_SnippetType>(
    SnippetRequest_SnippetType_descriptor(), name, value);
}
enum Snippet_Filter_OperType : int {
  Snippet_Filter_OperType_KETI_DEFAULT = 0,
  Snippet_Filter_OperType_KETI_GE = 1,
  Snippet_Filter_OperType_KETI_LE = 2,
  Snippet_Filter_OperType_KETI_GT = 3,
  Snippet_Filter_OperType_KETI_LT = 4,
  Snippet_Filter_OperType_KETI_ET = 5,
  Snippet_Filter_OperType_KETI_NE = 6,
  Snippet_Filter_OperType_KETI_LIKE = 7,
  Snippet_Filter_OperType_KETI_BETWEEN = 8,
  Snippet_Filter_OperType_KETI_IN = 9,
  Snippet_Filter_OperType_KETI_IS = 10,
  Snippet_Filter_OperType_KETI_ISNOT = 11,
  Snippet_Filter_OperType_KETI_NOT = 12,
  Snippet_Filter_OperType_KETI_AND = 13,
  Snippet_Filter_OperType_KETI_OR = 14,
  Snippet_Filter_OperType_KETI_BRACKET_OPEN = 15,
  Snippet_Filter_OperType_KETI_BRACKET_CLOSE = 16,
  Snippet_Filter_OperType_KETI_SUBSTRING = 17,
  Snippet_Filter_OperType_Snippet_Filter_OperType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Filter_OperType_Snippet_Filter_OperType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Filter_OperType_IsValid(int value);
constexpr Snippet_Filter_OperType Snippet_Filter_OperType_OperType_MIN = Snippet_Filter_OperType_KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter_OperType_OperType_MAX = Snippet_Filter_OperType_KETI_SUBSTRING;
constexpr int Snippet_Filter_OperType_OperType_ARRAYSIZE = Snippet_Filter_OperType_OperType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor();
template<typename T>
inline const std::string& Snippet_Filter_OperType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Filter_OperType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Filter_OperType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Filter_OperType_descriptor(), enum_t_value);
}
inline bool Snippet_Filter_OperType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Filter_OperType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Filter_OperType>(
    Snippet_Filter_OperType_descriptor(), name, value);
}
enum Snippet_Projection_SelectType : int {
  Snippet_Projection_SelectType_COLUMNNAME = 0,
  Snippet_Projection_SelectType_SUM = 1,
  Snippet_Projection_SelectType_AVG = 2,
  Snippet_Projection_SelectType_COUNT = 3,
  Snippet_Projection_SelectType_COUNTSTAR = 4,
  Snippet_Projection_SelectType_TOP = 5,
  Snippet_Projection_SelectType_MIN = 6,
  Snippet_Projection_SelectType_MAX = 7,
  Snippet_Projection_SelectType_Snippet_Projection_SelectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Projection_SelectType_Snippet_Projection_SelectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Projection_SelectType_IsValid(int value);
constexpr Snippet_Projection_SelectType Snippet_Projection_SelectType_SelectType_MIN = Snippet_Projection_SelectType_COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection_SelectType_SelectType_MAX = Snippet_Projection_SelectType_MAX;
constexpr int Snippet_Projection_SelectType_SelectType_ARRAYSIZE = Snippet_Projection_SelectType_SelectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor();
template<typename T>
inline const std::string& Snippet_Projection_SelectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Projection_SelectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Projection_SelectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Projection_SelectType_descriptor(), enum_t_value);
}
inline bool Snippet_Projection_SelectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Projection_SelectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Projection_SelectType>(
    Snippet_Projection_SelectType_descriptor(), name, value);
}
enum Snippet_Order_OrderDirection : int {
  Snippet_Order_OrderDirection_ASC = 0,
  Snippet_Order_OrderDirection_DESC = 1,
  Snippet_Order_OrderDirection_Snippet_Order_OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_Order_OrderDirection_Snippet_Order_OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_Order_OrderDirection_IsValid(int value);
constexpr Snippet_Order_OrderDirection Snippet_Order_OrderDirection_OrderDirection_MIN = Snippet_Order_OrderDirection_ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order_OrderDirection_OrderDirection_MAX = Snippet_Order_OrderDirection_DESC;
constexpr int Snippet_Order_OrderDirection_OrderDirection_ARRAYSIZE = Snippet_Order_OrderDirection_OrderDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor();
template<typename T>
inline const std::string& Snippet_Order_OrderDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_Order_OrderDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_Order_OrderDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_Order_OrderDirection_descriptor(), enum_t_value);
}
inline bool Snippet_Order_OrderDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_Order_OrderDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_Order_OrderDirection>(
    Snippet_Order_OrderDirection_descriptor(), name, value);
}
enum Snippet_ValueType : int {
  Snippet_ValueType_INT8 = 0,
  Snippet_ValueType_INT16 = 1,
  Snippet_ValueType_INT32 = 2,
  Snippet_ValueType_INT64 = 3,
  Snippet_ValueType_FLOAT32 = 4,
  Snippet_ValueType_FLOAT64 = 5,
  Snippet_ValueType_NUMERIC = 6,
  Snippet_ValueType_DATE = 7,
  Snippet_ValueType_TIMESTAMP = 8,
  Snippet_ValueType_STRING = 9,
  Snippet_ValueType_COLUMN = 10,
  Snippet_ValueType_OPERATOR = 11,
  Snippet_ValueType_Snippet_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Snippet_ValueType_Snippet_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Snippet_ValueType_IsValid(int value);
constexpr Snippet_ValueType Snippet_ValueType_ValueType_MIN = Snippet_ValueType_INT8;
constexpr Snippet_ValueType Snippet_ValueType_ValueType_MAX = Snippet_ValueType_OPERATOR;
constexpr int Snippet_ValueType_ValueType_ARRAYSIZE = Snippet_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor();
template<typename T>
inline const std::string& Snippet_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snippet_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snippet_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snippet_ValueType_descriptor(), enum_t_value);
}
inline bool Snippet_ValueType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Snippet_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snippet_ValueType>(
    Snippet_ValueType_descriptor(), name, value);
}
// ===================================================================

class SnippetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SnippetRequest) */ {
 public:
  inline SnippetRequest() : SnippetRequest(nullptr) {}
  ~SnippetRequest() override;
  explicit constexpr SnippetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnippetRequest(const SnippetRequest& from);
  SnippetRequest(SnippetRequest&& from) noexcept
    : SnippetRequest() {
    *this = ::std::move(from);
  }

  inline SnippetRequest& operator=(const SnippetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetRequest& operator=(SnippetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnippetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnippetRequest* internal_default_instance() {
    return reinterpret_cast<const SnippetRequest*>(
               &_SnippetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnippetRequest& a, SnippetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnippetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnippetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnippetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnippetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SnippetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnippetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SnippetRequest";
  }
  protected:
  explicit SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SnippetRequest_SnippetType SnippetType;
  static constexpr SnippetType SCAN_SNIPPET =
    SnippetRequest_SnippetType_SCAN_SNIPPET;
  static constexpr SnippetType AGGREGATION_SNIPPET =
    SnippetRequest_SnippetType_AGGREGATION_SNIPPET;
  static constexpr SnippetType INNER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_INNER_JOIN_SNIPPET;
  static constexpr SnippetType LEFT_OUTER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_LEFT_OUTER_JOIN_SNIPPET;
  static constexpr SnippetType RIGHT_OUTER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_RIGHT_OUTER_JOIN_SNIPPET;
  static constexpr SnippetType FULL_OUTER_JOIN_SNIPPET =
    SnippetRequest_SnippetType_FULL_OUTER_JOIN_SNIPPET;
  static constexpr SnippetType SUBQUERY_SNIPPET =
    SnippetRequest_SnippetType_SUBQUERY_SNIPPET;
  static constexpr SnippetType DEPENDENCY_EXIST_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_EXIST_SNIPPET;
  static constexpr SnippetType DEPENDENCY_NOT_EXIST_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_NOT_EXIST_SNIPPET;
  static constexpr SnippetType DEPENDENCY_OPER_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_OPER_SNIPPET;
  static constexpr SnippetType DEPENDENCY_IN_SNIPPET =
    SnippetRequest_SnippetType_DEPENDENCY_IN_SNIPPET;
  static constexpr SnippetType FILTER_SNIPPET =
    SnippetRequest_SnippetType_FILTER_SNIPPET;
  static inline bool SnippetType_IsValid(int value) {
    return SnippetRequest_SnippetType_IsValid(value);
  }
  static constexpr SnippetType SnippetType_MIN =
    SnippetRequest_SnippetType_SnippetType_MIN;
  static constexpr SnippetType SnippetType_MAX =
    SnippetRequest_SnippetType_SnippetType_MAX;
  static constexpr int SnippetType_ARRAYSIZE =
    SnippetRequest_SnippetType_SnippetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SnippetType_descriptor() {
    return SnippetRequest_SnippetType_descriptor();
  }
  template<typename T>
  static inline const std::string& SnippetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SnippetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SnippetType_Name.");
    return SnippetRequest_SnippetType_Name(enum_t_value);
  }
  static inline bool SnippetType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SnippetType* value) {
    return SnippetRequest_SnippetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .StorageEngineInstance.Snippet snippet = 2;
  bool has_snippet() const;
  private:
  bool _internal_has_snippet() const;
  public:
  void clear_snippet();
  const ::StorageEngineInstance::Snippet& snippet() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet* release_snippet();
  ::StorageEngineInstance::Snippet* mutable_snippet();
  void set_allocated_snippet(::StorageEngineInstance::Snippet* snippet);
  private:
  const ::StorageEngineInstance::Snippet& _internal_snippet() const;
  ::StorageEngineInstance::Snippet* _internal_mutable_snippet();
  public:
  void unsafe_arena_set_allocated_snippet(
      ::StorageEngineInstance::Snippet* snippet);
  ::StorageEngineInstance::Snippet* unsafe_arena_release_snippet();

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  void clear_type();
  ::StorageEngineInstance::SnippetRequest_SnippetType type() const;
  void set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  private:
  ::StorageEngineInstance::SnippetRequest_SnippetType _internal_type() const;
  void _internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SnippetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::StorageEngineInstance::Snippet* snippet_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Filter_FilterValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Filter.FilterValue) */ {
 public:
  inline Snippet_Filter_FilterValue() : Snippet_Filter_FilterValue(nullptr) {}
  ~Snippet_Filter_FilterValue() override;
  explicit constexpr Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from);
  Snippet_Filter_FilterValue(Snippet_Filter_FilterValue&& from) noexcept
    : Snippet_Filter_FilterValue() {
    *this = ::std::move(from);
  }

  inline Snippet_Filter_FilterValue& operator=(const Snippet_Filter_FilterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Filter_FilterValue& operator=(Snippet_Filter_FilterValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Filter_FilterValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Filter_FilterValue* internal_default_instance() {
    return reinterpret_cast<const Snippet_Filter_FilterValue*>(
               &_Snippet_Filter_FilterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Snippet_Filter_FilterValue& a, Snippet_Filter_FilterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Filter_FilterValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Filter_FilterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Filter_FilterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Filter_FilterValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Filter_FilterValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Filter_FilterValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Filter_FilterValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Filter.FilterValue";
  }
  protected:
  explicit Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::StorageEngineInstance::Snippet_ValueType _internal_type(int index) const;
  void _internal_add_type(::StorageEngineInstance::Snippet_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_type();
  public:
  ::StorageEngineInstance::Snippet_ValueType type(int index) const;
  void set_type(int index, ::StorageEngineInstance::Snippet_ValueType value);
  void add_type(::StorageEngineInstance::Snippet_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_type();

  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Filter.FilterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Filter) */ {
 public:
  inline Snippet_Filter() : Snippet_Filter(nullptr) {}
  ~Snippet_Filter() override;
  explicit constexpr Snippet_Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Filter(const Snippet_Filter& from);
  Snippet_Filter(Snippet_Filter&& from) noexcept
    : Snippet_Filter() {
    *this = ::std::move(from);
  }

  inline Snippet_Filter& operator=(const Snippet_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Filter& operator=(Snippet_Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Filter* internal_default_instance() {
    return reinterpret_cast<const Snippet_Filter*>(
               &_Snippet_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Snippet_Filter& a, Snippet_Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Filter";
  }
  protected:
  explicit Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Filter_FilterValue FilterValue;

  typedef Snippet_Filter_OperType OperType;
  static constexpr OperType KETI_DEFAULT =
    Snippet_Filter_OperType_KETI_DEFAULT;
  static constexpr OperType KETI_GE =
    Snippet_Filter_OperType_KETI_GE;
  static constexpr OperType KETI_LE =
    Snippet_Filter_OperType_KETI_LE;
  static constexpr OperType KETI_GT =
    Snippet_Filter_OperType_KETI_GT;
  static constexpr OperType KETI_LT =
    Snippet_Filter_OperType_KETI_LT;
  static constexpr OperType KETI_ET =
    Snippet_Filter_OperType_KETI_ET;
  static constexpr OperType KETI_NE =
    Snippet_Filter_OperType_KETI_NE;
  static constexpr OperType KETI_LIKE =
    Snippet_Filter_OperType_KETI_LIKE;
  static constexpr OperType KETI_BETWEEN =
    Snippet_Filter_OperType_KETI_BETWEEN;
  static constexpr OperType KETI_IN =
    Snippet_Filter_OperType_KETI_IN;
  static constexpr OperType KETI_IS =
    Snippet_Filter_OperType_KETI_IS;
  static constexpr OperType KETI_ISNOT =
    Snippet_Filter_OperType_KETI_ISNOT;
  static constexpr OperType KETI_NOT =
    Snippet_Filter_OperType_KETI_NOT;
  static constexpr OperType KETI_AND =
    Snippet_Filter_OperType_KETI_AND;
  static constexpr OperType KETI_OR =
    Snippet_Filter_OperType_KETI_OR;
  static constexpr OperType KETI_BRACKET_OPEN =
    Snippet_Filter_OperType_KETI_BRACKET_OPEN;
  static constexpr OperType KETI_BRACKET_CLOSE =
    Snippet_Filter_OperType_KETI_BRACKET_CLOSE;
  static constexpr OperType KETI_SUBSTRING =
    Snippet_Filter_OperType_KETI_SUBSTRING;
  static inline bool OperType_IsValid(int value) {
    return Snippet_Filter_OperType_IsValid(value);
  }
  static constexpr OperType OperType_MIN =
    Snippet_Filter_OperType_OperType_MIN;
  static constexpr OperType OperType_MAX =
    Snippet_Filter_OperType_OperType_MAX;
  static constexpr int OperType_ARRAYSIZE =
    Snippet_Filter_OperType_OperType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperType_descriptor() {
    return Snippet_Filter_OperType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperType_Name.");
    return Snippet_Filter_OperType_Name(enum_t_value);
  }
  static inline bool OperType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperType* value) {
    return Snippet_Filter_OperType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEXTRAFieldNumber = 4,
    kLVFieldNumber = 1,
    kRVFieldNumber = 3,
    kOperatorFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::StorageEngineInstance::Snippet_Filter_FilterValue* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter_FilterValue >*
      mutable_extra();
  private:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& _internal_extra(int index) const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _internal_add_extra();
  public:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& extra(int index) const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter_FilterValue >&
      extra() const;

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  bool has_lv() const;
  private:
  bool _internal_has_lv() const;
  public:
  void clear_lv();
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& lv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Filter_FilterValue* release_lv();
  ::StorageEngineInstance::Snippet_Filter_FilterValue* mutable_lv();
  void set_allocated_lv(::StorageEngineInstance::Snippet_Filter_FilterValue* lv);
  private:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& _internal_lv() const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _internal_mutable_lv();
  public:
  void unsafe_arena_set_allocated_lv(
      ::StorageEngineInstance::Snippet_Filter_FilterValue* lv);
  ::StorageEngineInstance::Snippet_Filter_FilterValue* unsafe_arena_release_lv();

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  bool has_rv() const;
  private:
  bool _internal_has_rv() const;
  public:
  void clear_rv();
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& rv() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Filter_FilterValue* release_rv();
  ::StorageEngineInstance::Snippet_Filter_FilterValue* mutable_rv();
  void set_allocated_rv(::StorageEngineInstance::Snippet_Filter_FilterValue* rv);
  private:
  const ::StorageEngineInstance::Snippet_Filter_FilterValue& _internal_rv() const;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _internal_mutable_rv();
  public:
  void unsafe_arena_set_allocated_rv(
      ::StorageEngineInstance::Snippet_Filter_FilterValue* rv);
  ::StorageEngineInstance::Snippet_Filter_FilterValue* unsafe_arena_release_rv();

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  void clear_operator_();
  ::StorageEngineInstance::Snippet_Filter_OperType operator_() const;
  void set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value);
  private:
  ::StorageEngineInstance::Snippet_Filter_OperType _internal_operator_() const;
  void _internal_set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter_FilterValue > extra_;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* lv_;
  ::StorageEngineInstance::Snippet_Filter_FilterValue* rv_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Projection) */ {
 public:
  inline Snippet_Projection() : Snippet_Projection(nullptr) {}
  ~Snippet_Projection() override;
  explicit constexpr Snippet_Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Projection(const Snippet_Projection& from);
  Snippet_Projection(Snippet_Projection&& from) noexcept
    : Snippet_Projection() {
    *this = ::std::move(from);
  }

  inline Snippet_Projection& operator=(const Snippet_Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Projection& operator=(Snippet_Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Projection* internal_default_instance() {
    return reinterpret_cast<const Snippet_Projection*>(
               &_Snippet_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Snippet_Projection& a, Snippet_Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Projection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Projection";
  }
  protected:
  explicit Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Projection_SelectType SelectType;
  static constexpr SelectType COLUMNNAME =
    Snippet_Projection_SelectType_COLUMNNAME;
  static constexpr SelectType SUM =
    Snippet_Projection_SelectType_SUM;
  static constexpr SelectType AVG =
    Snippet_Projection_SelectType_AVG;
  static constexpr SelectType COUNT =
    Snippet_Projection_SelectType_COUNT;
  static constexpr SelectType COUNTSTAR =
    Snippet_Projection_SelectType_COUNTSTAR;
  static constexpr SelectType TOP =
    Snippet_Projection_SelectType_TOP;
  static constexpr SelectType MIN =
    Snippet_Projection_SelectType_MIN;
  static constexpr SelectType MAX =
    Snippet_Projection_SelectType_MAX;
  static inline bool SelectType_IsValid(int value) {
    return Snippet_Projection_SelectType_IsValid(value);
  }
  static constexpr SelectType SelectType_MIN =
    Snippet_Projection_SelectType_SelectType_MIN;
  static constexpr SelectType SelectType_MAX =
    Snippet_Projection_SelectType_SelectType_MAX;
  static constexpr int SelectType_ARRAYSIZE =
    Snippet_Projection_SelectType_SelectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelectType_descriptor() {
    return Snippet_Projection_SelectType_descriptor();
  }
  template<typename T>
  static inline const std::string& SelectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelectType_Name.");
    return Snippet_Projection_SelectType_Name(enum_t_value);
  }
  static inline bool SelectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SelectType* value) {
    return Snippet_Projection_SelectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kValueTypeFieldNumber = 3,
    kSelectTypeFieldNumber = 1,
  };
  // repeated string value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  int value_type_size() const;
  private:
  int _internal_value_type_size() const;
  public:
  void clear_value_type();
  private:
  ::StorageEngineInstance::Snippet_ValueType _internal_value_type(int index) const;
  void _internal_add_value_type(::StorageEngineInstance::Snippet_ValueType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_value_type();
  public:
  ::StorageEngineInstance::Snippet_ValueType value_type(int index) const;
  void set_value_type(int index, ::StorageEngineInstance::Snippet_ValueType value);
  void add_value_type(::StorageEngineInstance::Snippet_ValueType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& value_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_value_type();

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  void clear_select_type();
  ::StorageEngineInstance::Snippet_Projection_SelectType select_type() const;
  void set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value);
  private:
  ::StorageEngineInstance::Snippet_Projection_SelectType _internal_select_type() const;
  void _internal_set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> value_type_;
  mutable std::atomic<int> _value_type_cached_byte_size_;
  int select_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Order) */ {
 public:
  inline Snippet_Order() : Snippet_Order(nullptr) {}
  ~Snippet_Order() override;
  explicit constexpr Snippet_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Order(const Snippet_Order& from);
  Snippet_Order(Snippet_Order&& from) noexcept
    : Snippet_Order() {
    *this = ::std::move(from);
  }

  inline Snippet_Order& operator=(const Snippet_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Order& operator=(Snippet_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Order* internal_default_instance() {
    return reinterpret_cast<const Snippet_Order*>(
               &_Snippet_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Snippet_Order& a, Snippet_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Order& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Order";
  }
  protected:
  explicit Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Order_OrderDirection OrderDirection;
  static constexpr OrderDirection ASC =
    Snippet_Order_OrderDirection_ASC;
  static constexpr OrderDirection DESC =
    Snippet_Order_OrderDirection_DESC;
  static inline bool OrderDirection_IsValid(int value) {
    return Snippet_Order_OrderDirection_IsValid(value);
  }
  static constexpr OrderDirection OrderDirection_MIN =
    Snippet_Order_OrderDirection_OrderDirection_MIN;
  static constexpr OrderDirection OrderDirection_MAX =
    Snippet_Order_OrderDirection_OrderDirection_MAX;
  static constexpr int OrderDirection_ARRAYSIZE =
    Snippet_Order_OrderDirection_OrderDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrderDirection_descriptor() {
    return Snippet_Order_OrderDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& OrderDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrderDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrderDirection_Name.");
    return Snippet_Order_OrderDirection_Name(enum_t_value);
  }
  static inline bool OrderDirection_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrderDirection* value) {
    return Snippet_Order_OrderDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAscendingFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  int ascending_size() const;
  private:
  int _internal_ascending_size() const;
  public:
  void clear_ascending();
  private:
  ::StorageEngineInstance::Snippet_Order_OrderDirection _internal_ascending(int index) const;
  void _internal_add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ascending();
  public:
  ::StorageEngineInstance::Snippet_Order_OrderDirection ascending(int index) const;
  void set_ascending(int index, ::StorageEngineInstance::Snippet_Order_OrderDirection value);
  void add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ascending() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ascending();

  // repeated string column_name = 2;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ascending_;
  mutable std::atomic<int> _ascending_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Dependency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Dependency) */ {
 public:
  inline Snippet_Dependency() : Snippet_Dependency(nullptr) {}
  ~Snippet_Dependency() override;
  explicit constexpr Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Dependency(const Snippet_Dependency& from);
  Snippet_Dependency(Snippet_Dependency&& from) noexcept
    : Snippet_Dependency() {
    *this = ::std::move(from);
  }

  inline Snippet_Dependency& operator=(const Snippet_Dependency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Dependency& operator=(Snippet_Dependency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Dependency& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Dependency* internal_default_instance() {
    return reinterpret_cast<const Snippet_Dependency*>(
               &_Snippet_Dependency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Snippet_Dependency& a, Snippet_Dependency& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Dependency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Dependency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Dependency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Dependency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Dependency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Dependency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Dependency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Dependency";
  }
  protected:
  explicit Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependencyProjectionFieldNumber = 1,
    kDependencyFilterFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  int dependency_projection_size() const;
  private:
  int _internal_dependency_projection_size() const;
  public:
  void clear_dependency_projection();
  ::StorageEngineInstance::Snippet_Projection* mutable_dependency_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
      mutable_dependency_projection();
  private:
  const ::StorageEngineInstance::Snippet_Projection& _internal_dependency_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* _internal_add_dependency_projection();
  public:
  const ::StorageEngineInstance::Snippet_Projection& dependency_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* add_dependency_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
      dependency_projection() const;

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  int dependency_filter_size() const;
  private:
  int _internal_dependency_filter_size() const;
  public:
  void clear_dependency_filter();
  ::StorageEngineInstance::Snippet_Filter* mutable_dependency_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
      mutable_dependency_filter();
  private:
  const ::StorageEngineInstance::Snippet_Filter& _internal_dependency_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* _internal_add_dependency_filter();
  public:
  const ::StorageEngineInstance::Snippet_Filter& dependency_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* add_dependency_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
      dependency_filter() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Dependency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection > dependency_projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter > dependency_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet_Limit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet.Limit) */ {
 public:
  inline Snippet_Limit() : Snippet_Limit(nullptr) {}
  ~Snippet_Limit() override;
  explicit constexpr Snippet_Limit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet_Limit(const Snippet_Limit& from);
  Snippet_Limit(Snippet_Limit&& from) noexcept
    : Snippet_Limit() {
    *this = ::std::move(from);
  }

  inline Snippet_Limit& operator=(const Snippet_Limit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet_Limit& operator=(Snippet_Limit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet_Limit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet_Limit* internal_default_instance() {
    return reinterpret_cast<const Snippet_Limit*>(
               &_Snippet_Limit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Snippet_Limit& a, Snippet_Limit& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet_Limit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet_Limit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet_Limit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet_Limit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet_Limit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet_Limit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet_Limit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet.Limit";
  }
  protected:
  explicit Snippet_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int32 offset = 1;
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet.Limit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t offset_;
  int32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Snippet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Snippet) */ {
 public:
  inline Snippet() : Snippet(nullptr) {}
  ~Snippet() override;
  explicit constexpr Snippet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Snippet(const Snippet& from);
  Snippet(Snippet&& from) noexcept
    : Snippet() {
    *this = ::std::move(from);
  }

  inline Snippet& operator=(const Snippet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snippet& operator=(Snippet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snippet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snippet* internal_default_instance() {
    return reinterpret_cast<const Snippet*>(
               &_Snippet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Snippet& a, Snippet& b) {
    a.Swap(&b);
  }
  inline void Swap(Snippet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snippet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snippet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Snippet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Snippet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Snippet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snippet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Snippet";
  }
  protected:
  explicit Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Snippet_Filter Filter;
  typedef Snippet_Projection Projection;
  typedef Snippet_Order Order;
  typedef Snippet_Dependency Dependency;
  typedef Snippet_Limit Limit;

  typedef Snippet_ValueType ValueType;
  static constexpr ValueType INT8 =
    Snippet_ValueType_INT8;
  static constexpr ValueType INT16 =
    Snippet_ValueType_INT16;
  static constexpr ValueType INT32 =
    Snippet_ValueType_INT32;
  static constexpr ValueType INT64 =
    Snippet_ValueType_INT64;
  static constexpr ValueType FLOAT32 =
    Snippet_ValueType_FLOAT32;
  static constexpr ValueType FLOAT64 =
    Snippet_ValueType_FLOAT64;
  static constexpr ValueType NUMERIC =
    Snippet_ValueType_NUMERIC;
  static constexpr ValueType DATE =
    Snippet_ValueType_DATE;
  static constexpr ValueType TIMESTAMP =
    Snippet_ValueType_TIMESTAMP;
  static constexpr ValueType STRING =
    Snippet_ValueType_STRING;
  static constexpr ValueType COLUMN =
    Snippet_ValueType_COLUMN;
  static constexpr ValueType OPERATOR =
    Snippet_ValueType_OPERATOR;
  static inline bool ValueType_IsValid(int value) {
    return Snippet_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    Snippet_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    Snippet_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    Snippet_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return Snippet_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return Snippet_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ValueType* value) {
    return Snippet_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 3,
    kTableColFieldNumber = 4,
    kTableFilterFieldNumber = 5,
    kTableOffsetFieldNumber = 7,
    kTableOfflenFieldNumber = 8,
    kTableDatatypeFieldNumber = 9,
    kColumnAliasFieldNumber = 11,
    kColumnProjectionFieldNumber = 12,
    kColumnFilteringFieldNumber = 13,
    kGroupByFieldNumber = 14,
    kTableAliasFieldNumber = 10,
    kDependencyFieldNumber = 6,
    kOrderByFieldNumber = 15,
    kLimitFieldNumber = 16,
    kQueryIDFieldNumber = 1,
    kWorkIDFieldNumber = 2,
  };
  // repeated string table_name = 3;
  int table_name_size() const;
  private:
  int _internal_table_name_size() const;
  public:
  void clear_table_name();
  const std::string& table_name(int index) const;
  std::string* mutable_table_name(int index);
  void set_table_name(int index, const std::string& value);
  void set_table_name(int index, std::string&& value);
  void set_table_name(int index, const char* value);
  void set_table_name(int index, const char* value, size_t size);
  std::string* add_table_name();
  void add_table_name(const std::string& value);
  void add_table_name(std::string&& value);
  void add_table_name(const char* value);
  void add_table_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_name();
  private:
  const std::string& _internal_table_name(int index) const;
  std::string* _internal_add_table_name();
  public:

  // repeated string table_col = 4;
  int table_col_size() const;
  private:
  int _internal_table_col_size() const;
  public:
  void clear_table_col();
  const std::string& table_col(int index) const;
  std::string* mutable_table_col(int index);
  void set_table_col(int index, const std::string& value);
  void set_table_col(int index, std::string&& value);
  void set_table_col(int index, const char* value);
  void set_table_col(int index, const char* value, size_t size);
  std::string* add_table_col();
  void add_table_col(const std::string& value);
  void add_table_col(std::string&& value);
  void add_table_col(const char* value);
  void add_table_col(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_col() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_col();
  private:
  const std::string& _internal_table_col(int index) const;
  std::string* _internal_add_table_col();
  public:

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
  int table_filter_size() const;
  private:
  int _internal_table_filter_size() const;
  public:
  void clear_table_filter();
  ::StorageEngineInstance::Snippet_Filter* mutable_table_filter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
      mutable_table_filter();
  private:
  const ::StorageEngineInstance::Snippet_Filter& _internal_table_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* _internal_add_table_filter();
  public:
  const ::StorageEngineInstance::Snippet_Filter& table_filter(int index) const;
  ::StorageEngineInstance::Snippet_Filter* add_table_filter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
      table_filter() const;

  // repeated int32 table_offset = 7;
  int table_offset_size() const;
  private:
  int _internal_table_offset_size() const;
  public:
  void clear_table_offset();
  private:
  int32_t _internal_table_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_offset() const;
  void _internal_add_table_offset(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_offset();
  public:
  int32_t table_offset(int index) const;
  void set_table_offset(int index, int32_t value);
  void add_table_offset(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_offset();

  // repeated int32 table_offlen = 8;
  int table_offlen_size() const;
  private:
  int _internal_table_offlen_size() const;
  public:
  void clear_table_offlen();
  private:
  int32_t _internal_table_offlen(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_offlen() const;
  void _internal_add_table_offlen(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_offlen();
  public:
  int32_t table_offlen(int index) const;
  void set_table_offlen(int index, int32_t value);
  void add_table_offlen(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_offlen() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_offlen();

  // repeated int32 table_datatype = 9;
  int table_datatype_size() const;
  private:
  int _internal_table_datatype_size() const;
  public:
  void clear_table_datatype();
  private:
  int32_t _internal_table_datatype(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_table_datatype() const;
  void _internal_add_table_datatype(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_table_datatype();
  public:
  int32_t table_datatype(int index) const;
  void set_table_datatype(int index, int32_t value);
  void add_table_datatype(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      table_datatype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_table_datatype();

  // repeated string column_alias = 11;
  int column_alias_size() const;
  private:
  int _internal_column_alias_size() const;
  public:
  void clear_column_alias();
  const std::string& column_alias(int index) const;
  std::string* mutable_column_alias(int index);
  void set_column_alias(int index, const std::string& value);
  void set_column_alias(int index, std::string&& value);
  void set_column_alias(int index, const char* value);
  void set_column_alias(int index, const char* value, size_t size);
  std::string* add_column_alias();
  void add_column_alias(const std::string& value);
  void add_column_alias(std::string&& value);
  void add_column_alias(const char* value);
  void add_column_alias(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_alias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_alias();
  private:
  const std::string& _internal_column_alias(int index) const;
  std::string* _internal_add_column_alias();
  public:

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
  int column_projection_size() const;
  private:
  int _internal_column_projection_size() const;
  public:
  void clear_column_projection();
  ::StorageEngineInstance::Snippet_Projection* mutable_column_projection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
      mutable_column_projection();
  private:
  const ::StorageEngineInstance::Snippet_Projection& _internal_column_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* _internal_add_column_projection();
  public:
  const ::StorageEngineInstance::Snippet_Projection& column_projection(int index) const;
  ::StorageEngineInstance::Snippet_Projection* add_column_projection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
      column_projection() const;

  // repeated string column_filtering = 13;
  int column_filtering_size() const;
  private:
  int _internal_column_filtering_size() const;
  public:
  void clear_column_filtering();
  const std::string& column_filtering(int index) const;
  std::string* mutable_column_filtering(int index);
  void set_column_filtering(int index, const std::string& value);
  void set_column_filtering(int index, std::string&& value);
  void set_column_filtering(int index, const char* value);
  void set_column_filtering(int index, const char* value, size_t size);
  std::string* add_column_filtering();
  void add_column_filtering(const std::string& value);
  void add_column_filtering(std::string&& value);
  void add_column_filtering(const char* value);
  void add_column_filtering(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_filtering() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_filtering();
  private:
  const std::string& _internal_column_filtering(int index) const;
  std::string* _internal_add_column_filtering();
  public:

  // repeated string group_by = 14;
  int group_by_size() const;
  private:
  int _internal_group_by_size() const;
  public:
  void clear_group_by();
  const std::string& group_by(int index) const;
  std::string* mutable_group_by(int index);
  void set_group_by(int index, const std::string& value);
  void set_group_by(int index, std::string&& value);
  void set_group_by(int index, const char* value);
  void set_group_by(int index, const char* value, size_t size);
  std::string* add_group_by();
  void add_group_by(const std::string& value);
  void add_group_by(std::string&& value);
  void add_group_by(const char* value);
  void add_group_by(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by();
  private:
  const std::string& _internal_group_by(int index) const;
  std::string* _internal_add_group_by();
  public:

  // string table_alias = 10;
  void clear_table_alias();
  const std::string& table_alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_alias();
  PROTOBUF_NODISCARD std::string* release_table_alias();
  void set_allocated_table_alias(std::string* table_alias);
  private:
  const std::string& _internal_table_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_alias(const std::string& value);
  std::string* _internal_mutable_table_alias();
  public:

  // .StorageEngineInstance.Snippet.Dependency dependency = 6;
  bool has_dependency() const;
  private:
  bool _internal_has_dependency() const;
  public:
  void clear_dependency();
  const ::StorageEngineInstance::Snippet_Dependency& dependency() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Dependency* release_dependency();
  ::StorageEngineInstance::Snippet_Dependency* mutable_dependency();
  void set_allocated_dependency(::StorageEngineInstance::Snippet_Dependency* dependency);
  private:
  const ::StorageEngineInstance::Snippet_Dependency& _internal_dependency() const;
  ::StorageEngineInstance::Snippet_Dependency* _internal_mutable_dependency();
  public:
  void unsafe_arena_set_allocated_dependency(
      ::StorageEngineInstance::Snippet_Dependency* dependency);
  ::StorageEngineInstance::Snippet_Dependency* unsafe_arena_release_dependency();

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  bool has_order_by() const;
  private:
  bool _internal_has_order_by() const;
  public:
  void clear_order_by();
  const ::StorageEngineInstance::Snippet_Order& order_by() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Order* release_order_by();
  ::StorageEngineInstance::Snippet_Order* mutable_order_by();
  void set_allocated_order_by(::StorageEngineInstance::Snippet_Order* order_by);
  private:
  const ::StorageEngineInstance::Snippet_Order& _internal_order_by() const;
  ::StorageEngineInstance::Snippet_Order* _internal_mutable_order_by();
  public:
  void unsafe_arena_set_allocated_order_by(
      ::StorageEngineInstance::Snippet_Order* order_by);
  ::StorageEngineInstance::Snippet_Order* unsafe_arena_release_order_by();

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const ::StorageEngineInstance::Snippet_Limit& limit() const;
  PROTOBUF_NODISCARD ::StorageEngineInstance::Snippet_Limit* release_limit();
  ::StorageEngineInstance::Snippet_Limit* mutable_limit();
  void set_allocated_limit(::StorageEngineInstance::Snippet_Limit* limit);
  private:
  const ::StorageEngineInstance::Snippet_Limit& _internal_limit() const;
  ::StorageEngineInstance::Snippet_Limit* _internal_mutable_limit();
  public:
  void unsafe_arena_set_allocated_limit(
      ::StorageEngineInstance::Snippet_Limit* limit);
  ::StorageEngineInstance::Snippet_Limit* unsafe_arena_release_limit();

  // int32 query_ID = 1;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_ID = 2;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Snippet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_col_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter > table_filter_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_offset_;
  mutable std::atomic<int> _table_offset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_offlen_;
  mutable std::atomic<int> _table_offlen_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > table_datatype_;
  mutable std::atomic<int> _table_datatype_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_alias_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection > column_projection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_filtering_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_alias_;
  ::StorageEngineInstance::Snippet_Dependency* dependency_;
  ::StorageEngineInstance::Snippet_Order* order_by_;
  ::StorageEngineInstance::Snippet_Limit* limit_;
  int32_t query_id_;
  int32_t work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 3,
    kQueryIdFieldNumber = 1,
    kWorkIdFieldNumber = 2,
  };
  // string table_name = 3;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 query_id = 1;
  void clear_query_id();
  int32_t query_id() const;
  void set_query_id(int32_t value);
  private:
  int32_t _internal_query_id() const;
  void _internal_set_query_id(int32_t value);
  public:

  // int32 work_id = 2;
  void clear_work_id();
  int32_t work_id() const;
  void set_work_id(int32_t value);
  private:
  int32_t _internal_work_id() const;
  void _internal_set_work_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  int32_t query_id_;
  int32_t work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snippet_5fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnippetRequest

// .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
inline void SnippetRequest::clear_type() {
  type_ = 0;
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::_internal_type() const {
  return static_cast< ::StorageEngineInstance::SnippetRequest_SnippetType >(type_);
}
inline ::StorageEngineInstance::SnippetRequest_SnippetType SnippetRequest::type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.type)
  return _internal_type();
}
inline void SnippetRequest::_internal_set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  
  type_ = value;
}
inline void SnippetRequest::set_type(::StorageEngineInstance::SnippetRequest_SnippetType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SnippetRequest.type)
}

// .StorageEngineInstance.Snippet snippet = 2;
inline bool SnippetRequest::_internal_has_snippet() const {
  return this != internal_default_instance() && snippet_ != nullptr;
}
inline bool SnippetRequest::has_snippet() const {
  return _internal_has_snippet();
}
inline void SnippetRequest::clear_snippet() {
  if (GetArenaForAllocation() == nullptr && snippet_ != nullptr) {
    delete snippet_;
  }
  snippet_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet& SnippetRequest::_internal_snippet() const {
  const ::StorageEngineInstance::Snippet* p = snippet_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet&>(
      ::StorageEngineInstance::_Snippet_default_instance_);
}
inline const ::StorageEngineInstance::Snippet& SnippetRequest::snippet() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SnippetRequest.snippet)
  return _internal_snippet();
}
inline void SnippetRequest::unsafe_arena_set_allocated_snippet(
    ::StorageEngineInstance::Snippet* snippet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snippet_);
  }
  snippet_ = snippet;
  if (snippet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.SnippetRequest.snippet)
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::release_snippet() {
  
  ::StorageEngineInstance::Snippet* temp = snippet_;
  snippet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::unsafe_arena_release_snippet() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.SnippetRequest.snippet)
  
  ::StorageEngineInstance::Snippet* temp = snippet_;
  snippet_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::_internal_mutable_snippet() {
  
  if (snippet_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet>(GetArenaForAllocation());
    snippet_ = p;
  }
  return snippet_;
}
inline ::StorageEngineInstance::Snippet* SnippetRequest::mutable_snippet() {
  ::StorageEngineInstance::Snippet* _msg = _internal_mutable_snippet();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SnippetRequest.snippet)
  return _msg;
}
inline void SnippetRequest::set_allocated_snippet(::StorageEngineInstance::Snippet* snippet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete snippet_;
  }
  if (snippet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet>::GetOwningArena(snippet);
    if (message_arena != submessage_arena) {
      snippet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snippet, submessage_arena);
    }
    
  } else {
    
  }
  snippet_ = snippet;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.SnippetRequest.snippet)
}

// -------------------------------------------------------------------

// Snippet_Filter_FilterValue

// repeated .StorageEngineInstance.Snippet.ValueType type = 1;
inline int Snippet_Filter_FilterValue::_internal_type_size() const {
  return type_.size();
}
inline int Snippet_Filter_FilterValue::type_size() const {
  return _internal_type_size();
}
inline void Snippet_Filter_FilterValue::clear_type() {
  type_.Clear();
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Filter_FilterValue::_internal_type(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_ValueType >(type_.Get(index));
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Filter_FilterValue::type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return _internal_type(index);
}
inline void Snippet_Filter_FilterValue::set_type(int index, ::StorageEngineInstance::Snippet_ValueType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.type)
}
inline void Snippet_Filter_FilterValue::_internal_add_type(::StorageEngineInstance::Snippet_ValueType value) {
  type_.Add(value);
}
inline void Snippet_Filter_FilterValue::add_type(::StorageEngineInstance::Snippet_ValueType value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Filter_FilterValue::type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Filter_FilterValue::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Filter_FilterValue::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Filter.FilterValue.type)
  return _internal_mutable_type();
}

// repeated string value = 2;
inline int Snippet_Filter_FilterValue::_internal_value_size() const {
  return value_.size();
}
inline int Snippet_Filter_FilterValue::value_size() const {
  return _internal_value_size();
}
inline void Snippet_Filter_FilterValue::clear_value() {
  value_.Clear();
}
inline std::string* Snippet_Filter_FilterValue::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return _s;
}
inline const std::string& Snippet_Filter_FilterValue::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Snippet_Filter_FilterValue::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return _internal_value(index);
}
inline std::string* Snippet_Filter_FilterValue::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return value_.Mutable(index);
}
inline void Snippet_Filter_FilterValue::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline std::string* Snippet_Filter_FilterValue::_internal_add_value() {
  return value_.Add();
}
inline void Snippet_Filter_FilterValue::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline void Snippet_Filter_FilterValue::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Filter.FilterValue.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Filter_FilterValue::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Filter_FilterValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Filter.FilterValue.value)
  return &value_;
}

// -------------------------------------------------------------------

// Snippet_Filter

// .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
inline bool Snippet_Filter::_internal_has_lv() const {
  return this != internal_default_instance() && lv_ != nullptr;
}
inline bool Snippet_Filter::has_lv() const {
  return _internal_has_lv();
}
inline void Snippet_Filter::clear_lv() {
  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::_internal_lv() const {
  const ::StorageEngineInstance::Snippet_Filter_FilterValue* p = lv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Filter_FilterValue&>(
      ::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::lv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.LV)
  return _internal_lv();
}
inline void Snippet_Filter::unsafe_arena_set_allocated_lv(
    ::StorageEngineInstance::Snippet_Filter_FilterValue* lv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lv_);
  }
  lv_ = lv;
  if (lv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.Filter.LV)
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::release_lv() {
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::unsafe_arena_release_lv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.Filter.LV)
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = lv_;
  lv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::_internal_mutable_lv() {
  
  if (lv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(GetArenaForAllocation());
    lv_ = p;
  }
  return lv_;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::mutable_lv() {
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _msg = _internal_mutable_lv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.LV)
  return _msg;
}
inline void Snippet_Filter::set_allocated_lv(::StorageEngineInstance::Snippet_Filter_FilterValue* lv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lv_;
  }
  if (lv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Filter_FilterValue>::GetOwningArena(lv);
    if (message_arena != submessage_arena) {
      lv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lv, submessage_arena);
    }
    
  } else {
    
  }
  lv_ = lv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.Filter.LV)
}

// .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
inline void Snippet_Filter::clear_operator_() {
  operator__ = 0;
}
inline ::StorageEngineInstance::Snippet_Filter_OperType Snippet_Filter::_internal_operator_() const {
  return static_cast< ::StorageEngineInstance::Snippet_Filter_OperType >(operator__);
}
inline ::StorageEngineInstance::Snippet_Filter_OperType Snippet_Filter::operator_() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.Operator)
  return _internal_operator_();
}
inline void Snippet_Filter::_internal_set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value) {
  
  operator__ = value;
}
inline void Snippet_Filter::set_operator_(::StorageEngineInstance::Snippet_Filter_OperType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Filter.Operator)
}

// .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
inline bool Snippet_Filter::_internal_has_rv() const {
  return this != internal_default_instance() && rv_ != nullptr;
}
inline bool Snippet_Filter::has_rv() const {
  return _internal_has_rv();
}
inline void Snippet_Filter::clear_rv() {
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::_internal_rv() const {
  const ::StorageEngineInstance::Snippet_Filter_FilterValue* p = rv_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Filter_FilterValue&>(
      ::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::rv() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.RV)
  return _internal_rv();
}
inline void Snippet_Filter::unsafe_arena_set_allocated_rv(
    ::StorageEngineInstance::Snippet_Filter_FilterValue* rv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rv_);
  }
  rv_ = rv;
  if (rv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.Filter.RV)
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::release_rv() {
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::unsafe_arena_release_rv() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.Filter.RV)
  
  ::StorageEngineInstance::Snippet_Filter_FilterValue* temp = rv_;
  rv_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::_internal_mutable_rv() {
  
  if (rv_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Filter_FilterValue>(GetArenaForAllocation());
    rv_ = p;
  }
  return rv_;
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::mutable_rv() {
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _msg = _internal_mutable_rv();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.RV)
  return _msg;
}
inline void Snippet_Filter::set_allocated_rv(::StorageEngineInstance::Snippet_Filter_FilterValue* rv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rv_;
  }
  if (rv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Filter_FilterValue>::GetOwningArena(rv);
    if (message_arena != submessage_arena) {
      rv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rv, submessage_arena);
    }
    
  } else {
    
  }
  rv_ = rv;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.Filter.RV)
}

// repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
inline int Snippet_Filter::_internal_extra_size() const {
  return extra_.size();
}
inline int Snippet_Filter::extra_size() const {
  return _internal_extra_size();
}
inline void Snippet_Filter::clear_extra() {
  extra_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Filter.EXTRA)
  return extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter_FilterValue >*
Snippet_Filter::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Filter.EXTRA)
  return &extra_;
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::_internal_extra(int index) const {
  return extra_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter_FilterValue& Snippet_Filter::extra(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Filter.EXTRA)
  return _internal_extra(index);
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::_internal_add_extra() {
  return extra_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter_FilterValue* Snippet_Filter::add_extra() {
  ::StorageEngineInstance::Snippet_Filter_FilterValue* _add = _internal_add_extra();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Filter.EXTRA)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter_FilterValue >&
Snippet_Filter::extra() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Filter.EXTRA)
  return extra_;
}

// -------------------------------------------------------------------

// Snippet_Projection

// .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
inline void Snippet_Projection::clear_select_type() {
  select_type_ = 0;
}
inline ::StorageEngineInstance::Snippet_Projection_SelectType Snippet_Projection::_internal_select_type() const {
  return static_cast< ::StorageEngineInstance::Snippet_Projection_SelectType >(select_type_);
}
inline ::StorageEngineInstance::Snippet_Projection_SelectType Snippet_Projection::select_type() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.select_type)
  return _internal_select_type();
}
inline void Snippet_Projection::_internal_set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value) {
  
  select_type_ = value;
}
inline void Snippet_Projection::set_select_type(::StorageEngineInstance::Snippet_Projection_SelectType value) {
  _internal_set_select_type(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.select_type)
}

// repeated string value = 2;
inline int Snippet_Projection::_internal_value_size() const {
  return value_.size();
}
inline int Snippet_Projection::value_size() const {
  return _internal_value_size();
}
inline void Snippet_Projection::clear_value() {
  value_.Clear();
}
inline std::string* Snippet_Projection::add_value() {
  std::string* _s = _internal_add_value();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Projection.value)
  return _s;
}
inline const std::string& Snippet_Projection::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Snippet_Projection::value(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.value)
  return _internal_value(index);
}
inline std::string* Snippet_Projection::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Projection.value)
  return value_.Mutable(index);
}
inline void Snippet_Projection::set_value(int index, const std::string& value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, std::string&& value) {
  value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Projection.value)
}
inline std::string* Snippet_Projection::_internal_add_value() {
  return value_.Add();
}
inline void Snippet_Projection::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Projection.value)
}
inline void Snippet_Projection::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Projection.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Projection::value() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Projection.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Projection::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Projection.value)
  return &value_;
}

// repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
inline int Snippet_Projection::_internal_value_type_size() const {
  return value_type_.size();
}
inline int Snippet_Projection::value_type_size() const {
  return _internal_value_type_size();
}
inline void Snippet_Projection::clear_value_type() {
  value_type_.Clear();
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Projection::_internal_value_type(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_ValueType >(value_type_.Get(index));
}
inline ::StorageEngineInstance::Snippet_ValueType Snippet_Projection::value_type(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Projection.value_type)
  return _internal_value_type(index);
}
inline void Snippet_Projection::set_value_type(int index, ::StorageEngineInstance::Snippet_ValueType value) {
  value_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Projection.value_type)
}
inline void Snippet_Projection::_internal_add_value_type(::StorageEngineInstance::Snippet_ValueType value) {
  value_type_.Add(value);
}
inline void Snippet_Projection::add_value_type(::StorageEngineInstance::Snippet_ValueType value) {
  _internal_add_value_type(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Projection.value_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Projection::value_type() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Projection.value_type)
  return value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Projection::_internal_mutable_value_type() {
  return &value_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Projection::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Projection.value_type)
  return _internal_mutable_value_type();
}

// -------------------------------------------------------------------

// Snippet_Order

// repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
inline int Snippet_Order::_internal_ascending_size() const {
  return ascending_.size();
}
inline int Snippet_Order::ascending_size() const {
  return _internal_ascending_size();
}
inline void Snippet_Order::clear_ascending() {
  ascending_.Clear();
}
inline ::StorageEngineInstance::Snippet_Order_OrderDirection Snippet_Order::_internal_ascending(int index) const {
  return static_cast< ::StorageEngineInstance::Snippet_Order_OrderDirection >(ascending_.Get(index));
}
inline ::StorageEngineInstance::Snippet_Order_OrderDirection Snippet_Order::ascending(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Order.ascending)
  return _internal_ascending(index);
}
inline void Snippet_Order::set_ascending(int index, ::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  ascending_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.ascending)
}
inline void Snippet_Order::_internal_add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  ascending_.Add(value);
}
inline void Snippet_Order::add_ascending(::StorageEngineInstance::Snippet_Order_OrderDirection value) {
  _internal_add_ascending(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.ascending)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Snippet_Order::ascending() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Order.ascending)
  return ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Order::_internal_mutable_ascending() {
  return &ascending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Snippet_Order::mutable_ascending() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Order.ascending)
  return _internal_mutable_ascending();
}

// repeated string column_name = 2;
inline int Snippet_Order::_internal_column_name_size() const {
  return column_name_.size();
}
inline int Snippet_Order::column_name_size() const {
  return _internal_column_name_size();
}
inline void Snippet_Order::clear_column_name() {
  column_name_.Clear();
}
inline std::string* Snippet_Order::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.Order.column_name)
  return _s;
}
inline const std::string& Snippet_Order::_internal_column_name(int index) const {
  return column_name_.Get(index);
}
inline const std::string& Snippet_Order::column_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Order.column_name)
  return _internal_column_name(index);
}
inline std::string* Snippet_Order::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Order.column_name)
  return column_name_.Mutable(index);
}
inline void Snippet_Order::set_column_name(int index, const std::string& value) {
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, std::string&& value) {
  column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.Order.column_name)
}
inline std::string* Snippet_Order::_internal_add_column_name() {
  return column_name_.Add();
}
inline void Snippet_Order::add_column_name(const std::string& value) {
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(std::string&& value) {
  column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.Order.column_name)
}
inline void Snippet_Order::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.Order.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet_Order::column_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Order.column_name)
  return column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet_Order::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Order.column_name)
  return &column_name_;
}

// -------------------------------------------------------------------

// Snippet_Dependency

// repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
inline int Snippet_Dependency::_internal_dependency_projection_size() const {
  return dependency_projection_.size();
}
inline int Snippet_Dependency::dependency_projection_size() const {
  return _internal_dependency_projection_size();
}
inline void Snippet_Dependency::clear_dependency_projection() {
  dependency_projection_.Clear();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::mutable_dependency_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return dependency_projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
Snippet_Dependency::mutable_dependency_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return &dependency_projection_;
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet_Dependency::_internal_dependency_projection(int index) const {
  return dependency_projection_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet_Dependency::dependency_projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return _internal_dependency_projection(index);
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::_internal_add_dependency_projection() {
  return dependency_projection_.Add();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet_Dependency::add_dependency_projection() {
  ::StorageEngineInstance::Snippet_Projection* _add = _internal_add_dependency_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
Snippet_Dependency::dependency_projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Dependency.dependency_projection)
  return dependency_projection_;
}

// repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
inline int Snippet_Dependency::_internal_dependency_filter_size() const {
  return dependency_filter_.size();
}
inline int Snippet_Dependency::dependency_filter_size() const {
  return _internal_dependency_filter_size();
}
inline void Snippet_Dependency::clear_dependency_filter() {
  dependency_filter_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::mutable_dependency_filter(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return dependency_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
Snippet_Dependency::mutable_dependency_filter() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return &dependency_filter_;
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet_Dependency::_internal_dependency_filter(int index) const {
  return dependency_filter_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet_Dependency::dependency_filter(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return _internal_dependency_filter(index);
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::_internal_add_dependency_filter() {
  return dependency_filter_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet_Dependency::add_dependency_filter() {
  ::StorageEngineInstance::Snippet_Filter* _add = _internal_add_dependency_filter();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
Snippet_Dependency::dependency_filter() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.Dependency.dependency_filter)
  return dependency_filter_;
}

// -------------------------------------------------------------------

// Snippet_Limit

// int32 offset = 1;
inline void Snippet_Limit::clear_offset() {
  offset_ = 0;
}
inline int32_t Snippet_Limit::_internal_offset() const {
  return offset_;
}
inline int32_t Snippet_Limit::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Limit.offset)
  return _internal_offset();
}
inline void Snippet_Limit::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void Snippet_Limit::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Limit.offset)
}

// int32 length = 2;
inline void Snippet_Limit::clear_length() {
  length_ = 0;
}
inline int32_t Snippet_Limit::_internal_length() const {
  return length_;
}
inline int32_t Snippet_Limit::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.Limit.length)
  return _internal_length();
}
inline void Snippet_Limit::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void Snippet_Limit::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.Limit.length)
}

// -------------------------------------------------------------------

// Snippet

// int32 query_ID = 1;
inline void Snippet::clear_query_id() {
  query_id_ = 0;
}
inline int32_t Snippet::_internal_query_id() const {
  return query_id_;
}
inline int32_t Snippet::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.query_ID)
  return _internal_query_id();
}
inline void Snippet::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void Snippet::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.query_ID)
}

// int32 work_ID = 2;
inline void Snippet::clear_work_id() {
  work_id_ = 0;
}
inline int32_t Snippet::_internal_work_id() const {
  return work_id_;
}
inline int32_t Snippet::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.work_ID)
  return _internal_work_id();
}
inline void Snippet::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void Snippet::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.work_ID)
}

// repeated string table_name = 3;
inline int Snippet::_internal_table_name_size() const {
  return table_name_.size();
}
inline int Snippet::table_name_size() const {
  return _internal_table_name_size();
}
inline void Snippet::clear_table_name() {
  table_name_.Clear();
}
inline std::string* Snippet::add_table_name() {
  std::string* _s = _internal_add_table_name();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.table_name)
  return _s;
}
inline const std::string& Snippet::_internal_table_name(int index) const {
  return table_name_.Get(index);
}
inline const std::string& Snippet::table_name(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_name)
  return _internal_table_name(index);
}
inline std::string* Snippet::mutable_table_name(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_name)
  return table_name_.Mutable(index);
}
inline void Snippet::set_table_name(int index, const std::string& value) {
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, std::string&& value) {
  table_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::set_table_name(int index, const char* value, size_t size) {
  table_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.table_name)
}
inline std::string* Snippet::_internal_add_table_name() {
  return table_name_.Add();
}
inline void Snippet::add_table_name(const std::string& value) {
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(std::string&& value) {
  table_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.table_name)
}
inline void Snippet::add_table_name(const char* value, size_t size) {
  table_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.table_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::table_name() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_name)
  return table_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_name)
  return &table_name_;
}

// repeated string table_col = 4;
inline int Snippet::_internal_table_col_size() const {
  return table_col_.size();
}
inline int Snippet::table_col_size() const {
  return _internal_table_col_size();
}
inline void Snippet::clear_table_col() {
  table_col_.Clear();
}
inline std::string* Snippet::add_table_col() {
  std::string* _s = _internal_add_table_col();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.table_col)
  return _s;
}
inline const std::string& Snippet::_internal_table_col(int index) const {
  return table_col_.Get(index);
}
inline const std::string& Snippet::table_col(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_col)
  return _internal_table_col(index);
}
inline std::string* Snippet::mutable_table_col(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_col)
  return table_col_.Mutable(index);
}
inline void Snippet::set_table_col(int index, const std::string& value) {
  table_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, std::string&& value) {
  table_col_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::set_table_col(int index, const char* value, size_t size) {
  table_col_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.table_col)
}
inline std::string* Snippet::_internal_add_table_col() {
  return table_col_.Add();
}
inline void Snippet::add_table_col(const std::string& value) {
  table_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(std::string&& value) {
  table_col_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.table_col)
}
inline void Snippet::add_table_col(const char* value, size_t size) {
  table_col_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.table_col)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::table_col() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_col)
  return table_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_table_col() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_col)
  return &table_col_;
}

// repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
inline int Snippet::_internal_table_filter_size() const {
  return table_filter_.size();
}
inline int Snippet::table_filter_size() const {
  return _internal_table_filter_size();
}
inline void Snippet::clear_table_filter() {
  table_filter_.Clear();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::mutable_table_filter(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_filter)
  return table_filter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >*
Snippet::mutable_table_filter() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_filter)
  return &table_filter_;
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::_internal_table_filter(int index) const {
  return table_filter_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Filter& Snippet::table_filter(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_filter)
  return _internal_table_filter(index);
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::_internal_add_table_filter() {
  return table_filter_.Add();
}
inline ::StorageEngineInstance::Snippet_Filter* Snippet::add_table_filter() {
  ::StorageEngineInstance::Snippet_Filter* _add = _internal_add_table_filter();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_filter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Filter >&
Snippet::table_filter() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_filter)
  return table_filter_;
}

// .StorageEngineInstance.Snippet.Dependency dependency = 6;
inline bool Snippet::_internal_has_dependency() const {
  return this != internal_default_instance() && dependency_ != nullptr;
}
inline bool Snippet::has_dependency() const {
  return _internal_has_dependency();
}
inline void Snippet::clear_dependency() {
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Dependency& Snippet::_internal_dependency() const {
  const ::StorageEngineInstance::Snippet_Dependency* p = dependency_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Dependency&>(
      ::StorageEngineInstance::_Snippet_Dependency_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Dependency& Snippet::dependency() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.dependency)
  return _internal_dependency();
}
inline void Snippet::unsafe_arena_set_allocated_dependency(
    ::StorageEngineInstance::Snippet_Dependency* dependency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dependency_);
  }
  dependency_ = dependency;
  if (dependency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.dependency)
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::release_dependency() {
  
  ::StorageEngineInstance::Snippet_Dependency* temp = dependency_;
  dependency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::unsafe_arena_release_dependency() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.dependency)
  
  ::StorageEngineInstance::Snippet_Dependency* temp = dependency_;
  dependency_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::_internal_mutable_dependency() {
  
  if (dependency_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Dependency>(GetArenaForAllocation());
    dependency_ = p;
  }
  return dependency_;
}
inline ::StorageEngineInstance::Snippet_Dependency* Snippet::mutable_dependency() {
  ::StorageEngineInstance::Snippet_Dependency* _msg = _internal_mutable_dependency();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.dependency)
  return _msg;
}
inline void Snippet::set_allocated_dependency(::StorageEngineInstance::Snippet_Dependency* dependency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dependency_;
  }
  if (dependency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Dependency>::GetOwningArena(dependency);
    if (message_arena != submessage_arena) {
      dependency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependency, submessage_arena);
    }
    
  } else {
    
  }
  dependency_ = dependency;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.dependency)
}

// repeated int32 table_offset = 7;
inline int Snippet::_internal_table_offset_size() const {
  return table_offset_.size();
}
inline int Snippet::table_offset_size() const {
  return _internal_table_offset_size();
}
inline void Snippet::clear_table_offset() {
  table_offset_.Clear();
}
inline int32_t Snippet::_internal_table_offset(int index) const {
  return table_offset_.Get(index);
}
inline int32_t Snippet::table_offset(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_offset)
  return _internal_table_offset(index);
}
inline void Snippet::set_table_offset(int index, int32_t value) {
  table_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_offset)
}
inline void Snippet::_internal_add_table_offset(int32_t value) {
  table_offset_.Add(value);
}
inline void Snippet::add_table_offset(int32_t value) {
  _internal_add_table_offset(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_offset() const {
  return table_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_offset() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_offset)
  return _internal_table_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_offset() {
  return &table_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_offset() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_offset)
  return _internal_mutable_table_offset();
}

// repeated int32 table_offlen = 8;
inline int Snippet::_internal_table_offlen_size() const {
  return table_offlen_.size();
}
inline int Snippet::table_offlen_size() const {
  return _internal_table_offlen_size();
}
inline void Snippet::clear_table_offlen() {
  table_offlen_.Clear();
}
inline int32_t Snippet::_internal_table_offlen(int index) const {
  return table_offlen_.Get(index);
}
inline int32_t Snippet::table_offlen(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_offlen)
  return _internal_table_offlen(index);
}
inline void Snippet::set_table_offlen(int index, int32_t value) {
  table_offlen_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_offlen)
}
inline void Snippet::_internal_add_table_offlen(int32_t value) {
  table_offlen_.Add(value);
}
inline void Snippet::add_table_offlen(int32_t value) {
  _internal_add_table_offlen(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_offlen)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_offlen() const {
  return table_offlen_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_offlen() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_offlen)
  return _internal_table_offlen();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_offlen() {
  return &table_offlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_offlen() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_offlen)
  return _internal_mutable_table_offlen();
}

// repeated int32 table_datatype = 9;
inline int Snippet::_internal_table_datatype_size() const {
  return table_datatype_.size();
}
inline int Snippet::table_datatype_size() const {
  return _internal_table_datatype_size();
}
inline void Snippet::clear_table_datatype() {
  table_datatype_.Clear();
}
inline int32_t Snippet::_internal_table_datatype(int index) const {
  return table_datatype_.Get(index);
}
inline int32_t Snippet::table_datatype(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_datatype)
  return _internal_table_datatype(index);
}
inline void Snippet::set_table_datatype(int index, int32_t value) {
  table_datatype_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_datatype)
}
inline void Snippet::_internal_add_table_datatype(int32_t value) {
  table_datatype_.Add(value);
}
inline void Snippet::add_table_datatype(int32_t value) {
  _internal_add_table_datatype(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.table_datatype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::_internal_table_datatype() const {
  return table_datatype_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Snippet::table_datatype() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.table_datatype)
  return _internal_table_datatype();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::_internal_mutable_table_datatype() {
  return &table_datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Snippet::mutable_table_datatype() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.table_datatype)
  return _internal_mutable_table_datatype();
}

// string table_alias = 10;
inline void Snippet::clear_table_alias() {
  table_alias_.ClearToEmpty();
}
inline const std::string& Snippet::table_alias() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.table_alias)
  return _internal_table_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Snippet::set_table_alias(ArgT0&& arg0, ArgT... args) {
 
 table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.table_alias)
}
inline std::string* Snippet::mutable_table_alias() {
  std::string* _s = _internal_mutable_table_alias();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.table_alias)
  return _s;
}
inline const std::string& Snippet::_internal_table_alias() const {
  return table_alias_.Get();
}
inline void Snippet::_internal_set_table_alias(const std::string& value) {
  
  table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Snippet::_internal_mutable_table_alias() {
  
  return table_alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Snippet::release_table_alias() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.table_alias)
  return table_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Snippet::set_allocated_table_alias(std::string* table_alias) {
  if (table_alias != nullptr) {
    
  } else {
    
  }
  table_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_alias,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_alias_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.table_alias)
}

// repeated string column_alias = 11;
inline int Snippet::_internal_column_alias_size() const {
  return column_alias_.size();
}
inline int Snippet::column_alias_size() const {
  return _internal_column_alias_size();
}
inline void Snippet::clear_column_alias() {
  column_alias_.Clear();
}
inline std::string* Snippet::add_column_alias() {
  std::string* _s = _internal_add_column_alias();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.column_alias)
  return _s;
}
inline const std::string& Snippet::_internal_column_alias(int index) const {
  return column_alias_.Get(index);
}
inline const std::string& Snippet::column_alias(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.column_alias)
  return _internal_column_alias(index);
}
inline std::string* Snippet::mutable_column_alias(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.column_alias)
  return column_alias_.Mutable(index);
}
inline void Snippet::set_column_alias(int index, const std::string& value) {
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, std::string&& value) {
  column_alias_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::set_column_alias(int index, const char* value, size_t size) {
  column_alias_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.column_alias)
}
inline std::string* Snippet::_internal_add_column_alias() {
  return column_alias_.Add();
}
inline void Snippet::add_column_alias(const std::string& value) {
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(std::string&& value) {
  column_alias_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_alias_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.column_alias)
}
inline void Snippet::add_column_alias(const char* value, size_t size) {
  column_alias_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.column_alias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::column_alias() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.column_alias)
  return column_alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_column_alias() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.column_alias)
  return &column_alias_;
}

// repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
inline int Snippet::_internal_column_projection_size() const {
  return column_projection_.size();
}
inline int Snippet::column_projection_size() const {
  return _internal_column_projection_size();
}
inline void Snippet::clear_column_projection() {
  column_projection_.Clear();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::mutable_column_projection(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.column_projection)
  return column_projection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >*
Snippet::mutable_column_projection() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.column_projection)
  return &column_projection_;
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet::_internal_column_projection(int index) const {
  return column_projection_.Get(index);
}
inline const ::StorageEngineInstance::Snippet_Projection& Snippet::column_projection(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.column_projection)
  return _internal_column_projection(index);
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::_internal_add_column_projection() {
  return column_projection_.Add();
}
inline ::StorageEngineInstance::Snippet_Projection* Snippet::add_column_projection() {
  ::StorageEngineInstance::Snippet_Projection* _add = _internal_add_column_projection();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_projection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Snippet_Projection >&
Snippet::column_projection() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.column_projection)
  return column_projection_;
}

// repeated string column_filtering = 13;
inline int Snippet::_internal_column_filtering_size() const {
  return column_filtering_.size();
}
inline int Snippet::column_filtering_size() const {
  return _internal_column_filtering_size();
}
inline void Snippet::clear_column_filtering() {
  column_filtering_.Clear();
}
inline std::string* Snippet::add_column_filtering() {
  std::string* _s = _internal_add_column_filtering();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.column_filtering)
  return _s;
}
inline const std::string& Snippet::_internal_column_filtering(int index) const {
  return column_filtering_.Get(index);
}
inline const std::string& Snippet::column_filtering(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.column_filtering)
  return _internal_column_filtering(index);
}
inline std::string* Snippet::mutable_column_filtering(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.column_filtering)
  return column_filtering_.Mutable(index);
}
inline void Snippet::set_column_filtering(int index, const std::string& value) {
  column_filtering_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::set_column_filtering(int index, std::string&& value) {
  column_filtering_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::set_column_filtering(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_filtering_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::set_column_filtering(int index, const char* value, size_t size) {
  column_filtering_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.column_filtering)
}
inline std::string* Snippet::_internal_add_column_filtering() {
  return column_filtering_.Add();
}
inline void Snippet::add_column_filtering(const std::string& value) {
  column_filtering_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::add_column_filtering(std::string&& value) {
  column_filtering_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::add_column_filtering(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_filtering_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.column_filtering)
}
inline void Snippet::add_column_filtering(const char* value, size_t size) {
  column_filtering_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.column_filtering)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::column_filtering() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.column_filtering)
  return column_filtering_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_column_filtering() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.column_filtering)
  return &column_filtering_;
}

// repeated string group_by = 14;
inline int Snippet::_internal_group_by_size() const {
  return group_by_.size();
}
inline int Snippet::group_by_size() const {
  return _internal_group_by_size();
}
inline void Snippet::clear_group_by() {
  group_by_.Clear();
}
inline std::string* Snippet::add_group_by() {
  std::string* _s = _internal_add_group_by();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.Snippet.group_by)
  return _s;
}
inline const std::string& Snippet::_internal_group_by(int index) const {
  return group_by_.Get(index);
}
inline const std::string& Snippet::group_by(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.group_by)
  return _internal_group_by(index);
}
inline std::string* Snippet::mutable_group_by(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.group_by)
  return group_by_.Mutable(index);
}
inline void Snippet::set_group_by(int index, const std::string& value) {
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, std::string&& value) {
  group_by_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::set_group_by(int index, const char* value, size_t size) {
  group_by_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.Snippet.group_by)
}
inline std::string* Snippet::_internal_add_group_by() {
  return group_by_.Add();
}
inline void Snippet::add_group_by(const std::string& value) {
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(std::string&& value) {
  group_by_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.Snippet.group_by)
}
inline void Snippet::add_group_by(const char* value, size_t size) {
  group_by_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.Snippet.group_by)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Snippet::group_by() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.Snippet.group_by)
  return group_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Snippet::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.Snippet.group_by)
  return &group_by_;
}

// .StorageEngineInstance.Snippet.Order order_by = 15;
inline bool Snippet::_internal_has_order_by() const {
  return this != internal_default_instance() && order_by_ != nullptr;
}
inline bool Snippet::has_order_by() const {
  return _internal_has_order_by();
}
inline void Snippet::clear_order_by() {
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Order& Snippet::_internal_order_by() const {
  const ::StorageEngineInstance::Snippet_Order* p = order_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Order&>(
      ::StorageEngineInstance::_Snippet_Order_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Order& Snippet::order_by() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.order_by)
  return _internal_order_by();
}
inline void Snippet::unsafe_arena_set_allocated_order_by(
    ::StorageEngineInstance::Snippet_Order* order_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_by_);
  }
  order_by_ = order_by;
  if (order_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.order_by)
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::release_order_by() {
  
  ::StorageEngineInstance::Snippet_Order* temp = order_by_;
  order_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::unsafe_arena_release_order_by() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.order_by)
  
  ::StorageEngineInstance::Snippet_Order* temp = order_by_;
  order_by_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::_internal_mutable_order_by() {
  
  if (order_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Order>(GetArenaForAllocation());
    order_by_ = p;
  }
  return order_by_;
}
inline ::StorageEngineInstance::Snippet_Order* Snippet::mutable_order_by() {
  ::StorageEngineInstance::Snippet_Order* _msg = _internal_mutable_order_by();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.order_by)
  return _msg;
}
inline void Snippet::set_allocated_order_by(::StorageEngineInstance::Snippet_Order* order_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete order_by_;
  }
  if (order_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Order>::GetOwningArena(order_by);
    if (message_arena != submessage_arena) {
      order_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_by, submessage_arena);
    }
    
  } else {
    
  }
  order_by_ = order_by;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.order_by)
}

// .StorageEngineInstance.Snippet.Limit limit = 16;
inline bool Snippet::_internal_has_limit() const {
  return this != internal_default_instance() && limit_ != nullptr;
}
inline bool Snippet::has_limit() const {
  return _internal_has_limit();
}
inline void Snippet::clear_limit() {
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
}
inline const ::StorageEngineInstance::Snippet_Limit& Snippet::_internal_limit() const {
  const ::StorageEngineInstance::Snippet_Limit* p = limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::StorageEngineInstance::Snippet_Limit&>(
      ::StorageEngineInstance::_Snippet_Limit_default_instance_);
}
inline const ::StorageEngineInstance::Snippet_Limit& Snippet::limit() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Snippet.limit)
  return _internal_limit();
}
inline void Snippet::unsafe_arena_set_allocated_limit(
    ::StorageEngineInstance::Snippet_Limit* limit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_);
  }
  limit_ = limit;
  if (limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StorageEngineInstance.Snippet.limit)
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::release_limit() {
  
  ::StorageEngineInstance::Snippet_Limit* temp = limit_;
  limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::unsafe_arena_release_limit() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Snippet.limit)
  
  ::StorageEngineInstance::Snippet_Limit* temp = limit_;
  limit_ = nullptr;
  return temp;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::_internal_mutable_limit() {
  
  if (limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::StorageEngineInstance::Snippet_Limit>(GetArenaForAllocation());
    limit_ = p;
  }
  return limit_;
}
inline ::StorageEngineInstance::Snippet_Limit* Snippet::mutable_limit() {
  ::StorageEngineInstance::Snippet_Limit* _msg = _internal_mutable_limit();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Snippet.limit)
  return _msg;
}
inline void Snippet::set_allocated_limit(::StorageEngineInstance::Snippet_Limit* limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete limit_;
  }
  if (limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::StorageEngineInstance::Snippet_Limit>::GetOwningArena(limit);
    if (message_arena != submessage_arena) {
      limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit, submessage_arena);
    }
    
  } else {
    
  }
  limit_ = limit;
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Snippet.limit)
}

// -------------------------------------------------------------------

// Request

// int32 query_id = 1;
inline void Request::clear_query_id() {
  query_id_ = 0;
}
inline int32_t Request::_internal_query_id() const {
  return query_id_;
}
inline int32_t Request::query_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.query_id)
  return _internal_query_id();
}
inline void Request::_internal_set_query_id(int32_t value) {
  
  query_id_ = value;
}
inline void Request::set_query_id(int32_t value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.query_id)
}

// int32 work_id = 2;
inline void Request::clear_work_id() {
  work_id_ = 0;
}
inline int32_t Request::_internal_work_id() const {
  return work_id_;
}
inline int32_t Request::work_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.work_id)
  return _internal_work_id();
}
inline void Request::_internal_set_work_id(int32_t value) {
  
  work_id_ = value;
}
inline void Request::set_work_id(int32_t value) {
  _internal_set_work_id(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.work_id)
}

// string table_name = 3;
inline void Request::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Request::table_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Request.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Request.table_name)
}
inline std::string* Request::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Request.table_name)
  return _s;
}
inline const std::string& Request::_internal_table_name() const {
  return table_name_.Get();
}
inline void Request::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_table_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Request.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Request.table_name)
}

// -------------------------------------------------------------------

// Result

// string value = 1;
inline void Result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Result::value() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Result.value)
}
inline std::string* Result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.Result.value)
  return _s;
}
inline const std::string& Result::_internal_value() const {
  return value_.Get();
}
inline void Result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Result::release_value() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.Result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.Result.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::StorageEngineInstance::SnippetRequest_SnippetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::SnippetRequest_SnippetType>() {
  return ::StorageEngineInstance::SnippetRequest_SnippetType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Filter_OperType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Filter_OperType>() {
  return ::StorageEngineInstance::Snippet_Filter_OperType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Projection_SelectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Projection_SelectType>() {
  return ::StorageEngineInstance::Snippet_Projection_SelectType_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_Order_OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_Order_OrderDirection>() {
  return ::StorageEngineInstance::Snippet_Order_OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::StorageEngineInstance::Snippet_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StorageEngineInstance::Snippet_ValueType>() {
  return ::StorageEngineInstance::Snippet_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snippet_5fsample_2eproto
