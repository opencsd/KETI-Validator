// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storage_engine_instance.proto

#include "storage_engine_instance.pb.h"
#include "storage_engine_instance.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace StorageEngineInstance {

static const char* InterfaceContainer_method_names[] = {
  "/StorageEngineInstance.InterfaceContainer/SetSnippet",
  "/StorageEngineInstance.InterfaceContainer/Run",
  "/StorageEngineInstance.InterfaceContainer/SetSnippetAndRun",
};

std::unique_ptr< InterfaceContainer::Stub> InterfaceContainer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InterfaceContainer::Stub> stub(new InterfaceContainer::Stub(channel, options));
  return stub;
}

InterfaceContainer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetSnippet_(InterfaceContainer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Run_(InterfaceContainer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSnippetAndRun_(InterfaceContainer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>* InterfaceContainer::Stub::SetSnippetRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>::Create(channel_.get(), rpcmethod_SetSnippet_, context);
}

void InterfaceContainer::Stub::async::SetSnippet(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::StorageEngineInstance::SnippetRequest,::StorageEngineInstance::Result>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::StorageEngineInstance::SnippetRequest,::StorageEngineInstance::Result>::Create(stub_->channel_.get(), stub_->rpcmethod_SetSnippet_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>* InterfaceContainer::Stub::AsyncSetSnippetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>::Create(channel_.get(), cq, rpcmethod_SetSnippet_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>* InterfaceContainer::Stub::PrepareAsyncSetSnippetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>::Create(channel_.get(), cq, rpcmethod_SetSnippet_, context, false, nullptr);
}

::grpc::Status InterfaceContainer::Stub::Run(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Run_, context, request, response);
}

void InterfaceContainer::Stub::async::Run(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, response, std::move(f));
}

void InterfaceContainer::Stub::async::Run(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* InterfaceContainer::Stub::PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Run_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* InterfaceContainer::Stub::AsyncRunRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::StorageEngineInstance::SnippetRequest>* InterfaceContainer::Stub::SetSnippetAndRunRaw(::grpc::ClientContext* context, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::ClientWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), rpcmethod_SetSnippetAndRun_, context, response);
}

void InterfaceContainer::Stub::async::SetSnippetAndRun(::grpc::ClientContext* context, ::StorageEngineInstance::Result* response, ::grpc::ClientWriteReactor< ::StorageEngineInstance::SnippetRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_SetSnippetAndRun_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* InterfaceContainer::Stub::AsyncSetSnippetAndRunRaw(::grpc::ClientContext* context, ::StorageEngineInstance::Result* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_SetSnippetAndRun_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::StorageEngineInstance::SnippetRequest>* InterfaceContainer::Stub::PrepareAsyncSetSnippetAndRunRaw(::grpc::ClientContext* context, ::StorageEngineInstance::Result* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::StorageEngineInstance::SnippetRequest>::Create(channel_.get(), cq, rpcmethod_SetSnippetAndRun_, context, response, false, nullptr);
}

InterfaceContainer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterfaceContainer_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< InterfaceContainer::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>(
          [](InterfaceContainer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::StorageEngineInstance::Result,
             ::StorageEngineInstance::SnippetRequest>* stream) {
               return service->SetSnippet(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterfaceContainer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InterfaceContainer::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InterfaceContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::Result* resp) {
               return service->Run(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InterfaceContainer_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< InterfaceContainer::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result>(
          [](InterfaceContainer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::StorageEngineInstance::SnippetRequest>* reader,
             ::StorageEngineInstance::Result* resp) {
               return service->SetSnippetAndRun(ctx, reader, resp);
             }, this)));
}

InterfaceContainer::Service::~Service() {
}

::grpc::Status InterfaceContainer::Service::SetSnippet(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::StorageEngineInstance::Result, ::StorageEngineInstance::SnippetRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterfaceContainer::Service::Run(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InterfaceContainer::Service::SetSnippetAndRun(::grpc::ServerContext* context, ::grpc::ServerReader< ::StorageEngineInstance::SnippetRequest>* reader, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MergingContainer_method_names[] = {
  "/StorageEngineInstance.MergingContainer/Aggregation",
  "/StorageEngineInstance.MergingContainer/InitBuffer",
  "/StorageEngineInstance.MergingContainer/EndQuery",
  "/StorageEngineInstance.MergingContainer/GetQueryResult",
};

std::unique_ptr< MergingContainer::Stub> MergingContainer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MergingContainer::Stub> stub(new MergingContainer::Stub(channel, options));
  return stub;
}

MergingContainer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Aggregation_(MergingContainer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitBuffer_(MergingContainer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndQuery_(MergingContainer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueryResult_(MergingContainer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MergingContainer::Stub::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Aggregation_, context, request, response);
}

void MergingContainer::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, std::move(f));
}

void MergingContainer::Stub::async::Aggregation(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Aggregation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::PrepareAsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::SnippetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Aggregation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::AsyncAggregationRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAggregationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingContainer::Stub::InitBuffer(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitBuffer_, context, request, response);
}

void MergingContainer::Stub::async::InitBuffer(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitBuffer_, context, request, response, std::move(f));
}

void MergingContainer::Stub::async::InitBuffer(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::PrepareAsyncInitBufferRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::SnippetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::AsyncInitBufferRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::SnippetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingContainer::Stub::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndQuery_, context, request, response);
}

void MergingContainer::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, std::move(f));
}

void MergingContainer::Stub::async::EndQuery(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::PrepareAsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MergingContainer::Stub::AsyncEndQueryRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MergingContainer::Stub::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::QueryResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQueryResult_, context, request, response);
}

void MergingContainer::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, std::move(f));
}

void MergingContainer::Stub::async::GetQueryResult(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingContainer::Stub::PrepareAsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::QueryResult, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQueryResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::QueryResult>* MergingContainer::Stub::AsyncGetQueryResultRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQueryResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

MergingContainer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingContainer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingContainer::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SnippetRequest* req,
             ::StorageEngineInstance::Result* resp) {
               return service->Aggregation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingContainer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingContainer::Service, ::StorageEngineInstance::SnippetRequest, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::SnippetRequest* req,
             ::StorageEngineInstance::Result* resp) {
               return service->InitBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingContainer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingContainer::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::Result* resp) {
               return service->EndQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MergingContainer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MergingContainer::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::QueryResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MergingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::QueryResult* resp) {
               return service->GetQueryResult(ctx, req, resp);
             }, this)));
}

MergingContainer::Service::~Service() {
}

::grpc::Status MergingContainer::Service::Aggregation(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingContainer::Service::InitBuffer(::grpc::ServerContext* context, const ::StorageEngineInstance::SnippetRequest* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingContainer::Service::EndQuery(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MergingContainer::Service::GetQueryResult(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::QueryResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MonitoringContainer_method_names[] = {
  "/StorageEngineInstance.MonitoringContainer/SetMetaData",
  "/StorageEngineInstance.MonitoringContainer/GetMetaData",
  "/StorageEngineInstance.MonitoringContainer/GetCSDBlockInfo",
  "/StorageEngineInstance.MonitoringContainer/SetCSDMetricsInfo",
};

std::unique_ptr< MonitoringContainer::Stub> MonitoringContainer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MonitoringContainer::Stub> stub(new MonitoringContainer::Stub(channel, options));
  return stub;
}

MonitoringContainer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetMetaData_(MonitoringContainer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetaData_(MonitoringContainer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCSDBlockInfo_(MonitoringContainer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCSDMetricsInfo_(MonitoringContainer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MonitoringContainer::Stub::SetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMetaData_, context, request, response);
}

void MonitoringContainer::Stub::async::SetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMetaData_, context, request, response, std::move(f));
}

void MonitoringContainer::Stub::async::SetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MonitoringContainer::Stub::PrepareAsyncSetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::Snippet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MonitoringContainer::Stub::AsyncSetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringContainer::Stub::GetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::MetaDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::MetaDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMetaData_, context, request, response);
}

void MonitoringContainer::Stub::async::GetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::MetaDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::MetaDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetaData_, context, request, response, std::move(f));
}

void MonitoringContainer::Stub::async::GetMetaData(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::MetaDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMetaData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::MetaDataResponse>* MonitoringContainer::Stub::PrepareAsyncGetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::MetaDataResponse, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMetaData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::MetaDataResponse>* MonitoringContainer::Stub::AsyncGetMetaDataRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMetaDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringContainer::Stub::GetCSDBlockInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::StorageEngineInstance::TableBlockCount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::TableBlockCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCSDBlockInfo_, context, request, response);
}

void MonitoringContainer::Stub::async::GetCSDBlockInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::TableBlockCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Request, ::StorageEngineInstance::TableBlockCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCSDBlockInfo_, context, request, response, std::move(f));
}

void MonitoringContainer::Stub::async::GetCSDBlockInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::TableBlockCount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCSDBlockInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TableBlockCount>* MonitoringContainer::Stub::PrepareAsyncGetCSDBlockInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::TableBlockCount, ::StorageEngineInstance::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCSDBlockInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::TableBlockCount>* MonitoringContainer::Stub::AsyncGetCSDBlockInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCSDBlockInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MonitoringContainer::Stub::SetCSDMetricsInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCSDMetricsInfo_, context, request, response);
}

void MonitoringContainer::Stub::async::SetCSDMetricsInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCSDMetricsInfo_, context, request, response, std::move(f));
}

void MonitoringContainer::Stub::async::SetCSDMetricsInfo(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCSDMetricsInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MonitoringContainer::Stub::PrepareAsyncSetCSDMetricsInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::CSDMetricList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCSDMetricsInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* MonitoringContainer::Stub::AsyncSetCSDMetricsInfoRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDMetricList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCSDMetricsInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

MonitoringContainer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringContainer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringContainer::Service, ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Snippet* req,
             ::StorageEngineInstance::Result* resp) {
               return service->SetMetaData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringContainer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringContainer::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::MetaDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::MetaDataResponse* resp) {
               return service->GetMetaData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringContainer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringContainer::Service, ::StorageEngineInstance::Request, ::StorageEngineInstance::TableBlockCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Request* req,
             ::StorageEngineInstance::TableBlockCount* resp) {
               return service->GetCSDBlockInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MonitoringContainer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MonitoringContainer::Service, ::StorageEngineInstance::CSDMetricList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MonitoringContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::CSDMetricList* req,
             ::StorageEngineInstance::Result* resp) {
               return service->SetCSDMetricsInfo(ctx, req, resp);
             }, this)));
}

MonitoringContainer::Service::~Service() {
}

::grpc::Status MonitoringContainer::Service::SetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringContainer::Service::GetMetaData(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::MetaDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringContainer::Service::GetCSDBlockInfo(::grpc::ServerContext* context, const ::StorageEngineInstance::Request* request, ::StorageEngineInstance::TableBlockCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MonitoringContainer::Service::SetCSDMetricsInfo(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDMetricList* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* OffloadingContainer_method_names[] = {
  "/StorageEngineInstance.OffloadingContainer/Schedule",
  "/StorageEngineInstance.OffloadingContainer/PushCSDMetric",
};

std::unique_ptr< OffloadingContainer::Stub> OffloadingContainer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OffloadingContainer::Stub> stub(new OffloadingContainer::Stub(channel, options));
  return stub;
}

OffloadingContainer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Schedule_(OffloadingContainer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushCSDMetric_(OffloadingContainer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OffloadingContainer::Stub::Schedule(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Schedule_, context, request, response);
}

void OffloadingContainer::Stub::async::Schedule(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Schedule_, context, request, response, std::move(f));
}

void OffloadingContainer::Stub::async::Schedule(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Schedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* OffloadingContainer::Stub::PrepareAsyncScheduleRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::Snippet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Schedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* OffloadingContainer::Stub::AsyncScheduleRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::Snippet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OffloadingContainer::Stub::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDStatusList& request, ::StorageEngineInstance::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::CSDStatusList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushCSDMetric_, context, request, response);
}

void OffloadingContainer::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDStatusList* request, ::StorageEngineInstance::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::CSDStatusList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, std::move(f));
}

void OffloadingContainer::Stub::async::PushCSDMetric(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDStatusList* request, ::StorageEngineInstance::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushCSDMetric_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* OffloadingContainer::Stub::PrepareAsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDStatusList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::Result, ::StorageEngineInstance::CSDStatusList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushCSDMetric_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::Result>* OffloadingContainer::Stub::AsyncPushCSDMetricRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::CSDStatusList& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushCSDMetricRaw(context, request, cq);
  result->StartCall();
  return result;
}

OffloadingContainer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingContainer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OffloadingContainer::Service, ::StorageEngineInstance::Snippet, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OffloadingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::Snippet* req,
             ::StorageEngineInstance::Result* resp) {
               return service->Schedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OffloadingContainer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OffloadingContainer::Service, ::StorageEngineInstance::CSDStatusList, ::StorageEngineInstance::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OffloadingContainer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::CSDStatusList* req,
             ::StorageEngineInstance::Result* resp) {
               return service->PushCSDMetric(ctx, req, resp);
             }, this)));
}

OffloadingContainer::Service::~Service() {
}

::grpc::Status OffloadingContainer::Service::Schedule(::grpc::ServerContext* context, const ::StorageEngineInstance::Snippet* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OffloadingContainer::Service::PushCSDMetric(::grpc::ServerContext* context, const ::StorageEngineInstance::CSDStatusList* request, ::StorageEngineInstance::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LBA2PBAManager_method_names[] = {
  "/StorageEngineInstance.LBA2PBAManager/RequestPBA",
};

std::unique_ptr< LBA2PBAManager::Stub> LBA2PBAManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LBA2PBAManager::Stub> stub(new LBA2PBAManager::Stub(channel, options));
  return stub;
}

LBA2PBAManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestPBA_(LBA2PBAManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LBA2PBAManager::Stub::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::StorageEngineInstance::PBAResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestPBA_, context, request, response);
}

void LBA2PBAManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, std::move(f));
}

void LBA2PBAManager::Stub::async::RequestPBA(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestPBA_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* LBA2PBAManager::Stub::PrepareAsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::PBAResponse, ::StorageEngineInstance::LBARequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestPBA_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::PBAResponse>* LBA2PBAManager::Stub::AsyncRequestPBARaw(::grpc::ClientContext* context, const ::StorageEngineInstance::LBARequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestPBARaw(context, request, cq);
  result->StartCall();
  return result;
}

LBA2PBAManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LBA2PBAManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LBA2PBAManager::Service, ::StorageEngineInstance::LBARequest, ::StorageEngineInstance::PBAResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LBA2PBAManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::LBARequest* req,
             ::StorageEngineInstance::PBAResponse* resp) {
               return service->RequestPBA(ctx, req, resp);
             }, this)));
}

LBA2PBAManager::Service::~Service() {
}

::grpc::Status LBA2PBAManager::Service::RequestPBA(::grpc::ServerContext* context, const ::StorageEngineInstance::LBARequest* request, ::StorageEngineInstance::PBAResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* WALManager_method_names[] = {
  "/StorageEngineInstance.WALManager/RequestWAL",
};

std::unique_ptr< WALManager::Stub> WALManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WALManager::Stub> stub(new WALManager::Stub(channel, options));
  return stub;
}

WALManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RequestWAL_(WALManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WALManager::Stub::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::StorageEngineInstance::WALResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestWAL_, context, request, response);
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, std::move(f));
}

void WALManager::Stub::async::RequestWAL(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestWAL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::PrepareAsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StorageEngineInstance::WALResponse, ::StorageEngineInstance::WALRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestWAL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StorageEngineInstance::WALResponse>* WALManager::Stub::AsyncRequestWALRaw(::grpc::ClientContext* context, const ::StorageEngineInstance::WALRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestWALRaw(context, request, cq);
  result->StartCall();
  return result;
}

WALManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WALManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WALManager::Service, ::StorageEngineInstance::WALRequest, ::StorageEngineInstance::WALResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WALManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::StorageEngineInstance::WALRequest* req,
             ::StorageEngineInstance::WALResponse* resp) {
               return service->RequestWAL(ctx, req, resp);
             }, this)));
}

WALManager::Service::~Service() {
}

::grpc::Status WALManager::Service::RequestWAL(::grpc::ServerContext* context, const ::StorageEngineInstance::WALRequest* request, ::StorageEngineInstance::WALResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace StorageEngineInstance

