// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_engine_instance.proto

#include "storage_engine_instance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace StorageEngineInstance {
constexpr SnippetRequest::SnippetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : snippet_(nullptr)
  , type_(0)
{}
struct SnippetRequestDefaultTypeInternal {
  constexpr SnippetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetRequestDefaultTypeInternal() {}
  union {
    SnippetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetRequestDefaultTypeInternal _SnippetRequest_default_instance_;
constexpr Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_()
  , _type_cached_byte_size_(0)
  , value_(){}
struct Snippet_Filter_FilterValueDefaultTypeInternal {
  constexpr Snippet_Filter_FilterValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_Filter_FilterValueDefaultTypeInternal() {}
  union {
    Snippet_Filter_FilterValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_Filter_FilterValueDefaultTypeInternal _Snippet_Filter_FilterValue_default_instance_;
constexpr Snippet_Filter::Snippet_Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_()
  , lv_(nullptr)
  , rv_(nullptr)
  , operator__(0)
{}
struct Snippet_FilterDefaultTypeInternal {
  constexpr Snippet_FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_FilterDefaultTypeInternal() {}
  union {
    Snippet_Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_FilterDefaultTypeInternal _Snippet_Filter_default_instance_;
constexpr Snippet_Projection::Snippet_Projection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , value_type_()
  , _value_type_cached_byte_size_(0)
  , select_type_(0)
{}
struct Snippet_ProjectionDefaultTypeInternal {
  constexpr Snippet_ProjectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_ProjectionDefaultTypeInternal() {}
  union {
    Snippet_Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_ProjectionDefaultTypeInternal _Snippet_Projection_default_instance_;
constexpr Snippet_Order::Snippet_Order(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ascending_()
  , _ascending_cached_byte_size_(0)
  , column_name_(){}
struct Snippet_OrderDefaultTypeInternal {
  constexpr Snippet_OrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_OrderDefaultTypeInternal() {}
  union {
    Snippet_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_OrderDefaultTypeInternal _Snippet_Order_default_instance_;
constexpr Snippet_Dependency::Snippet_Dependency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependency_projection_()
  , dependency_filter_(){}
struct Snippet_DependencyDefaultTypeInternal {
  constexpr Snippet_DependencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_DependencyDefaultTypeInternal() {}
  union {
    Snippet_Dependency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_DependencyDefaultTypeInternal _Snippet_Dependency_default_instance_;
constexpr Snippet_Limit::Snippet_Limit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0){}
struct Snippet_LimitDefaultTypeInternal {
  constexpr Snippet_LimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Snippet_LimitDefaultTypeInternal() {}
  union {
    Snippet_Limit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Snippet_LimitDefaultTypeInternal _Snippet_Limit_default_instance_;
constexpr Snippet::Snippet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_()
  , table_col_()
  , table_filter_()
  , table_offset_()
  , _table_offset_cached_byte_size_(0)
  , table_offlen_()
  , _table_offlen_cached_byte_size_(0)
  , table_datatype_()
  , _table_datatype_cached_byte_size_(0)
  , column_alias_()
  , column_projection_()
  , column_filtering_()
  , group_by_()
  , table_alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dependency_(nullptr)
  , order_by_(nullptr)
  , limit_(nullptr)
  , query_id_(0)
  , work_id_(0)
  , pk_num_(0){}
struct SnippetDefaultTypeInternal {
  constexpr SnippetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SnippetDefaultTypeInternal() {}
  union {
    Snippet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SnippetDefaultTypeInternal _Snippet_default_instance_;
constexpr Column::Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_col_()
  , int_col_()
  , _int_col_cached_byte_size_(0)
  , double_col_()
  , col_type_(0)
{}
struct ColumnDefaultTypeInternal {
  constexpr ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnDefaultTypeInternal() {}
  union {
    Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnDefaultTypeInternal _Column_default_instance_;
constexpr QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryResult_QueryResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResult_QueryResultEntry_DoNotUseDefaultTypeInternal _QueryResult_QueryResultEntry_DoNotUse_default_instance_;
constexpr QueryResult::QueryResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_result_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , row_count_(0){}
struct QueryResultDefaultTypeInternal {
  constexpr QueryResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResultDefaultTypeInternal() {}
  union {
    QueryResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResultDefaultTypeInternal _QueryResult_default_instance_;
constexpr TableBlockCount::TableBlockCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_block_count_(0){}
struct TableBlockCountDefaultTypeInternal {
  constexpr TableBlockCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableBlockCountDefaultTypeInternal() {}
  union {
    TableBlockCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableBlockCountDefaultTypeInternal _TableBlockCount_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_id_(0)
  , work_id_(0){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUseDefaultTypeInternal {
  constexpr MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUseDefaultTypeInternal _MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse_default_instance_;
constexpr MetaDataResponse_PBAInfo::MetaDataResponse_PBAInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_pba_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , seek_pk_list_(){}
struct MetaDataResponse_PBAInfoDefaultTypeInternal {
  constexpr MetaDataResponse_PBAInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataResponse_PBAInfoDefaultTypeInternal() {}
  union {
    MetaDataResponse_PBAInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataResponse_PBAInfoDefaultTypeInternal _MetaDataResponse_PBAInfo_default_instance_;
constexpr MetaDataResponse_SstCsdMapEntry_DoNotUse::MetaDataResponse_SstCsdMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MetaDataResponse_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  constexpr MetaDataResponse_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataResponse_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MetaDataResponse_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataResponse_SstCsdMapEntry_DoNotUseDefaultTypeInternal _MetaDataResponse_SstCsdMapEntry_DoNotUse_default_instance_;
constexpr MetaDataResponse::MetaDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sst_csd_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , wal_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MetaDataResponseDefaultTypeInternal {
  constexpr MetaDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataResponseDefaultTypeInternal() {}
  union {
    MetaDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataResponseDefaultTypeInternal _MetaDataResponse_default_instance_;
constexpr CSDStatusList_CSDStatus::CSDStatusList_CSDStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_(0)
  , block_count_(0){}
struct CSDStatusList_CSDStatusDefaultTypeInternal {
  constexpr CSDStatusList_CSDStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDStatusList_CSDStatusDefaultTypeInternal() {}
  union {
    CSDStatusList_CSDStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDStatusList_CSDStatusDefaultTypeInternal _CSDStatusList_CSDStatus_default_instance_;
constexpr CSDStatusList_CsdStatusMapEntry_DoNotUse::CSDStatusList_CsdStatusMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSDStatusList_CsdStatusMapEntry_DoNotUseDefaultTypeInternal {
  constexpr CSDStatusList_CsdStatusMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDStatusList_CsdStatusMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDStatusList_CsdStatusMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDStatusList_CsdStatusMapEntry_DoNotUseDefaultTypeInternal _CSDStatusList_CsdStatusMapEntry_DoNotUse_default_instance_;
constexpr CSDStatusList::CSDStatusList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_status_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct CSDStatusListDefaultTypeInternal {
  constexpr CSDStatusListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDStatusListDefaultTypeInternal() {}
  union {
    CSDStatusList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDStatusListDefaultTypeInternal _CSDStatusList_default_instance_;
constexpr CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_usage_(0)
  , memory_usage_(0)
  , disk_usage_(0)
  , network_(0)
  , working_block_count_(0){}
struct CSDMetricList_CSDMetricDefaultTypeInternal {
  constexpr CSDMetricList_CSDMetricDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDMetricList_CSDMetricDefaultTypeInternal() {}
  union {
    CSDMetricList_CSDMetric _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDMetricList_CSDMetricDefaultTypeInternal _CSDMetricList_CSDMetric_default_instance_;
constexpr CSDMetricList::CSDMetricList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_metric_list_(){}
struct CSDMetricListDefaultTypeInternal {
  constexpr CSDMetricListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSDMetricListDefaultTypeInternal() {}
  union {
    CSDMetricList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSDMetricListDefaultTypeInternal _CSDMetricList_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr Chunk::Chunk(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(int64_t{0})
  , length_(0){}
struct ChunkDefaultTypeInternal {
  constexpr ChunkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDefaultTypeInternal() {}
  union {
    Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDefaultTypeInternal _Chunk_default_instance_;
constexpr LBA::LBA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LBADefaultTypeInternal {
  constexpr LBADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBADefaultTypeInternal() {}
  union {
    LBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBADefaultTypeInternal _LBA_default_instance_;
constexpr LBARequest::LBARequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_lba_list_(){}
struct LBARequestDefaultTypeInternal {
  constexpr LBARequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LBARequestDefaultTypeInternal() {}
  union {
    LBARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LBARequestDefaultTypeInternal _LBARequest_default_instance_;
constexpr PBA::PBA(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunks_()
  , csd_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PBADefaultTypeInternal {
  constexpr PBADefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBADefaultTypeInternal() {}
  union {
    PBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBADefaultTypeInternal _PBA_default_instance_;
constexpr PBAList::PBAList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : csd_pba_list_()
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PBAListDefaultTypeInternal {
  constexpr PBAListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBAListDefaultTypeInternal() {}
  union {
    PBAList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBAListDefaultTypeInternal _PBAList_default_instance_;
constexpr PBAResponse::PBAResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_csd_list_(){}
struct PBAResponseDefaultTypeInternal {
  constexpr PBAResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PBAResponseDefaultTypeInternal() {}
  union {
    PBAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PBAResponseDefaultTypeInternal _PBAResponse_default_instance_;
constexpr WALRequest::WALRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : req_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WALRequestDefaultTypeInternal {
  constexpr WALRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WALRequestDefaultTypeInternal() {}
  union {
    WALRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WALRequestDefaultTypeInternal _WALRequest_default_instance_;
constexpr WALResponse::WALResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deleted_key_()
  , inserted_key_()
  , inserted_value_(){}
struct WALResponseDefaultTypeInternal {
  constexpr WALResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WALResponseDefaultTypeInternal() {}
  union {
    WALResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WALResponseDefaultTypeInternal _WALResponse_default_instance_;
}  // namespace StorageEngineInstance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_5fengine_5finstance_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_storage_5fengine_5finstance_2eproto = nullptr;

const uint32_t TableStruct_storage_5fengine_5finstance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SnippetRequest, snippet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter_FilterValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, lv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, operator__),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, rv_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Filter, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, select_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Projection, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, ascending_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Order, column_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Dependency, dependency_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet_Limit, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_filter_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, dependency_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_offlen_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_datatype_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, table_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_alias_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_projection_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, column_filtering_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, group_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, order_by_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, limit_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Snippet, pk_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Column, col_type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Column, string_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Column, int_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Column, double_col_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, query_result_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::QueryResult, row_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::TableBlockCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::TableBlockCount, table_block_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, query_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, work_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Request, table_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo, csd_pba_map_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_PBAInfo, seek_pk_list_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse, sst_csd_map_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::MetaDataResponse, wal_json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CSDStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CSDStatus, ip_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CSDStatus, score_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CSDStatus, block_count_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDStatusList, csd_status_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, ip_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, memory_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, disk_usage_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, network_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList_CSDMetric, working_block_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::CSDMetricList, csd_metric_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Chunk, offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::Chunk, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA, file_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA, chunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBARequest, file_lba_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBA, csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBA, chunks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBAList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBAList, file_name_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBAList, csd_pba_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::PBAResponse, file_csd_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, req_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, type_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, deleted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, inserted_key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::WALResponse, inserted_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::StorageEngineInstance::SnippetRequest)},
  { 8, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter_FilterValue)},
  { 16, -1, -1, sizeof(::StorageEngineInstance::Snippet_Filter)},
  { 26, -1, -1, sizeof(::StorageEngineInstance::Snippet_Projection)},
  { 35, -1, -1, sizeof(::StorageEngineInstance::Snippet_Order)},
  { 43, -1, -1, sizeof(::StorageEngineInstance::Snippet_Dependency)},
  { 51, -1, -1, sizeof(::StorageEngineInstance::Snippet_Limit)},
  { 59, -1, -1, sizeof(::StorageEngineInstance::Snippet)},
  { 82, -1, -1, sizeof(::StorageEngineInstance::Column)},
  { 92, 100, -1, sizeof(::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse)},
  { 102, -1, -1, sizeof(::StorageEngineInstance::QueryResult)},
  { 110, -1, -1, sizeof(::StorageEngineInstance::TableBlockCount)},
  { 117, -1, -1, sizeof(::StorageEngineInstance::Request)},
  { 126, 134, -1, sizeof(::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse)},
  { 136, -1, -1, sizeof(::StorageEngineInstance::MetaDataResponse_PBAInfo)},
  { 144, 152, -1, sizeof(::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse)},
  { 154, -1, -1, sizeof(::StorageEngineInstance::MetaDataResponse)},
  { 162, -1, -1, sizeof(::StorageEngineInstance::CSDStatusList_CSDStatus)},
  { 171, 179, -1, sizeof(::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse)},
  { 181, -1, -1, sizeof(::StorageEngineInstance::CSDStatusList)},
  { 188, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList_CSDMetric)},
  { 201, -1, -1, sizeof(::StorageEngineInstance::CSDMetricList)},
  { 208, -1, -1, sizeof(::StorageEngineInstance::Result)},
  { 215, -1, -1, sizeof(::StorageEngineInstance::Chunk)},
  { 223, -1, -1, sizeof(::StorageEngineInstance::LBA)},
  { 231, -1, -1, sizeof(::StorageEngineInstance::LBARequest)},
  { 238, -1, -1, sizeof(::StorageEngineInstance::PBA)},
  { 246, -1, -1, sizeof(::StorageEngineInstance::PBAList)},
  { 254, -1, -1, sizeof(::StorageEngineInstance::PBAResponse)},
  { 261, -1, -1, sizeof(::StorageEngineInstance::WALRequest)},
  { 270, -1, -1, sizeof(::StorageEngineInstance::WALResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_SnippetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_FilterValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Projection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Dependency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_Limit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Snippet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryResult_QueryResultEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_QueryResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_TableBlockCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_MetaDataResponse_PBAInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_MetaDataResponse_SstCsdMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_MetaDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDStatusList_CSDStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDStatusList_CsdStatusMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDStatusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDMetricList_CSDMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_CSDMetricList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_Chunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_LBARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_PBA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_PBAList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_PBAResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_WALRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::StorageEngineInstance::_WALResponse_default_instance_),
};

const char descriptor_table_protodef_storage_5fengine_5finstance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035storage_engine_instance.proto\022\025Storage"
  "EngineInstance\"\307\003\n\016SnippetRequest\022\?\n\004typ"
  "e\030\001 \001(\01621.StorageEngineInstance.SnippetR"
  "equest.SnippetType\022/\n\007snippet\030\002 \001(\0132\036.St"
  "orageEngineInstance.Snippet\"\302\002\n\013SnippetT"
  "ype\022\024\n\020CSD_SCAN_SNIPPET\020\000\022\027\n\023AGGREGATION"
  "_SNIPPET\020\001\022\032\n\026STORAGE_FILTER_SNIPPET\020\002\022\026"
  "\n\022INNER_JOIN_SNIPPET\020\003\022\033\n\027LEFT_OUTER_JOI"
  "N_SNIPPET\020\004\022\034\n\030RIGHT_OUTER_JOIN_SNIPPET\020"
  "\005\022\026\n\022CROSS_JOIN_SNIPPET\020\006\022\021\n\rUNION_SNIPP"
  "ET\020\007\022\016\n\nIN_SNIPPET\020\010\022!\n\035DEPENDENCY_INNER"
  "_JOIN_SNIPPET\020\t\022\034\n\030DEPENDENCY_EXIST_SNIP"
  "PET\020\n\022\031\n\025DEPENDENCY_IN_SNIPPET\020\013\"\377\016\n\007Sni"
  "ppet\022\020\n\010query_ID\030\001 \001(\005\022\017\n\007work_ID\030\002 \001(\005\022"
  "\022\n\ntable_name\030\003 \003(\t\022\021\n\ttable_col\030\004 \003(\t\022;"
  "\n\014table_filter\030\005 \003(\0132%.StorageEngineInst"
  "ance.Snippet.Filter\022=\n\ndependency\030\006 \001(\0132"
  ").StorageEngineInstance.Snippet.Dependen"
  "cy\022\024\n\014table_offset\030\007 \003(\005\022\024\n\014table_offlen"
  "\030\010 \003(\005\022\026\n\016table_datatype\030\t \003(\005\022\023\n\013table_"
  "alias\030\n \001(\t\022\024\n\014column_alias\030\013 \003(\t\022D\n\021col"
  "umn_projection\030\014 \003(\0132).StorageEngineInst"
  "ance.Snippet.Projection\022\030\n\020column_filter"
  "ing\030\r \003(\t\022\020\n\010group_by\030\016 \003(\t\0226\n\010order_by\030"
  "\017 \001(\0132$.StorageEngineInstance.Snippet.Or"
  "der\0223\n\005limit\030\020 \001(\0132$.StorageEngineInstan"
  "ce.Snippet.Limit\022\016\n\006pk_num\030\021 \001(\005\032\301\004\n\006Fil"
  "ter\022=\n\002LV\030\001 \001(\01321.StorageEngineInstance."
  "Snippet.Filter.FilterValue\022@\n\010Operator\030\002"
  " \001(\0162..StorageEngineInstance.Snippet.Fil"
  "ter.OperType\022=\n\002RV\030\003 \001(\01321.StorageEngine"
  "Instance.Snippet.Filter.FilterValue\022@\n\005E"
  "XTRA\030\004 \003(\01321.StorageEngineInstance.Snipp"
  "et.Filter.FilterValue\032T\n\013FilterValue\0226\n\004"
  "type\030\001 \003(\0162(.StorageEngineInstance.Snipp"
  "et.ValueType\022\r\n\005value\030\002 \003(\t\"\336\001\n\010OperType"
  "\022\020\n\014KETI_DEFAULT\020\000\022\013\n\007KETI_GE\020\001\022\013\n\007KETI_"
  "LE\020\002\022\013\n\007KETI_GT\020\003\022\013\n\007KETI_LT\020\004\022\013\n\007KETI_E"
  "T\020\005\022\013\n\007KETI_NE\020\006\022\r\n\tKETI_LIKE\020\007\022\020\n\014KETI_"
  "BETWEEN\020\010\022\013\n\007KETI_IN\020\t\022\013\n\007KETI_IS\020\n\022\016\n\nK"
  "ETI_ISNOT\020\013\022\014\n\010KETI_NOT\020\014\022\014\n\010KETI_AND\020\r\022"
  "\013\n\007KETI_OR\020\016\032\234\002\n\nProjection\022I\n\013select_ty"
  "pe\030\001 \001(\01624.StorageEngineInstance.Snippet"
  ".Projection.SelectType\022\r\n\005value\030\002 \003(\t\022<\n"
  "\nvalue_type\030\003 \003(\0162(.StorageEngineInstanc"
  "e.Snippet.ValueType\"v\n\nSelectType\022\016\n\nCOL"
  "UMNNAME\020\000\022\007\n\003SUM\020\001\022\007\n\003AVG\020\002\022\t\n\005COUNT\020\003\022\r"
  "\n\tCOUNTSTAR\020\004\022\021\n\rCOUNTDISTINCT\020\005\022\007\n\003TOP\020"
  "\006\022\007\n\003MIN\020\007\022\007\n\003MAX\020\010\032\211\001\n\005Order\022F\n\tascendi"
  "ng\030\001 \003(\01623.StorageEngineInstance.Snippet"
  ".Order.OrderDirection\022\023\n\013column_name\030\002 \003"
  "(\t\"#\n\016OrderDirection\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\032"
  "\230\001\n\nDependency\022H\n\025dependency_projection\030"
  "\001 \003(\0132).StorageEngineInstance.Snippet.Pr"
  "ojection\022@\n\021dependency_filter\030\002 \003(\0132%.St"
  "orageEngineInstance.Snippet.Filter\032\'\n\005Li"
  "mit\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\"\234\001\n\t"
  "ValueType\022\010\n\004INT8\020\000\022\t\n\005INT16\020\001\022\t\n\005INT32\020"
  "\002\022\t\n\005INT64\020\003\022\013\n\007FLOAT32\020\004\022\013\n\007FLOAT64\020\005\022\013"
  "\n\007NUMERIC\020\006\022\010\n\004DATE\020\007\022\r\n\tTIMESTAMP\020\010\022\n\n\006"
  "STRING\020\t\022\n\n\006COLUMN\020\n\022\014\n\010OPERATOR\020\013\"\304\001\n\006C"
  "olumn\0227\n\010col_type\030\002 \001(\0162%.StorageEngineI"
  "nstance.Column.ColType\022\022\n\nstring_col\030\003 \003"
  "(\t\022\017\n\007int_col\030\004 \003(\005\022\022\n\ndouble_col\030\005 \003(\001\""
  "H\n\007ColType\022\016\n\nTYPE_EMPTY\020\000\022\017\n\013TYPE_STRIN"
  "G\020\001\022\014\n\010TYPE_INT\020\002\022\016\n\nTYPE_FLOAT\020\003\"\276\001\n\013Qu"
  "eryResult\022I\n\014query_result\030\001 \003(\01323.Storag"
  "eEngineInstance.QueryResult.QueryResultE"
  "ntry\022\021\n\trow_count\030\002 \001(\005\032Q\n\020QueryResultEn"
  "try\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.Storag"
  "eEngineInstance.Column:\0028\001\",\n\017TableBlock"
  "Count\022\031\n\021table_block_count\030\001 \001(\005\"@\n\007Requ"
  "est\022\020\n\010query_id\030\001 \001(\005\022\017\n\007work_id\030\002 \001(\005\022\022"
  "\n\ntable_name\030\003 \001(\t\"\375\002\n\020MetaDataResponse\022"
  "K\n\013sst_csd_map\030\001 \003(\01326.StorageEngineInst"
  "ance.MetaDataResponse.SstCsdMapEntry\022\020\n\010"
  "wal_json\030\002 \001(\t\032\246\001\n\007PBAInfo\022S\n\013csd_pba_ma"
  "p\030\001 \003(\0132>.StorageEngineInstance.MetaData"
  "Response.PBAInfo.CsdPbaMapEntry\022\024\n\014seek_"
  "pk_list\030\002 \003(\t\0320\n\016CsdPbaMapEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032a\n\016SstCsdMapEntr"
  "y\022\013\n\003key\030\001 \001(\t\022>\n\005value\030\002 \001(\0132/.StorageE"
  "ngineInstance.MetaDataResponse.PBAInfo:\002"
  "8\001\"\201\002\n\rCSDStatusList\022N\n\016csd_status_map\030\001"
  " \003(\01326.StorageEngineInstance.CSDStatusLi"
  "st.CsdStatusMapEntry\032;\n\tCSDStatus\022\n\n\002ip\030"
  "\001 \001(\t\022\r\n\005score\030\002 \001(\002\022\023\n\013block_count\030\003 \001("
  "\005\032c\n\021CsdStatusMapEntry\022\013\n\003key\030\001 \001(\t\022=\n\005v"
  "alue\030\002 \001(\0132..StorageEngineInstance.CSDSt"
  "atusList.CSDStatus:\0028\001\"\351\001\n\rCSDMetricList"
  "\022G\n\017csd_metric_list\030\001 \003(\0132..StorageEngin"
  "eInstance.CSDMetricList.CSDMetric\032\216\001\n\tCS"
  "DMetric\022\n\n\002id\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\021\n\tcpu_u"
  "sage\030\003 \001(\002\022\024\n\014memory_usage\030\004 \001(\002\022\022\n\ndisk"
  "_usage\030\005 \001(\002\022\017\n\007network\030\006 \001(\002\022\033\n\023working"
  "_block_count\030\007 \001(\005\"\027\n\006Result\022\r\n\005value\030\001 "
  "\001(\t\"\'\n\005Chunk\022\016\n\006offset\030\001 \001(\003\022\016\n\006length\030\002"
  " \001(\005\"F\n\003LBA\022\021\n\tfile_name\030\001 \001(\t\022,\n\006chunks"
  "\030\002 \003(\0132\034.StorageEngineInstance.Chunk\"\?\n\n"
  "LBARequest\0221\n\rfile_lba_list\030\001 \003(\0132\032.Stor"
  "ageEngineInstance.LBA\"C\n\003PBA\022\016\n\006csd_id\030\001"
  " \001(\t\022,\n\006chunks\030\002 \003(\0132\034.StorageEngineInst"
  "ance.Chunk\"N\n\007PBAList\022\021\n\tfile_name\030\001 \001(\t"
  "\0220\n\014csd_pba_list\030\002 \003(\0132\032.StorageEngineIn"
  "stance.PBA\"D\n\013PBAResponse\0225\n\rfile_csd_li"
  "st\030\001 \003(\0132\036.StorageEngineInstance.PBAList"
  "\":\n\nWALRequest\022\017\n\007req_key\030\001 \001(\t\022\014\n\004type\030"
  "\002 \001(\t\022\r\n\005value\030\003 \001(\t\"P\n\013WALResponse\022\023\n\013d"
  "eleted_key\030\001 \003(\t\022\024\n\014inserted_key\030\002 \003(\t\022\026"
  "\n\016inserted_value\030\003 \003(\t2\224\002\n\022InterfaceCont"
  "ainer\022X\n\nSetSnippet\022%.StorageEngineInsta"
  "nce.SnippetRequest\032\035.StorageEngineInstan"
  "ce.Result\"\000(\0010\001\022F\n\003Run\022\036.StorageEngineIn"
  "stance.Request\032\035.StorageEngineInstance.R"
  "esult\"\000\022\\\n\020SetSnippetAndRun\022%.StorageEng"
  "ineInstance.SnippetRequest\032\035.StorageEngi"
  "neInstance.Result\"\000(\0012\344\002\n\020MergingContain"
  "er\022U\n\013Aggregation\022%.StorageEngineInstanc"
  "e.SnippetRequest\032\035.StorageEngineInstance"
  ".Result\"\000\022T\n\nInitBuffer\022%.StorageEngineI"
  "nstance.SnippetRequest\032\035.StorageEngineIn"
  "stance.Result\"\000\022K\n\010EndQuery\022\036.StorageEng"
  "ineInstance.Request\032\035.StorageEngineInsta"
  "nce.Result\"\000\022V\n\016GetQueryResult\022\036.Storage"
  "EngineInstance.Request\032\".StorageEngineIn"
  "stance.QueryResult\"\0002\370\002\n\023MonitoringConta"
  "iner\022N\n\013SetMetaData\022\036.StorageEngineInsta"
  "nce.Snippet\032\035.StorageEngineInstance.Resu"
  "lt\"\000\022X\n\013GetMetaData\022\036.StorageEngineInsta"
  "nce.Request\032\'.StorageEngineInstance.Meta"
  "DataResponse\"\000\022[\n\017GetCSDBlockInfo\022\036.Stor"
  "ageEngineInstance.Request\032&.StorageEngin"
  "eInstance.TableBlockCount\"\000\022Z\n\021SetCSDMet"
  "ricsInfo\022$.StorageEngineInstance.CSDMetr"
  "icList\032\035.StorageEngineInstance.Result\"\0002"
  "\272\001\n\023OffloadingContainer\022K\n\010Schedule\022\036.St"
  "orageEngineInstance.Snippet\032\035.StorageEng"
  "ineInstance.Result\"\000\022V\n\rPushCSDMetric\022$."
  "StorageEngineInstance.CSDStatusList\032\035.St"
  "orageEngineInstance.Result\"\0002g\n\016LBA2PBAM"
  "anager\022U\n\nRequestPBA\022!.StorageEngineInst"
  "ance.LBARequest\032\".StorageEngineInstance."
  "PBAResponse\"\0002c\n\nWALManager\022U\n\nRequestWA"
  "L\022!.StorageEngineInstance.WALRequest\032\".S"
  "torageEngineInstance.WALResponse\"\000B6\n\026io"
  ".grpc.snippet_sampleB\024snippet_sample_Pro"
  "toP\001\242\002\003SSPb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_5fengine_5finstance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fengine_5finstance_2eproto = {
  false, false, 5858, descriptor_table_protodef_storage_5fengine_5finstance_2eproto, "storage_engine_instance.proto", 
  &descriptor_table_storage_5fengine_5finstance_2eproto_once, nullptr, 0, 31,
  schemas, file_default_instances, TableStruct_storage_5fengine_5finstance_2eproto::offsets,
  file_level_metadata_storage_5fengine_5finstance_2eproto, file_level_enum_descriptors_storage_5fengine_5finstance_2eproto, file_level_service_descriptors_storage_5fengine_5finstance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_storage_5fengine_5finstance_2eproto_getter() {
  return &descriptor_table_storage_5fengine_5finstance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_storage_5fengine_5finstance_2eproto(&descriptor_table_storage_5fengine_5finstance_2eproto);
namespace StorageEngineInstance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnippetRequest_SnippetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[0];
}
bool SnippetRequest_SnippetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SnippetRequest_SnippetType SnippetRequest::CSD_SCAN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::AGGREGATION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::STORAGE_FILTER_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::INNER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::LEFT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::RIGHT_OUTER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::CROSS_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::UNION_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_INNER_JOIN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_EXIST_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::DEPENDENCY_IN_SNIPPET;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MIN;
constexpr SnippetRequest_SnippetType SnippetRequest::SnippetType_MAX;
constexpr int SnippetRequest::SnippetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Filter_OperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[1];
}
bool Snippet_Filter_OperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_DEFAULT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_GT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ET;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_LIKE;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_BETWEEN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IN;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_IS;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_ISNOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_NOT;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_AND;
constexpr Snippet_Filter_OperType Snippet_Filter::KETI_OR;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MIN;
constexpr Snippet_Filter_OperType Snippet_Filter::OperType_MAX;
constexpr int Snippet_Filter::OperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Projection_SelectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[2];
}
bool Snippet_Projection_SelectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Projection_SelectType Snippet_Projection::COLUMNNAME;
constexpr Snippet_Projection_SelectType Snippet_Projection::SUM;
constexpr Snippet_Projection_SelectType Snippet_Projection::AVG;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNT;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTSTAR;
constexpr Snippet_Projection_SelectType Snippet_Projection::COUNTDISTINCT;
constexpr Snippet_Projection_SelectType Snippet_Projection::TOP;
constexpr Snippet_Projection_SelectType Snippet_Projection::MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::MAX;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MIN;
constexpr Snippet_Projection_SelectType Snippet_Projection::SelectType_MAX;
constexpr int Snippet_Projection::SelectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_Order_OrderDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[3];
}
bool Snippet_Order_OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_Order_OrderDirection Snippet_Order::ASC;
constexpr Snippet_Order_OrderDirection Snippet_Order::DESC;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MIN;
constexpr Snippet_Order_OrderDirection Snippet_Order::OrderDirection_MAX;
constexpr int Snippet_Order::OrderDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snippet_ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[4];
}
bool Snippet_ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Snippet_ValueType Snippet::INT8;
constexpr Snippet_ValueType Snippet::INT16;
constexpr Snippet_ValueType Snippet::INT32;
constexpr Snippet_ValueType Snippet::INT64;
constexpr Snippet_ValueType Snippet::FLOAT32;
constexpr Snippet_ValueType Snippet::FLOAT64;
constexpr Snippet_ValueType Snippet::NUMERIC;
constexpr Snippet_ValueType Snippet::DATE;
constexpr Snippet_ValueType Snippet::TIMESTAMP;
constexpr Snippet_ValueType Snippet::STRING;
constexpr Snippet_ValueType Snippet::COLUMN;
constexpr Snippet_ValueType Snippet::OPERATOR;
constexpr Snippet_ValueType Snippet::ValueType_MIN;
constexpr Snippet_ValueType Snippet::ValueType_MAX;
constexpr int Snippet::ValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Column_ColType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fengine_5finstance_2eproto);
  return file_level_enum_descriptors_storage_5fengine_5finstance_2eproto[5];
}
bool Column_ColType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Column_ColType Column::TYPE_EMPTY;
constexpr Column_ColType Column::TYPE_STRING;
constexpr Column_ColType Column::TYPE_INT;
constexpr Column_ColType Column::TYPE_FLOAT;
constexpr Column_ColType Column::ColType_MIN;
constexpr Column_ColType Column::ColType_MAX;
constexpr int Column::ColType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SnippetRequest::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet& snippet(const SnippetRequest* msg);
};

const ::StorageEngineInstance::Snippet&
SnippetRequest::_Internal::snippet(const SnippetRequest* msg) {
  return *msg->snippet_;
}
SnippetRequest::SnippetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_snippet()) {
    snippet_ = new ::StorageEngineInstance::Snippet(*from.snippet_);
  } else {
    snippet_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SnippetRequest)
}

inline void SnippetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&snippet_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&snippet_)) + sizeof(type_));
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SnippetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SnippetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete snippet_;
}

void SnippetRequest::ArenaDtor(void* object) {
  SnippetRequest* _this = reinterpret_cast< SnippetRequest* >(object);
  (void)_this;
}
void SnippetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SnippetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && snippet_ != nullptr) {
    delete snippet_;
  }
  snippet_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::StorageEngineInstance::SnippetRequest_SnippetType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snippet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnippetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SnippetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::snippet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SnippetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet snippet = 2;
  if (this->_internal_has_snippet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snippet_);
  }

  // .StorageEngineInstance.SnippetRequest.SnippetType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnippetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SnippetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnippetRequest::GetClassData() const { return &_class_data_; }

void SnippetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SnippetRequest *>(to)->MergeFrom(
      static_cast<const SnippetRequest &>(from));
}


void SnippetRequest::MergeFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_snippet()) {
    _internal_mutable_snippet()->::StorageEngineInstance::Snippet::MergeFrom(from._internal_snippet());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnippetRequest, type_)
      + sizeof(SnippetRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SnippetRequest, snippet_)>(
          reinterpret_cast<char*>(&snippet_),
          reinterpret_cast<char*>(&other->snippet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[0]);
}

// ===================================================================

class Snippet_Filter_FilterValue::_Internal {
 public:
};

Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  type_(arena),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}
Snippet_Filter_FilterValue::Snippet_Filter_FilterValue(const Snippet_Filter_FilterValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      type_(from.type_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter.FilterValue)
}

inline void Snippet_Filter_FilterValue::SharedCtor() {
}

Snippet_Filter_FilterValue::~Snippet_Filter_FilterValue() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter_FilterValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Filter_FilterValue::ArenaDtor(void* object) {
  Snippet_Filter_FilterValue* _this = reinterpret_cast< Snippet_Filter_FilterValue* >(object);
  (void)_this;
}
void Snippet_Filter_FilterValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter_FilterValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter_FilterValue::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter_FilterValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Filter.FilterValue.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter_FilterValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    int byte_size = _type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, type_, byte_size, target);
    }
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Filter.FilterValue.value");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter.FilterValue)
  return target;
}

size_t Snippet_Filter_FilterValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.ValueType type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter_FilterValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter_FilterValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter_FilterValue::GetClassData() const { return &_class_data_; }

void Snippet_Filter_FilterValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter_FilterValue *>(to)->MergeFrom(
      static_cast<const Snippet_Filter_FilterValue &>(from));
}


void Snippet_Filter_FilterValue::MergeFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter_FilterValue::CopyFrom(const Snippet_Filter_FilterValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter.FilterValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter_FilterValue::IsInitialized() const {
  return true;
}

void Snippet_Filter_FilterValue::InternalSwap(Snippet_Filter_FilterValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  type_.InternalSwap(&other->type_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter_FilterValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[1]);
}

// ===================================================================

class Snippet_Filter::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& lv(const Snippet_Filter* msg);
  static const ::StorageEngineInstance::Snippet_Filter_FilterValue& rv(const Snippet_Filter* msg);
};

const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::lv(const Snippet_Filter* msg) {
  return *msg->lv_;
}
const ::StorageEngineInstance::Snippet_Filter_FilterValue&
Snippet_Filter::_Internal::rv(const Snippet_Filter* msg) {
  return *msg->rv_;
}
Snippet_Filter::Snippet_Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Filter)
}
Snippet_Filter::Snippet_Filter(const Snippet_Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_(from.extra_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lv()) {
    lv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.lv_);
  } else {
    lv_ = nullptr;
  }
  if (from._internal_has_rv()) {
    rv_ = new ::StorageEngineInstance::Snippet_Filter_FilterValue(*from.rv_);
  } else {
    rv_ = nullptr;
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Filter)
}

inline void Snippet_Filter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lv_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operator__) -
    reinterpret_cast<char*>(&lv_)) + sizeof(operator__));
}

Snippet_Filter::~Snippet_Filter() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lv_;
  if (this != internal_default_instance()) delete rv_;
}

void Snippet_Filter::ArenaDtor(void* object) {
  Snippet_Filter* _this = reinterpret_cast< Snippet_Filter* >(object);
  (void)_this;
}
void Snippet_Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.Clear();
  if (GetArenaForAllocation() == nullptr && lv_ != nullptr) {
    delete lv_;
  }
  lv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rv_ != nullptr) {
    delete rv_;
  }
  rv_ = nullptr;
  operator__ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operator_(static_cast<::StorageEngineInstance::Snippet_Filter_OperType>(val));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lv(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operator_(), target);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rv(this), target, stream);
  }

  // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_extra(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Filter)
  return target;
}

size_t Snippet_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Filter.FilterValue EXTRA = 4;
  total_size += 1UL * this->_internal_extra_size();
  for (const auto& msg : this->extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue LV = 1;
  if (this->_internal_has_lv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lv_);
  }

  // .StorageEngineInstance.Snippet.Filter.FilterValue RV = 3;
  if (this->_internal_has_rv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rv_);
  }

  // .StorageEngineInstance.Snippet.Filter.OperType Operator = 2;
  if (this->_internal_operator_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operator_());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Filter::GetClassData() const { return &_class_data_; }

void Snippet_Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Filter *>(to)->MergeFrom(
      static_cast<const Snippet_Filter &>(from));
}


void Snippet_Filter::MergeFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_.MergeFrom(from.extra_);
  if (from._internal_has_lv()) {
    _internal_mutable_lv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_lv());
  }
  if (from._internal_has_rv()) {
    _internal_mutable_rv()->::StorageEngineInstance::Snippet_Filter_FilterValue::MergeFrom(from._internal_rv());
  }
  if (from._internal_operator_() != 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Filter::CopyFrom(const Snippet_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Filter::IsInitialized() const {
  return true;
}

void Snippet_Filter::InternalSwap(Snippet_Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extra_.InternalSwap(&other->extra_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Filter, operator__)
      + sizeof(Snippet_Filter::operator__)
      - PROTOBUF_FIELD_OFFSET(Snippet_Filter, lv_)>(
          reinterpret_cast<char*>(&lv_),
          reinterpret_cast<char*>(&other->lv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[2]);
}

// ===================================================================

class Snippet_Projection::_Internal {
 public:
};

Snippet_Projection::Snippet_Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena),
  value_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Projection)
}
Snippet_Projection::Snippet_Projection(const Snippet_Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_),
      value_type_(from.value_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  select_type_ = from.select_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Projection)
}

inline void Snippet_Projection::SharedCtor() {
select_type_ = 0;
}

Snippet_Projection::~Snippet_Projection() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Projection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Projection::ArenaDtor(void* object) {
  Snippet_Projection* _this = reinterpret_cast< Snippet_Projection* >(object);
  (void)_this;
}
void Snippet_Projection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  value_type_.Clear();
  select_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Projection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_select_type(static_cast<::StorageEngineInstance::Snippet_Projection_SelectType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Projection.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_value_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_value_type(static_cast<::StorageEngineInstance::Snippet_ValueType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_select_type(), target);
  }

  // repeated string value = 2;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Projection.value");
    target = stream->WriteString(2, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    int byte_size = _value_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, value_type_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Projection)
  return target;
}

size_t Snippet_Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.ValueType value_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_value_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_value_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .StorageEngineInstance.Snippet.Projection.SelectType select_type = 1;
  if (this->_internal_select_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_select_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Projection::GetClassData() const { return &_class_data_; }

void Snippet_Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Projection *>(to)->MergeFrom(
      static_cast<const Snippet_Projection &>(from));
}


void Snippet_Projection::MergeFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  value_type_.MergeFrom(from.value_type_);
  if (from._internal_select_type() != 0) {
    _internal_set_select_type(from._internal_select_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Projection::CopyFrom(const Snippet_Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Projection::IsInitialized() const {
  return true;
}

void Snippet_Projection::InternalSwap(Snippet_Projection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  value_type_.InternalSwap(&other->value_type_);
  swap(select_type_, other->select_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Projection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[3]);
}

// ===================================================================

class Snippet_Order::_Internal {
 public:
};

Snippet_Order::Snippet_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ascending_(arena),
  column_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Order)
}
Snippet_Order::Snippet_Order(const Snippet_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ascending_(from.ascending_),
      column_name_(from.column_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Order)
}

inline void Snippet_Order::SharedCtor() {
}

Snippet_Order::~Snippet_Order() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Order)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Order::ArenaDtor(void* object) {
  Snippet_Order* _this = reinterpret_cast< Snippet_Order* >(object);
  (void)_this;
}
void Snippet_Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ascending_.Clear();
  column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ascending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ascending(static_cast<::StorageEngineInstance::Snippet_Order_OrderDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.Order.column_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    int byte_size = _ascending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, ascending_, byte_size, target);
    }
  }

  // repeated string column_name = 2;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.Order.column_name");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Order)
  return target;
}

size_t Snippet_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Order.OrderDirection ascending = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ascending_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ascending(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ascending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Order::GetClassData() const { return &_class_data_; }

void Snippet_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Order *>(to)->MergeFrom(
      static_cast<const Snippet_Order &>(from));
}


void Snippet_Order::MergeFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Order)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ascending_.MergeFrom(from.ascending_);
  column_name_.MergeFrom(from.column_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Order::CopyFrom(const Snippet_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Order::IsInitialized() const {
  return true;
}

void Snippet_Order::InternalSwap(Snippet_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ascending_.InternalSwap(&other->ascending_);
  column_name_.InternalSwap(&other->column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Order::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[4]);
}

// ===================================================================

class Snippet_Dependency::_Internal {
 public:
};

Snippet_Dependency::Snippet_Dependency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dependency_projection_(arena),
  dependency_filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Dependency)
}
Snippet_Dependency::Snippet_Dependency(const Snippet_Dependency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependency_projection_(from.dependency_projection_),
      dependency_filter_(from.dependency_filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Dependency)
}

inline void Snippet_Dependency::SharedCtor() {
}

Snippet_Dependency::~Snippet_Dependency() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Dependency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Dependency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Dependency::ArenaDtor(void* object) {
  Snippet_Dependency* _this = reinterpret_cast< Snippet_Dependency* >(object);
  (void)_this;
}
void Snippet_Dependency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Dependency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Dependency::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependency_projection_.Clear();
  dependency_filter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Dependency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependency_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Dependency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Dependency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependency_projection(i), target, stream);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependency_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dependency_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Dependency)
  return target;
}

size_t Snippet_Dependency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Dependency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Snippet.Projection dependency_projection = 1;
  total_size += 1UL * this->_internal_dependency_projection_size();
  for (const auto& msg : this->dependency_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StorageEngineInstance.Snippet.Filter dependency_filter = 2;
  total_size += 1UL * this->_internal_dependency_filter_size();
  for (const auto& msg : this->dependency_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Dependency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Dependency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Dependency::GetClassData() const { return &_class_data_; }

void Snippet_Dependency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Dependency *>(to)->MergeFrom(
      static_cast<const Snippet_Dependency &>(from));
}


void Snippet_Dependency::MergeFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Dependency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dependency_projection_.MergeFrom(from.dependency_projection_);
  dependency_filter_.MergeFrom(from.dependency_filter_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Dependency::CopyFrom(const Snippet_Dependency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Dependency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Dependency::IsInitialized() const {
  return true;
}

void Snippet_Dependency::InternalSwap(Snippet_Dependency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependency_projection_.InternalSwap(&other->dependency_projection_);
  dependency_filter_.InternalSwap(&other->dependency_filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Dependency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[5]);
}

// ===================================================================

class Snippet_Limit::_Internal {
 public:
};

Snippet_Limit::Snippet_Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet.Limit)
}
Snippet_Limit::Snippet_Limit(const Snippet_Limit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet.Limit)
}

inline void Snippet_Limit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

Snippet_Limit::~Snippet_Limit() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet.Limit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet_Limit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Snippet_Limit::ArenaDtor(void* object) {
  Snippet_Limit* _this = reinterpret_cast< Snippet_Limit* >(object);
  (void)_this;
}
void Snippet_Limit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet_Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet_Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet_Limit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet_Limit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet.Limit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet.Limit)
  return target;
}

size_t Snippet_Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet.Limit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet_Limit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet_Limit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet_Limit::GetClassData() const { return &_class_data_; }

void Snippet_Limit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet_Limit *>(to)->MergeFrom(
      static_cast<const Snippet_Limit &>(from));
}


void Snippet_Limit::MergeFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet_Limit::CopyFrom(const Snippet_Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet_Limit::IsInitialized() const {
  return true;
}

void Snippet_Limit::InternalSwap(Snippet_Limit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet_Limit, length_)
      + sizeof(Snippet_Limit::length_)
      - PROTOBUF_FIELD_OFFSET(Snippet_Limit, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet_Limit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[6]);
}

// ===================================================================

class Snippet::_Internal {
 public:
  static const ::StorageEngineInstance::Snippet_Dependency& dependency(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Order& order_by(const Snippet* msg);
  static const ::StorageEngineInstance::Snippet_Limit& limit(const Snippet* msg);
};

const ::StorageEngineInstance::Snippet_Dependency&
Snippet::_Internal::dependency(const Snippet* msg) {
  return *msg->dependency_;
}
const ::StorageEngineInstance::Snippet_Order&
Snippet::_Internal::order_by(const Snippet* msg) {
  return *msg->order_by_;
}
const ::StorageEngineInstance::Snippet_Limit&
Snippet::_Internal::limit(const Snippet* msg) {
  return *msg->limit_;
}
Snippet::Snippet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_(arena),
  table_col_(arena),
  table_filter_(arena),
  table_offset_(arena),
  table_offlen_(arena),
  table_datatype_(arena),
  column_alias_(arena),
  column_projection_(arena),
  column_filtering_(arena),
  group_by_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Snippet)
}
Snippet::Snippet(const Snippet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_name_(from.table_name_),
      table_col_(from.table_col_),
      table_filter_(from.table_filter_),
      table_offset_(from.table_offset_),
      table_offlen_(from.table_offlen_),
      table_datatype_(from.table_datatype_),
      column_alias_(from.column_alias_),
      column_projection_(from.column_projection_),
      column_filtering_(from.column_filtering_),
      group_by_(from.group_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_alias().empty()) {
    table_alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dependency()) {
    dependency_ = new ::StorageEngineInstance::Snippet_Dependency(*from.dependency_);
  } else {
    dependency_ = nullptr;
  }
  if (from._internal_has_order_by()) {
    order_by_ = new ::StorageEngineInstance::Snippet_Order(*from.order_by_);
  } else {
    order_by_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::StorageEngineInstance::Snippet_Limit(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pk_num_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(pk_num_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Snippet)
}

inline void Snippet::SharedCtor() {
table_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dependency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pk_num_) -
    reinterpret_cast<char*>(&dependency_)) + sizeof(pk_num_));
}

Snippet::~Snippet() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Snippet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Snippet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dependency_;
  if (this != internal_default_instance()) delete order_by_;
  if (this != internal_default_instance()) delete limit_;
}

void Snippet::ArenaDtor(void* object) {
  Snippet* _this = reinterpret_cast< Snippet* >(object);
  (void)_this;
}
void Snippet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snippet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Snippet::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.Clear();
  table_col_.Clear();
  table_filter_.Clear();
  table_offset_.Clear();
  table_offlen_.Clear();
  table_datatype_.Clear();
  column_alias_.Clear();
  column_projection_.Clear();
  column_filtering_.Clear();
  group_by_.Clear();
  table_alias_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && dependency_ != nullptr) {
    delete dependency_;
  }
  dependency_ = nullptr;
  if (GetArenaForAllocation() == nullptr && order_by_ != nullptr) {
    delete order_by_;
  }
  order_by_ = nullptr;
  if (GetArenaForAllocation() == nullptr && limit_ != nullptr) {
    delete limit_;
  }
  limit_ = nullptr;
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pk_num_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(pk_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snippet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string table_col = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_col();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_col"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Dependency dependency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_table_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_offlen = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_offlen(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_table_offlen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 table_datatype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_table_datatype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_table_datatype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_alias = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_table_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.table_alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string column_alias = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_alias();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_alias"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_projection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_filtering = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_filtering();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.column_filtering"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Snippet.group_by"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Order order_by = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StorageEngineInstance.Snippet.Limit limit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pk_num = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          pk_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Snippet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Snippet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // repeated string table_name = 3;
  for (int i = 0, n = this->_internal_table_name_size(); i < n; i++) {
    const auto& s = this->_internal_table_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string table_col = 4;
  for (int i = 0, n = this->_internal_table_col_size(); i < n; i++) {
    const auto& s = this->_internal_table_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_col");
    target = stream->WriteString(4, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_table_filter(i), target, stream);
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dependency(this), target, stream);
  }

  // repeated int32 table_offset = 7;
  {
    int byte_size = _table_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_table_offset(), byte_size, target);
    }
  }

  // repeated int32 table_offlen = 8;
  {
    int byte_size = _table_offlen_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_table_offlen(), byte_size, target);
    }
  }

  // repeated int32 table_datatype = 9;
  {
    int byte_size = _table_datatype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_table_datatype(), byte_size, target);
    }
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_alias().data(), static_cast<int>(this->_internal_table_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.table_alias");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_table_alias(), target);
  }

  // repeated string column_alias = 11;
  for (int i = 0, n = this->_internal_column_alias_size(); i < n; i++) {
    const auto& s = this->_internal_column_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_alias");
    target = stream->WriteString(11, s, target);
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_projection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_column_projection(i), target, stream);
  }

  // repeated string column_filtering = 13;
  for (int i = 0, n = this->_internal_column_filtering_size(); i < n; i++) {
    const auto& s = this->_internal_column_filtering(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.column_filtering");
    target = stream->WriteString(13, s, target);
  }

  // repeated string group_by = 14;
  for (int i = 0, n = this->_internal_group_by_size(); i < n; i++) {
    const auto& s = this->_internal_group_by(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Snippet.group_by");
    target = stream->WriteString(14, s, target);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::order_by(this), target, stream);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  if (this->_internal_has_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::limit(this), target, stream);
  }

  // int32 pk_num = 17;
  if (this->_internal_pk_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_pk_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Snippet)
  return target;
}

size_t Snippet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Snippet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_name_.size());
  for (int i = 0, n = table_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_name_.Get(i));
  }

  // repeated string table_col = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(table_col_.size());
  for (int i = 0, n = table_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      table_col_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Filter table_filter = 5;
  total_size += 1UL * this->_internal_table_filter_size();
  for (const auto& msg : this->table_filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 table_offset = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_offlen = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_offlen_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_offlen_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 table_datatype = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->table_datatype_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _table_datatype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string column_alias = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_alias_.size());
  for (int i = 0, n = column_alias_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_alias_.Get(i));
  }

  // repeated .StorageEngineInstance.Snippet.Projection column_projection = 12;
  total_size += 1UL * this->_internal_column_projection_size();
  for (const auto& msg : this->column_projection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string column_filtering = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_filtering_.size());
  for (int i = 0, n = column_filtering_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_filtering_.Get(i));
  }

  // repeated string group_by = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_.size());
  for (int i = 0, n = group_by_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_.Get(i));
  }

  // string table_alias = 10;
  if (!this->_internal_table_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_alias());
  }

  // .StorageEngineInstance.Snippet.Dependency dependency = 6;
  if (this->_internal_has_dependency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependency_);
  }

  // .StorageEngineInstance.Snippet.Order order_by = 15;
  if (this->_internal_has_order_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_by_);
  }

  // .StorageEngineInstance.Snippet.Limit limit = 16;
  if (this->_internal_has_limit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *limit_);
  }

  // int32 query_ID = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_ID = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  // int32 pk_num = 17;
  if (this->_internal_pk_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pk_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snippet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Snippet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snippet::GetClassData() const { return &_class_data_; }

void Snippet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Snippet *>(to)->MergeFrom(
      static_cast<const Snippet &>(from));
}


void Snippet::MergeFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Snippet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_name_.MergeFrom(from.table_name_);
  table_col_.MergeFrom(from.table_col_);
  table_filter_.MergeFrom(from.table_filter_);
  table_offset_.MergeFrom(from.table_offset_);
  table_offlen_.MergeFrom(from.table_offlen_);
  table_datatype_.MergeFrom(from.table_datatype_);
  column_alias_.MergeFrom(from.column_alias_);
  column_projection_.MergeFrom(from.column_projection_);
  column_filtering_.MergeFrom(from.column_filtering_);
  group_by_.MergeFrom(from.group_by_);
  if (!from._internal_table_alias().empty()) {
    _internal_set_table_alias(from._internal_table_alias());
  }
  if (from._internal_has_dependency()) {
    _internal_mutable_dependency()->::StorageEngineInstance::Snippet_Dependency::MergeFrom(from._internal_dependency());
  }
  if (from._internal_has_order_by()) {
    _internal_mutable_order_by()->::StorageEngineInstance::Snippet_Order::MergeFrom(from._internal_order_by());
  }
  if (from._internal_has_limit()) {
    _internal_mutable_limit()->::StorageEngineInstance::Snippet_Limit::MergeFrom(from._internal_limit());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  if (from._internal_pk_num() != 0) {
    _internal_set_pk_num(from._internal_pk_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snippet::CopyFrom(const Snippet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Snippet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snippet::IsInitialized() const {
  return true;
}

void Snippet::InternalSwap(Snippet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_name_.InternalSwap(&other->table_name_);
  table_col_.InternalSwap(&other->table_col_);
  table_filter_.InternalSwap(&other->table_filter_);
  table_offset_.InternalSwap(&other->table_offset_);
  table_offlen_.InternalSwap(&other->table_offlen_);
  table_datatype_.InternalSwap(&other->table_datatype_);
  column_alias_.InternalSwap(&other->column_alias_);
  column_projection_.InternalSwap(&other->column_projection_);
  column_filtering_.InternalSwap(&other->column_filtering_);
  group_by_.InternalSwap(&other->group_by_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_alias_, lhs_arena,
      &other->table_alias_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snippet, pk_num_)
      + sizeof(Snippet::pk_num_)
      - PROTOBUF_FIELD_OFFSET(Snippet, dependency_)>(
          reinterpret_cast<char*>(&dependency_),
          reinterpret_cast<char*>(&other->dependency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snippet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[7]);
}

// ===================================================================

class Column::_Internal {
 public:
};

Column::Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  string_col_(arena),
  int_col_(arena),
  double_col_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Column)
}
Column::Column(const Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      string_col_(from.string_col_),
      int_col_(from.int_col_),
      double_col_(from.double_col_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  col_type_ = from.col_type_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Column)
}

inline void Column::SharedCtor() {
col_type_ = 0;
}

Column::~Column() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Column)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Column::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Column::ArenaDtor(void* object) {
  Column* _this = reinterpret_cast< Column* >(object);
  (void)_this;
}
void Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Column::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Column)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_col_.Clear();
  int_col_.Clear();
  double_col_.Clear();
  col_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .StorageEngineInstance.Column.ColType col_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_col_type(static_cast<::StorageEngineInstance::Column_ColType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string string_col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_col();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Column.string_col"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int_col = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_col(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_int_col(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double double_col = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_col(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_double_col(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Column::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Column)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .StorageEngineInstance.Column.ColType col_type = 2;
  if (this->_internal_col_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_col_type(), target);
  }

  // repeated string string_col = 3;
  for (int i = 0, n = this->_internal_string_col_size(); i < n; i++) {
    const auto& s = this->_internal_string_col(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Column.string_col");
    target = stream->WriteString(3, s, target);
  }

  // repeated int32 int_col = 4;
  {
    int byte_size = _int_col_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_int_col(), byte_size, target);
    }
  }

  // repeated double double_col = 5;
  if (this->_internal_double_col_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_double_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Column)
  return target;
}

size_t Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Column)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string string_col = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_col_.size());
  for (int i = 0, n = string_col_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_col_.Get(i));
  }

  // repeated int32 int_col = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int_col_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int_col_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_col = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_col_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .StorageEngineInstance.Column.ColType col_type = 2;
  if (this->_internal_col_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_col_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Column::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Column::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Column::GetClassData() const { return &_class_data_; }

void Column::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Column *>(to)->MergeFrom(
      static_cast<const Column &>(from));
}


void Column::MergeFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Column)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  string_col_.MergeFrom(from.string_col_);
  int_col_.MergeFrom(from.int_col_);
  double_col_.MergeFrom(from.double_col_);
  if (from._internal_col_type() != 0) {
    _internal_set_col_type(from._internal_col_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Column::CopyFrom(const Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  return true;
}

void Column::InternalSwap(Column* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  string_col_.InternalSwap(&other->string_col_);
  int_col_.InternalSwap(&other->int_col_);
  double_col_.InternalSwap(&other->double_col_);
  swap(col_type_, other->col_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Column::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[8]);
}

// ===================================================================

QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse() {}
QueryResult_QueryResultEntry_DoNotUse::QueryResult_QueryResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryResult_QueryResultEntry_DoNotUse::MergeFrom(const QueryResult_QueryResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryResult_QueryResultEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[9]);
}

// ===================================================================

class QueryResult::_Internal {
 public:
};

QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  query_result_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_result_.MergeFrom(from.query_result_);
  row_count_ = from.row_count_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.QueryResult)
}

inline void QueryResult::SharedCtor() {
row_count_ = 0;
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.QueryResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryResult::ArenaDtor(void* object) {
  QueryResult* _this = reinterpret_cast< QueryResult* >(object);
  (void)_this;
  _this->query_result_. ~MapField();
}
inline void QueryResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryResult::ArenaDtor);
  }
}
void QueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.QueryResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_result_.Clear();
  row_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.Column> query_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&query_result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.QueryResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.Column> query_result = 1;
  if (!this->_internal_query_result().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::Column >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.QueryResult.QueryResultEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_query_result().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_query_result().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::Column >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::Column >::const_iterator
          it = this->_internal_query_result().begin();
          it != this->_internal_query_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryResult_QueryResultEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::Column >::const_iterator
          it = this->_internal_query_result().begin();
          it != this->_internal_query_result().end(); ++it) {
        target = QueryResult_QueryResultEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.QueryResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.Column> query_result = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_query_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::Column >::const_iterator
      it = this->_internal_query_result().begin();
      it != this->_internal_query_result().end(); ++it) {
    total_size += QueryResult_QueryResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_row_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryResult::GetClassData() const { return &_class_data_; }

void QueryResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryResult *>(to)->MergeFrom(
      static_cast<const QueryResult &>(from));
}


void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  query_result_.MergeFrom(from.query_result_);
  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  query_result_.InternalSwap(&other->query_result_);
  swap(row_count_, other->row_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[10]);
}

// ===================================================================

class TableBlockCount::_Internal {
 public:
};

TableBlockCount::TableBlockCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.TableBlockCount)
}
TableBlockCount::TableBlockCount(const TableBlockCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_block_count_ = from.table_block_count_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.TableBlockCount)
}

inline void TableBlockCount::SharedCtor() {
table_block_count_ = 0;
}

TableBlockCount::~TableBlockCount() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.TableBlockCount)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableBlockCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableBlockCount::ArenaDtor(void* object) {
  TableBlockCount* _this = reinterpret_cast< TableBlockCount* >(object);
  (void)_this;
}
void TableBlockCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableBlockCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableBlockCount::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.TableBlockCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_block_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableBlockCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 table_block_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          table_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableBlockCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.TableBlockCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 table_block_count = 1;
  if (this->_internal_table_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_table_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.TableBlockCount)
  return target;
}

size_t TableBlockCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.TableBlockCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 table_block_count = 1;
  if (this->_internal_table_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableBlockCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableBlockCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableBlockCount::GetClassData() const { return &_class_data_; }

void TableBlockCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableBlockCount *>(to)->MergeFrom(
      static_cast<const TableBlockCount &>(from));
}


void TableBlockCount::MergeFrom(const TableBlockCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.TableBlockCount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_table_block_count() != 0) {
    _internal_set_table_block_count(from._internal_table_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableBlockCount::CopyFrom(const TableBlockCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.TableBlockCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableBlockCount::IsInitialized() const {
  return true;
}

void TableBlockCount::InternalSwap(TableBlockCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(table_block_count_, other->table_block_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableBlockCount::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[11]);
}

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Request)
}

inline void Request::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&query_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&work_id_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(work_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 work_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          work_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Request.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_query_id(), target);
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_work_id(), target);
  }

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Request.table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_table_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 3;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // int32 query_id = 1;
  if (this->_internal_query_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_query_id());
  }

  // int32 work_id = 2;
  if (this->_internal_work_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_work_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from._internal_work_id() != 0) {
    _internal_set_work_id(from._internal_work_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, work_id_)
      + sizeof(Request::work_id_)
      - PROTOBUF_FIELD_OFFSET(Request, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[12]);
}

// ===================================================================

MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse() {}
MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::MergeFrom(const MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[13]);
}

// ===================================================================

class MetaDataResponse_PBAInfo::_Internal {
 public:
};

MetaDataResponse_PBAInfo::MetaDataResponse_PBAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_pba_map_(arena),
  seek_pk_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.MetaDataResponse.PBAInfo)
}
MetaDataResponse_PBAInfo::MetaDataResponse_PBAInfo(const MetaDataResponse_PBAInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seek_pk_list_(from.seek_pk_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csd_pba_map_.MergeFrom(from.csd_pba_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.MetaDataResponse.PBAInfo)
}

inline void MetaDataResponse_PBAInfo::SharedCtor() {
}

MetaDataResponse_PBAInfo::~MetaDataResponse_PBAInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.MetaDataResponse.PBAInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetaDataResponse_PBAInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MetaDataResponse_PBAInfo::ArenaDtor(void* object) {
  MetaDataResponse_PBAInfo* _this = reinterpret_cast< MetaDataResponse_PBAInfo* >(object);
  (void)_this;
  _this->csd_pba_map_. ~MapField();
}
inline void MetaDataResponse_PBAInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MetaDataResponse_PBAInfo::ArenaDtor);
  }
}
void MetaDataResponse_PBAInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaDataResponse_PBAInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.MetaDataResponse.PBAInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_pba_map_.Clear();
  seek_pk_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaDataResponse_PBAInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> csd_pba_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&csd_pba_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string seek_pk_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_seek_pk_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.MetaDataResponse.PBAInfo.seek_pk_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaDataResponse_PBAInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.MetaDataResponse.PBAInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> csd_pba_map = 1;
  if (!this->_internal_csd_pba_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.MetaDataResponse.PBAInfo.CsdPbaMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.MetaDataResponse.PBAInfo.CsdPbaMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_csd_pba_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_csd_pba_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_csd_pba_map().begin();
          it != this->_internal_csd_pba_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_csd_pba_map().begin();
          it != this->_internal_csd_pba_map().end(); ++it) {
        target = MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string seek_pk_list = 2;
  for (int i = 0, n = this->_internal_seek_pk_list_size(); i < n; i++) {
    const auto& s = this->_internal_seek_pk_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.MetaDataResponse.PBAInfo.seek_pk_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.MetaDataResponse.PBAInfo)
  return target;
}

size_t MetaDataResponse_PBAInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.MetaDataResponse.PBAInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> csd_pba_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_csd_pba_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_csd_pba_map().begin();
      it != this->_internal_csd_pba_map().end(); ++it) {
    total_size += MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string seek_pk_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(seek_pk_list_.size());
  for (int i = 0, n = seek_pk_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      seek_pk_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaDataResponse_PBAInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetaDataResponse_PBAInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaDataResponse_PBAInfo::GetClassData() const { return &_class_data_; }

void MetaDataResponse_PBAInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetaDataResponse_PBAInfo *>(to)->MergeFrom(
      static_cast<const MetaDataResponse_PBAInfo &>(from));
}


void MetaDataResponse_PBAInfo::MergeFrom(const MetaDataResponse_PBAInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.MetaDataResponse.PBAInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_pba_map_.MergeFrom(from.csd_pba_map_);
  seek_pk_list_.MergeFrom(from.seek_pk_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaDataResponse_PBAInfo::CopyFrom(const MetaDataResponse_PBAInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.MetaDataResponse.PBAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDataResponse_PBAInfo::IsInitialized() const {
  return true;
}

void MetaDataResponse_PBAInfo::InternalSwap(MetaDataResponse_PBAInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_pba_map_.InternalSwap(&other->csd_pba_map_);
  seek_pk_list_.InternalSwap(&other->seek_pk_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaDataResponse_PBAInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[14]);
}

// ===================================================================

MetaDataResponse_SstCsdMapEntry_DoNotUse::MetaDataResponse_SstCsdMapEntry_DoNotUse() {}
MetaDataResponse_SstCsdMapEntry_DoNotUse::MetaDataResponse_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaDataResponse_SstCsdMapEntry_DoNotUse::MergeFrom(const MetaDataResponse_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaDataResponse_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[15]);
}

// ===================================================================

class MetaDataResponse::_Internal {
 public:
};

MetaDataResponse::MetaDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sst_csd_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.MetaDataResponse)
}
MetaDataResponse::MetaDataResponse(const MetaDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  wal_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    wal_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wal_json().empty()) {
    wal_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wal_json(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.MetaDataResponse)
}

inline void MetaDataResponse::SharedCtor() {
wal_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  wal_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetaDataResponse::~MetaDataResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.MetaDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MetaDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  wal_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetaDataResponse::ArenaDtor(void* object) {
  MetaDataResponse* _this = reinterpret_cast< MetaDataResponse* >(object);
  (void)_this;
  _this->sst_csd_map_. ~MapField();
}
inline void MetaDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MetaDataResponse::ArenaDtor);
  }
}
void MetaDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.MetaDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_csd_map_.Clear();
  wal_json_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.MetaDataResponse.PBAInfo> sst_csd_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string wal_json = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_wal_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.MetaDataResponse.wal_json"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.MetaDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.MetaDataResponse.PBAInfo> sst_csd_map = 1;
  if (!this->_internal_sst_csd_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::MetaDataResponse_PBAInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.MetaDataResponse.SstCsdMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sst_csd_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sst_csd_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::MetaDataResponse_PBAInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::MetaDataResponse_PBAInfo >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MetaDataResponse_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::MetaDataResponse_PBAInfo >::const_iterator
          it = this->_internal_sst_csd_map().begin();
          it != this->_internal_sst_csd_map().end(); ++it) {
        target = MetaDataResponse_SstCsdMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string wal_json = 2;
  if (!this->_internal_wal_json().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wal_json().data(), static_cast<int>(this->_internal_wal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.MetaDataResponse.wal_json");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_wal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.MetaDataResponse)
  return target;
}

size_t MetaDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.MetaDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.MetaDataResponse.PBAInfo> sst_csd_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::MetaDataResponse_PBAInfo >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += MetaDataResponse_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string wal_json = 2;
  if (!this->_internal_wal_json().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wal_json());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MetaDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaDataResponse::GetClassData() const { return &_class_data_; }

void MetaDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MetaDataResponse *>(to)->MergeFrom(
      static_cast<const MetaDataResponse &>(from));
}


void MetaDataResponse::MergeFrom(const MetaDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.MetaDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sst_csd_map_.MergeFrom(from.sst_csd_map_);
  if (!from._internal_wal_json().empty()) {
    _internal_set_wal_json(from._internal_wal_json());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaDataResponse::CopyFrom(const MetaDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.MetaDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaDataResponse::IsInitialized() const {
  return true;
}

void MetaDataResponse::InternalSwap(MetaDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sst_csd_map_.InternalSwap(&other->sst_csd_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &wal_json_, lhs_arena,
      &other->wal_json_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[16]);
}

// ===================================================================

class CSDStatusList_CSDStatus::_Internal {
 public:
};

CSDStatusList_CSDStatus::CSDStatusList_CSDStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDStatusList.CSDStatus)
}
CSDStatusList_CSDStatus::CSDStatusList_CSDStatus(const CSDStatusList_CSDStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_count_) -
    reinterpret_cast<char*>(&score_)) + sizeof(block_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDStatusList.CSDStatus)
}

inline void CSDStatusList_CSDStatus::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_count_) -
    reinterpret_cast<char*>(&score_)) + sizeof(block_count_));
}

CSDStatusList_CSDStatus::~CSDStatusList_CSDStatus() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDStatusList.CSDStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDStatusList_CSDStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSDStatusList_CSDStatus::ArenaDtor(void* object) {
  CSDStatusList_CSDStatus* _this = reinterpret_cast< CSDStatusList_CSDStatus* >(object);
  (void)_this;
}
void CSDStatusList_CSDStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDStatusList_CSDStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDStatusList_CSDStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDStatusList.CSDStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_count_) -
      reinterpret_cast<char*>(&score_)) + sizeof(block_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDStatusList_CSDStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.CSDStatusList.CSDStatus.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 block_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDStatusList_CSDStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDStatusList.CSDStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDStatusList.CSDStatus.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  // int32 block_count = 3;
  if (this->_internal_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDStatusList.CSDStatus)
  return target;
}

size_t CSDStatusList_CSDStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDStatusList.CSDStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  // int32 block_count = 3;
  if (this->_internal_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDStatusList_CSDStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDStatusList_CSDStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDStatusList_CSDStatus::GetClassData() const { return &_class_data_; }

void CSDStatusList_CSDStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDStatusList_CSDStatus *>(to)->MergeFrom(
      static_cast<const CSDStatusList_CSDStatus &>(from));
}


void CSDStatusList_CSDStatus::MergeFrom(const CSDStatusList_CSDStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDStatusList.CSDStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from._internal_block_count() != 0) {
    _internal_set_block_count(from._internal_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDStatusList_CSDStatus::CopyFrom(const CSDStatusList_CSDStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDStatusList.CSDStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDStatusList_CSDStatus::IsInitialized() const {
  return true;
}

void CSDStatusList_CSDStatus::InternalSwap(CSDStatusList_CSDStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDStatusList_CSDStatus, block_count_)
      + sizeof(CSDStatusList_CSDStatus::block_count_)
      - PROTOBUF_FIELD_OFFSET(CSDStatusList_CSDStatus, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDStatusList_CSDStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[17]);
}

// ===================================================================

CSDStatusList_CsdStatusMapEntry_DoNotUse::CSDStatusList_CsdStatusMapEntry_DoNotUse() {}
CSDStatusList_CsdStatusMapEntry_DoNotUse::CSDStatusList_CsdStatusMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDStatusList_CsdStatusMapEntry_DoNotUse::MergeFrom(const CSDStatusList_CsdStatusMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDStatusList_CsdStatusMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[18]);
}

// ===================================================================

class CSDStatusList::_Internal {
 public:
};

CSDStatusList::CSDStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_status_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDStatusList)
}
CSDStatusList::CSDStatusList(const CSDStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csd_status_map_.MergeFrom(from.csd_status_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDStatusList)
}

inline void CSDStatusList::SharedCtor() {
}

CSDStatusList::~CSDStatusList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDStatusList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDStatusList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDStatusList::ArenaDtor(void* object) {
  CSDStatusList* _this = reinterpret_cast< CSDStatusList* >(object);
  (void)_this;
  _this->csd_status_map_. ~MapField();
}
inline void CSDStatusList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CSDStatusList::ArenaDtor);
  }
}
void CSDStatusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDStatusList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_status_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDStatusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.CSDStatusList.CSDStatus> csd_status_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&csd_status_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDStatusList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDStatusList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.CSDStatusList.CSDStatus> csd_status_map = 1;
  if (!this->_internal_csd_status_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::CSDStatusList_CSDStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "StorageEngineInstance.CSDStatusList.CsdStatusMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_csd_status_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_csd_status_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::CSDStatusList_CSDStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::CSDStatusList_CSDStatus >::const_iterator
          it = this->_internal_csd_status_map().begin();
          it != this->_internal_csd_status_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CSDStatusList_CsdStatusMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::CSDStatusList_CSDStatus >::const_iterator
          it = this->_internal_csd_status_map().begin();
          it != this->_internal_csd_status_map().end(); ++it) {
        target = CSDStatusList_CsdStatusMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDStatusList)
  return target;
}

size_t CSDStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDStatusList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.CSDStatusList.CSDStatus> csd_status_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_csd_status_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::CSDStatusList_CSDStatus >::const_iterator
      it = this->_internal_csd_status_map().begin();
      it != this->_internal_csd_status_map().end(); ++it) {
    total_size += CSDStatusList_CsdStatusMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDStatusList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDStatusList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDStatusList::GetClassData() const { return &_class_data_; }

void CSDStatusList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDStatusList *>(to)->MergeFrom(
      static_cast<const CSDStatusList &>(from));
}


void CSDStatusList::MergeFrom(const CSDStatusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDStatusList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_status_map_.MergeFrom(from.csd_status_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDStatusList::CopyFrom(const CSDStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDStatusList::IsInitialized() const {
  return true;
}

void CSDStatusList::InternalSwap(CSDStatusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_status_map_.InternalSwap(&other->csd_status_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDStatusList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[19]);
}

// ===================================================================

class CSDMetricList_CSDMetric::_Internal {
 public:
};

CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}
CSDMetricList_CSDMetric::CSDMetricList_CSDMetric(const CSDMetricList_CSDMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cpu_usage_, &from.cpu_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&working_block_count_) -
    reinterpret_cast<char*>(&cpu_usage_)) + sizeof(working_block_count_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList.CSDMetric)
}

inline void CSDMetricList_CSDMetric::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_usage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&working_block_count_) -
    reinterpret_cast<char*>(&cpu_usage_)) + sizeof(working_block_count_));
}

CSDMetricList_CSDMetric::~CSDMetricList_CSDMetric() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDMetricList_CSDMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSDMetricList_CSDMetric::ArenaDtor(void* object) {
  CSDMetricList_CSDMetric* _this = reinterpret_cast< CSDMetricList_CSDMetric* >(object);
  (void)_this;
}
void CSDMetricList_CSDMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDMetricList_CSDMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDMetricList_CSDMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ip_.ClearToEmpty();
  ::memset(&cpu_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&working_block_count_) -
      reinterpret_cast<char*>(&cpu_usage_)) + sizeof(working_block_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList_CSDMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.CSDMetricList.CSDMetric.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cpu_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float memory_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float disk_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          disk_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          network_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 working_block_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          working_block_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList_CSDMetric::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.CSDMetricList.CSDMetric.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cpu_usage(), target);
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_memory_usage(), target);
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_disk_usage(), target);
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_network(), target);
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_working_block_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList.CSDMetric)
  return target;
}

size_t CSDMetricList_CSDMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // float cpu_usage = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = this->_internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 4;
  }

  // float memory_usage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = this->_internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    total_size += 1 + 4;
  }

  // float disk_usage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = this->_internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    total_size += 1 + 4;
  }

  // float network = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = this->_internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    total_size += 1 + 4;
  }

  // int32 working_block_count = 7;
  if (this->_internal_working_block_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_working_block_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList_CSDMetric::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDMetricList_CSDMetric::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList_CSDMetric::GetClassData() const { return &_class_data_; }

void CSDMetricList_CSDMetric::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDMetricList_CSDMetric *>(to)->MergeFrom(
      static_cast<const CSDMetricList_CSDMetric &>(from));
}


void CSDMetricList_CSDMetric::MergeFrom(const CSDMetricList_CSDMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_usage = from._internal_cpu_usage();
  uint32_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _internal_set_cpu_usage(from._internal_cpu_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_memory_usage = from._internal_memory_usage();
  uint32_t raw_memory_usage;
  memcpy(&raw_memory_usage, &tmp_memory_usage, sizeof(tmp_memory_usage));
  if (raw_memory_usage != 0) {
    _internal_set_memory_usage(from._internal_memory_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_disk_usage = from._internal_disk_usage();
  uint32_t raw_disk_usage;
  memcpy(&raw_disk_usage, &tmp_disk_usage, sizeof(tmp_disk_usage));
  if (raw_disk_usage != 0) {
    _internal_set_disk_usage(from._internal_disk_usage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_network = from._internal_network();
  uint32_t raw_network;
  memcpy(&raw_network, &tmp_network, sizeof(tmp_network));
  if (raw_network != 0) {
    _internal_set_network(from._internal_network());
  }
  if (from._internal_working_block_count() != 0) {
    _internal_set_working_block_count(from._internal_working_block_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList_CSDMetric::CopyFrom(const CSDMetricList_CSDMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList.CSDMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList_CSDMetric::IsInitialized() const {
  return true;
}

void CSDMetricList_CSDMetric::InternalSwap(CSDMetricList_CSDMetric* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, working_block_count_)
      + sizeof(CSDMetricList_CSDMetric::working_block_count_)
      - PROTOBUF_FIELD_OFFSET(CSDMetricList_CSDMetric, cpu_usage_)>(
          reinterpret_cast<char*>(&cpu_usage_),
          reinterpret_cast<char*>(&other->cpu_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList_CSDMetric::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[20]);
}

// ===================================================================

class CSDMetricList::_Internal {
 public:
};

CSDMetricList::CSDMetricList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_metric_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.CSDMetricList)
}
CSDMetricList::CSDMetricList(const CSDMetricList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      csd_metric_list_(from.csd_metric_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.CSDMetricList)
}

inline void CSDMetricList::SharedCtor() {
}

CSDMetricList::~CSDMetricList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.CSDMetricList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSDMetricList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDMetricList::ArenaDtor(void* object) {
  CSDMetricList* _this = reinterpret_cast< CSDMetricList* >(object);
  (void)_this;
}
void CSDMetricList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSDMetricList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSDMetricList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_metric_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDMetricList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csd_metric_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDMetricList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.CSDMetricList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_csd_metric_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_csd_metric_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.CSDMetricList)
  return target;
}

size_t CSDMetricList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.CSDMetricList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.CSDMetricList.CSDMetric csd_metric_list = 1;
  total_size += 1UL * this->_internal_csd_metric_list_size();
  for (const auto& msg : this->csd_metric_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDMetricList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSDMetricList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDMetricList::GetClassData() const { return &_class_data_; }

void CSDMetricList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSDMetricList *>(to)->MergeFrom(
      static_cast<const CSDMetricList &>(from));
}


void CSDMetricList::MergeFrom(const CSDMetricList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.CSDMetricList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_metric_list_.MergeFrom(from.csd_metric_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDMetricList::CopyFrom(const CSDMetricList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.CSDMetricList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDMetricList::IsInitialized() const {
  return true;
}

void CSDMetricList::InternalSwap(CSDMetricList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_metric_list_.InternalSwap(&other->csd_metric_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDMetricList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[21]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Result)
}

inline void Result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.Result.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.Result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }

void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Result *>(to)->MergeFrom(
      static_cast<const Result &>(from));
}


void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[22]);
}

// ===================================================================

class Chunk::_Internal {
 public:
};

Chunk::Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.Chunk)
}
Chunk::Chunk(const Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.Chunk)
}

inline void Chunk::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.Chunk)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Chunk::ArenaDtor(void* object) {
  Chunk* _this = reinterpret_cast< Chunk* >(object);
  (void)_this;
}
void Chunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.Chunk)
  return target;
}

size_t Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chunk::GetClassData() const { return &_class_data_; }

void Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chunk *>(to)->MergeFrom(
      static_cast<const Chunk &>(from));
}


void Chunk::MergeFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.Chunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chunk::CopyFrom(const Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  return true;
}

void Chunk::InternalSwap(Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chunk, length_)
      + sizeof(Chunk::length_)
      - PROTOBUF_FIELD_OFFSET(Chunk, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chunk::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[23]);
}

// ===================================================================

class LBA::_Internal {
 public:
};

LBA::LBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA)
}
LBA::LBA(const LBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA)
}

inline void LBA::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LBA::~LBA() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LBA::ArenaDtor(void* object) {
  LBA* _this = reinterpret_cast< LBA* >(object);
  (void)_this;
}
void LBA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LBA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBA::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  file_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.LBA.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Chunk chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.LBA.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // repeated .StorageEngineInstance.Chunk chunks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA)
  return target;
}

size_t LBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Chunk chunks = 2;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA::GetClassData() const { return &_class_data_; }

void LBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBA *>(to)->MergeFrom(
      static_cast<const LBA &>(from));
}


void LBA::MergeFrom(const LBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA::CopyFrom(const LBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA::IsInitialized() const {
  return true;
}

void LBA::InternalSwap(LBA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[24]);
}

// ===================================================================

class LBARequest::_Internal {
 public:
};

LBARequest::LBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_lba_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBARequest)
}
LBARequest::LBARequest(const LBARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_lba_list_(from.file_lba_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBARequest)
}

inline void LBARequest::SharedCtor() {
}

LBARequest::~LBARequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBARequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LBARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LBARequest::ArenaDtor(void* object) {
  LBARequest* _this = reinterpret_cast< LBARequest* >(object);
  (void)_this;
}
void LBARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LBARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LBARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBARequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_lba_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.LBA file_lba_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_lba_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBARequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBARequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.LBA file_lba_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_lba_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_file_lba_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBARequest)
  return target;
}

size_t LBARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBARequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.LBA file_lba_list = 1;
  total_size += 1UL * this->_internal_file_lba_list_size();
  for (const auto& msg : this->file_lba_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LBARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBARequest::GetClassData() const { return &_class_data_; }

void LBARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LBARequest *>(to)->MergeFrom(
      static_cast<const LBARequest &>(from));
}


void LBARequest::MergeFrom(const LBARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBARequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_lba_list_.MergeFrom(from.file_lba_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBARequest::CopyFrom(const LBARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBARequest::IsInitialized() const {
  return true;
}

void LBARequest::InternalSwap(LBARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_lba_list_.InternalSwap(&other->file_lba_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LBARequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[25]);
}

// ===================================================================

class PBA::_Internal {
 public:
};

PBA::PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.PBA)
}
PBA::PBA(const PBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_csd_id().empty()) {
    csd_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_csd_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.PBA)
}

inline void PBA::SharedCtor() {
csd_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  csd_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBA::~PBA() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.PBA)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  csd_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PBA::ArenaDtor(void* object) {
  PBA* _this = reinterpret_cast< PBA* >(object);
  (void)_this;
}
void PBA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBA::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.PBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunks_.Clear();
  csd_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_csd_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.PBA.csd_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.Chunk chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.PBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csd_id().data(), static_cast<int>(this->_internal_csd_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.PBA.csd_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_csd_id(), target);
  }

  // repeated .StorageEngineInstance.Chunk chunks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.PBA)
  return target;
}

size_t PBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.PBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.Chunk chunks = 2;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csd_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBA::GetClassData() const { return &_class_data_; }

void PBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PBA *>(to)->MergeFrom(
      static_cast<const PBA &>(from));
}


void PBA::MergeFrom(const PBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.PBA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  if (!from._internal_csd_id().empty()) {
    _internal_set_csd_id(from._internal_csd_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBA::CopyFrom(const PBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.PBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBA::IsInitialized() const {
  return true;
}

void PBA::InternalSwap(PBA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunks_.InternalSwap(&other->chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &csd_id_, lhs_arena,
      &other->csd_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PBA::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[26]);
}

// ===================================================================

class PBAList::_Internal {
 public:
};

PBAList::PBAList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  csd_pba_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.PBAList)
}
PBAList::PBAList(const PBAList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      csd_pba_list_(from.csd_pba_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.PBAList)
}

inline void PBAList::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PBAList::~PBAList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.PBAList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBAList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PBAList::ArenaDtor(void* object) {
  PBAList* _this = reinterpret_cast< PBAList* >(object);
  (void)_this;
}
void PBAList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBAList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBAList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.PBAList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csd_pba_list_.Clear();
  file_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBAList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.PBAList.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.PBA csd_pba_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csd_pba_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBAList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.PBAList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.PBAList.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // repeated .StorageEngineInstance.PBA csd_pba_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_csd_pba_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_csd_pba_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.PBAList)
  return target;
}

size_t PBAList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.PBAList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.PBA csd_pba_list = 2;
  total_size += 1UL * this->_internal_csd_pba_list_size();
  for (const auto& msg : this->csd_pba_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBAList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBAList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBAList::GetClassData() const { return &_class_data_; }

void PBAList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PBAList *>(to)->MergeFrom(
      static_cast<const PBAList &>(from));
}


void PBAList::MergeFrom(const PBAList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.PBAList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  csd_pba_list_.MergeFrom(from.csd_pba_list_);
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBAList::CopyFrom(const PBAList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.PBAList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAList::IsInitialized() const {
  return true;
}

void PBAList::InternalSwap(PBAList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  csd_pba_list_.InternalSwap(&other->csd_pba_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PBAList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[27]);
}

// ===================================================================

class PBAResponse::_Internal {
 public:
};

PBAResponse::PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_csd_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.PBAResponse)
}
PBAResponse::PBAResponse(const PBAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_csd_list_(from.file_csd_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.PBAResponse)
}

inline void PBAResponse::SharedCtor() {
}

PBAResponse::~PBAResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.PBAResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PBAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PBAResponse::ArenaDtor(void* object) {
  PBAResponse* _this = reinterpret_cast< PBAResponse* >(object);
  (void)_this;
}
void PBAResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PBAResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PBAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.PBAResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_csd_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PBAResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StorageEngineInstance.PBAList file_csd_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_csd_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PBAResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.PBAResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.PBAList file_csd_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_file_csd_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_file_csd_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.PBAResponse)
  return target;
}

size_t PBAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.PBAResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.PBAList file_csd_list = 1;
  total_size += 1UL * this->_internal_file_csd_list_size();
  for (const auto& msg : this->file_csd_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PBAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PBAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PBAResponse::GetClassData() const { return &_class_data_; }

void PBAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PBAResponse *>(to)->MergeFrom(
      static_cast<const PBAResponse &>(from));
}


void PBAResponse::MergeFrom(const PBAResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.PBAResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_csd_list_.MergeFrom(from.file_csd_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PBAResponse::CopyFrom(const PBAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.PBAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAResponse::IsInitialized() const {
  return true;
}

void PBAResponse::InternalSwap(PBAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_csd_list_.InternalSwap(&other->file_csd_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PBAResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[28]);
}

// ===================================================================

class WALRequest::_Internal {
 public:
};

WALRequest::WALRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.WALRequest)
}
WALRequest::WALRequest(const WALRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  req_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    req_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_req_key().empty()) {
    req_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_req_key(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.WALRequest)
}

inline void WALRequest::SharedCtor() {
req_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  req_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WALRequest::~WALRequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.WALRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WALRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  req_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WALRequest::ArenaDtor(void* object) {
  WALRequest* _this = reinterpret_cast< WALRequest* >(object);
  (void)_this;
}
void WALRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WALRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WALRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.WALRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  req_key_.ClearToEmpty();
  type_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string req_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_req_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALRequest.req_key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALRequest.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALRequest.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WALRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.WALRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string req_key = 1;
  if (!this->_internal_req_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_req_key().data(), static_cast<int>(this->_internal_req_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALRequest.req_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_req_key(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALRequest.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALRequest.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.WALRequest)
  return target;
}

size_t WALRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.WALRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string req_key = 1;
  if (!this->_internal_req_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_req_key());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WALRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALRequest::GetClassData() const { return &_class_data_; }

void WALRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WALRequest *>(to)->MergeFrom(
      static_cast<const WALRequest &>(from));
}


void WALRequest::MergeFrom(const WALRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.WALRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_req_key().empty()) {
    _internal_set_req_key(from._internal_req_key());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALRequest::CopyFrom(const WALRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.WALRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALRequest::IsInitialized() const {
  return true;
}

void WALRequest::InternalSwap(WALRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &req_key_, lhs_arena,
      &other->req_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WALRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[29]);
}

// ===================================================================

class WALResponse::_Internal {
 public:
};

WALResponse::WALResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  deleted_key_(arena),
  inserted_key_(arena),
  inserted_value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.WALResponse)
}
WALResponse::WALResponse(const WALResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deleted_key_(from.deleted_key_),
      inserted_key_(from.inserted_key_),
      inserted_value_(from.inserted_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.WALResponse)
}

inline void WALResponse::SharedCtor() {
}

WALResponse::~WALResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.WALResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WALResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WALResponse::ArenaDtor(void* object) {
  WALResponse* _this = reinterpret_cast< WALResponse* >(object);
  (void)_this;
}
void WALResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WALResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WALResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.WALResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_key_.Clear();
  inserted_key_.Clear();
  inserted_value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string deleted_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deleted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.deleted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_key();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.inserted_key"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string inserted_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_inserted_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "StorageEngineInstance.WALResponse.inserted_value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WALResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.WALResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  for (int i = 0, n = this->_internal_deleted_key_size(); i < n; i++) {
    const auto& s = this->_internal_deleted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.deleted_key");
    target = stream->WriteString(1, s, target);
  }

  // repeated string inserted_key = 2;
  for (int i = 0, n = this->_internal_inserted_key_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.inserted_key");
    target = stream->WriteString(2, s, target);
  }

  // repeated string inserted_value = 3;
  for (int i = 0, n = this->_internal_inserted_value_size(); i < n; i++) {
    const auto& s = this->_internal_inserted_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.WALResponse.inserted_value");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.WALResponse)
  return target;
}

size_t WALResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.WALResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deleted_key = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deleted_key_.size());
  for (int i = 0, n = deleted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deleted_key_.Get(i));
  }

  // repeated string inserted_key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_key_.size());
  for (int i = 0, n = inserted_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_key_.Get(i));
  }

  // repeated string inserted_value = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(inserted_value_.size());
  for (int i = 0, n = inserted_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      inserted_value_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WALResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALResponse::GetClassData() const { return &_class_data_; }

void WALResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WALResponse *>(to)->MergeFrom(
      static_cast<const WALResponse &>(from));
}


void WALResponse::MergeFrom(const WALResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.WALResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_key_.MergeFrom(from.deleted_key_);
  inserted_key_.MergeFrom(from.inserted_key_);
  inserted_value_.MergeFrom(from.inserted_value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALResponse::CopyFrom(const WALResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.WALResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALResponse::IsInitialized() const {
  return true;
}

void WALResponse::InternalSwap(WALResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  deleted_key_.InternalSwap(&other->deleted_key_);
  inserted_key_.InternalSwap(&other->inserted_key_);
  inserted_value_.InternalSwap(&other->inserted_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_5fengine_5finstance_2eproto_getter, &descriptor_table_storage_5fengine_5finstance_2eproto_once,
      file_level_metadata_storage_5fengine_5finstance_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SnippetRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::SnippetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter_FilterValue* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter_FilterValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter_FilterValue >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Filter* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Projection* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Order* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Dependency* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Dependency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Dependency >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet_Limit* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet_Limit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet_Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Snippet* Arena::CreateMaybeMessage< ::StorageEngineInstance::Snippet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Snippet >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Column* Arena::CreateMaybeMessage< ::StorageEngineInstance::Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Column >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryResult_QueryResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::QueryResult* Arena::CreateMaybeMessage< ::StorageEngineInstance::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::QueryResult >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::TableBlockCount* Arena::CreateMaybeMessage< ::StorageEngineInstance::TableBlockCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::TableBlockCount >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Request* Arena::CreateMaybeMessage< ::StorageEngineInstance::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::MetaDataResponse_PBAInfo_CsdPbaMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::MetaDataResponse_PBAInfo* Arena::CreateMaybeMessage< ::StorageEngineInstance::MetaDataResponse_PBAInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::MetaDataResponse_PBAInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::MetaDataResponse_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::MetaDataResponse* Arena::CreateMaybeMessage< ::StorageEngineInstance::MetaDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::MetaDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDStatusList_CSDStatus* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDStatusList_CSDStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDStatusList_CSDStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDStatusList_CsdStatusMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDStatusList* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDStatusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList_CSDMetric* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList_CSDMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList_CSDMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::CSDMetricList* Arena::CreateMaybeMessage< ::StorageEngineInstance::CSDMetricList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::CSDMetricList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Result* Arena::CreateMaybeMessage< ::StorageEngineInstance::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::Chunk* Arena::CreateMaybeMessage< ::StorageEngineInstance::Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBARequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::LBARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::PBA* Arena::CreateMaybeMessage< ::StorageEngineInstance::PBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::PBA >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::PBAList* Arena::CreateMaybeMessage< ::StorageEngineInstance::PBAList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::PBAList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::PBAResponse* Arena::CreateMaybeMessage< ::StorageEngineInstance::PBAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::PBAResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::WALRequest* Arena::CreateMaybeMessage< ::StorageEngineInstance::WALRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::WALRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::WALResponse* Arena::CreateMaybeMessage< ::StorageEngineInstance::WALResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::WALResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
